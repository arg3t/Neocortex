<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs/analysis on</title><link>https://wiki.fr1nge.xyz/tags/cs/analysis/</link><description>Recent content in cs/analysis on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.fr1nge.xyz/tags/cs/analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>Analysis of Merge Sort</title><link>https://wiki.fr1nge.xyz/notes/Analysis-of-Merge-Sort/</link><pubDate>Tue, 21 Dec 2021 08:35:42 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/Analysis-of-Merge-Sort/</guid><description>Calculating the [[/notes/Big-Oh Notation|Big-Oh Complexity]] of [[/notes/Merge Sort|Merge Sort]] is not a difficult task. There are two ways to do it, one being more intuitive and the other being more mathematical.</description></item><item><title>Dynamic Arrays</title><link>https://wiki.fr1nge.xyz/notes/Dynamic-Arrays/</link><pubDate>Tue, 23 Nov 2021 09:00:33 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Dynamic-Arrays/</guid><description>Normally, adding an element to an already full [[/notes/Array|Array]] would take $O(n)$ time, if you resize it by 1 cell everytime an element is added, that is.</description></item><item><title>7 Important Functions</title><link>https://wiki.fr1nge.xyz/notes/7-Important-Functions/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/7-Important-Functions/</guid><description>When calculating the [[/notes/Big-Oh Notation|Big-Oh Notation]] of a function it is important to know the order of these functions.</description></item><item><title>Big Omega Notation</title><link>https://wiki.fr1nge.xyz/notes/Big-Omega-Notation/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Big-Omega-Notation/</guid><description>The big omega notation $\Omega(n)$ is basically the opposite of [[/notes/Big-Oh Notation|Big-Oh Notation]], what it does is that it shows the time an algorithm in the best-case relative to its input size, n.</description></item><item><title>Big-Oh Notation</title><link>https://wiki.fr1nge.xyz/notes/Big-Oh-Notation/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Big-Oh-Notation/</guid><description>Big-Oh notation is a way of calculating the maximum time an algorithm can take relative to its input size. The two ways to calculate big-oh notation is:</description></item><item><title>Big-Theta Notation</title><link>https://wiki.fr1nge.xyz/notes/Big-Theta-Notation/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Big-Theta-Notation/</guid><description>Big theta notation is a little more complicated, the Big-Theta notation covers both the worst and best-case scenarios that an algorithm might have relative to its input (n).</description></item><item><title>Empirical Analysis</title><link>https://wiki.fr1nge.xyz/notes/Empirical-Analysis/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Empirical-Analysis/</guid><description>Empirical analysis is the process of running an algorithm with different input sizes and plotting/analyzin the change in input times overtime.</description></item></channel></rss>