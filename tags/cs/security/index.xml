<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs/security on</title><link>https://wiki.yigit.run/tags/cs/security/</link><description>Recent content in cs/security on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.yigit.run/tags/cs/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Pwnable.kr Cmd2</title><link>https://wiki.yigit.run/notes/wn09/</link><pubDate>Sat, 20 Aug 2022 19:28:06 +0200</pubDate><guid>https://wiki.yigit.run/notes/wn09/</guid><description>Similar to [[notes/uolp | cmd1]], this one is another jail escape. I am not going to go too much into details, but we can run the following:</description></item><item><title>Pwnable.kr Cmd1</title><link>https://wiki.yigit.run/notes/uolp/</link><pubDate>Sat, 20 Aug 2022 18:47:48 +0200</pubDate><guid>https://wiki.yigit.run/notes/uolp/</guid><description>This one is easy, we get the following code:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;stdio.</description></item><item><title>Pwnable.kr Lotto</title><link>https://wiki.yigit.run/notes/h1a9/</link><pubDate>Sat, 20 Aug 2022 18:29:36 +0200</pubDate><guid>https://wiki.yigit.run/notes/h1a9/</guid><description>Here, we have lotto program, however, while checking if our input is a match, it uses the following piece of code:</description></item><item><title>Pwnable.kr Blackjack</title><link>https://wiki.yigit.run/notes/wsbt/</link><pubDate>Sat, 20 Aug 2022 18:09:52 +0200</pubDate><guid>https://wiki.yigit.run/notes/wsbt/</guid><description>A blackjack code published on cboard is also for this challenge. A quick glimpse through the code shows that we can enter negative values as bets, and those values are substracted(hence added) from our current balance once we lose.</description></item><item><title>Pwnable.kr Coin1</title><link>https://wiki.yigit.run/notes/jsb9/</link><pubDate>Sat, 20 Aug 2022 14:51:42 +0200</pubDate><guid>https://wiki.yigit.run/notes/jsb9/</guid><description>When we connect with nc pwnable.kr 9007, we get the following text to greet us:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 --------------------------------------------------- - Shall we play a game?</description></item><item><title>Shellshock</title><link>https://wiki.yigit.run/notes/k5eu/</link><pubDate>Sat, 20 Aug 2022 14:19:34 +0200</pubDate><guid>https://wiki.yigit.run/notes/k5eu/</guid><description>Shellshock is a vulnerability with code CVE-2014-6271. The bug occurs because bash processes trailing strings after function definitions in the values of environment variables.</description></item><item><title>Pwnable.kr Shellshock</title><link>https://wiki.yigit.run/notes/s294/</link><pubDate>Sat, 20 Aug 2022 14:06:14 +0200</pubDate><guid>https://wiki.yigit.run/notes/s294/</guid><description>This challenge has a bash executable in the home directory which the shellshock executable runs like below:
1 system(&amp;#34;/home/shellshock/bash -c &amp;#39;echo shock_me&amp;#39;&amp;#34;); The bash binary is vulnerable to [[notes/k5eu | shellshock]] as can be seen by the following command:</description></item><item><title>Pwnable.kr Mistake</title><link>https://wiki.yigit.run/notes/ojor/</link><pubDate>Sat, 20 Aug 2022 13:40:53 +0200</pubDate><guid>https://wiki.yigit.run/notes/ojor/</guid><description>For this one, you need to be especially careful, while inspecting the source code, pay attention to the line:
1 if(fd=open(&amp;#34;/home/mistake/password&amp;#34;,O_RDONLY,0400) &amp;lt; 0){ Here, the programmer meant to to save the return value of open() to fd, but they forgot to use braces so instead they save the result of the comparison to fd.</description></item><item><title>Pwnable.kr Leg</title><link>https://wiki.yigit.run/notes/l8zl/</link><pubDate>Sat, 20 Aug 2022 13:28:55 +0200</pubDate><guid>https://wiki.yigit.run/notes/l8zl/</guid><description>This challenge is an introductory ARM assembly challenge. It gives us two files:
leg.c:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include &amp;lt;stdio.</description></item><item><title>Pwnable.kr Input</title><link>https://wiki.yigit.run/notes/jcbl/</link><pubDate>Sat, 20 Aug 2022 11:23:47 +0200</pubDate><guid>https://wiki.yigit.run/notes/jcbl/</guid><description>This challenges teaches the solver on controlling environment variables, arguments and pipes of the process that is executed as well as using sockets.</description></item><item><title>pwnable.kr</title><link>https://wiki.yigit.run/notes/63l5/</link><pubDate>Sat, 20 Aug 2022 11:20:07 +0200</pubDate><guid>https://wiki.yigit.run/notes/63l5/</guid><description> pwnable.kr is a wargame on binary exploitation and reverse engineering. It has 4 parts:
Toddler&amp;rsquo;s Bottle [[notes/uutv | random]] [[notes/jcbl | input]] [[notes/l8zl | leg]] [[notes/ojor | mistake]] [[notes/s294 | shellshock]] [[notes/jsb9 | coin1]] [[notes/wsbt | blackjack]] [[notes/h1a9 | lotto]] [[notes/uolp | cmd1]] [[notes/wn09 | cmd2]]] [[notes/pi2k | uaf]]</description></item><item><title>Pwnable.kr Random</title><link>https://wiki.yigit.run/notes/uutv/</link><pubDate>Sat, 20 Aug 2022 10:18:19 +0200</pubDate><guid>https://wiki.yigit.run/notes/uutv/</guid><description>The source code for the challenge is:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;stdio.</description></item><item><title>Reversing Hero Level 4</title><link>https://wiki.yigit.run/notes/d7c5/</link><pubDate>Sat, 20 Aug 2022 09:30:34 +0200</pubDate><guid>https://wiki.yigit.run/notes/d7c5/</guid><description>Initial opinions Opening up the file, we are greeted with the start function. It calls a function and checks if it returns an exit code 0 and gives us the flag if that is the case:</description></item><item><title>Reversing Hero Level 1</title><link>https://wiki.yigit.run/notes/ujha/</link><pubDate>Fri, 19 Aug 2022 18:15:48 +0200</pubDate><guid>https://wiki.yigit.run/notes/ujha/</guid><description/></item><item><title>Reversing Hero</title><link>https://wiki.yigit.run/notes/60y8/</link><pubDate>Fri, 19 Aug 2022 18:11:32 +0200</pubDate><guid>https://wiki.yigit.run/notes/60y8/</guid><description>Reversing Hero is a wargame/challenge that helps you learn reverse engineering. It has about 15 levels, here are my notes for solving each:</description></item><item><title>OvertheWire Krypton</title><link>https://wiki.yigit.run/notes/OvertheWire-Krypton/</link><pubDate>Mon, 17 Jan 2022 05:21:09 +0100</pubDate><guid>https://wiki.yigit.run/notes/OvertheWire-Krypton/</guid><description> [[notes/krypton0&amp;amp;1|krypton0 &amp;amp;&amp;amp; krypton1]] [[notes/krypton2|krypton2]] [[notes/krypton3|krypton3]] [[notes/krypton4|krypton4]] [[notes/krypton5|krypton5]] [[notes/krypton6|krypton6]]</description></item><item><title>Hash Functions</title><link>https://wiki.yigit.run/notes/Hash-Functions/</link><pubDate>Fri, 31 Dec 2021 12:54:13 +0300</pubDate><guid>https://wiki.yigit.run/notes/Hash-Functions/</guid><description>Hash functions are functions that take in data, or a stream of data and output a value that is set in size.</description></item><item><title>Authentication</title><link>https://wiki.yigit.run/notes/Authentication/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/Authentication/</guid><description>Split this into multiple notes Authentication Authentication vulnerabilities are one of the simpler ones. Yet, due to obvious reasons, they can have very serious impacts.</description></item><item><title>Bypasses</title><link>https://wiki.yigit.run/notes/Web-Bypasses/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/Web-Bypasses/</guid><description>By setting this to 127.0.0.1, forbidden 403 responses. Also, you can occasionally bypass rate limitations by changing the value of the header to another ip every-time you get rate-limited.</description></item><item><title>File Path Traversal</title><link>https://wiki.yigit.run/notes/Path-Traversal/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/Path-Traversal/</guid><description>File path traversal vulnerabilities allow an attacker to read/write arbitrary files in a web server. This ability can be used to leak sensitive information or, in case of writing, can be used to escalate to OS Command injection.</description></item><item><title>krypton0 &amp;&amp; krypton1</title><link>https://wiki.yigit.run/notes/krypton01/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton01/</guid><description> krypton0: echo S1JZUFRPTklTR1JFQVQ= | base64 -d (KRYPTONISGREAT) krypton1: cat krypton2 | tr A-Z N-ZA-M (ROTTEN)</description></item><item><title>krypton2</title><link>https://wiki.yigit.run/notes/krypton2/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton2/</guid><description>create a file that contains all the letters in the alphabet, and run the encrypt binary on the file. Now you have a one-to-one map of all the letters and their correspondants.</description></item><item><title>krypton3</title><link>https://wiki.yigit.run/notes/krypton3/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton3/</guid><description>We have 3 files, translated from english text that were encrypted from the same key. Since they are originally english, we can have a general idea of the key by counting the frequency of each character.</description></item><item><title>krypton4</title><link>https://wiki.yigit.run/notes/krypton4/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton4/</guid><description>This time a [[notes/Vigenere|vigenere cipher]] is used to encrypt the text. We know the key is 6 characters long. There are two files.</description></item><item><title>krypton5</title><link>https://wiki.yigit.run/notes/krypton5/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton5/</guid><description>same method as krypton4
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def letter_freq(string): counts = [0]*26 freqs = {} for i in string: c = ord(i.</description></item><item><title>krypton6</title><link>https://wiki.yigit.run/notes/krypton6/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton6/</guid><description>When we pass a bunch of &amp;ldquo;A&amp;quot;s into to the encryption binary, we get a repeating pattern EICTDGYIYZKTHNSIRFXYCPFUEOCKRN. We can then simply use this to calculate the original text:</description></item><item><title>Leviathan</title><link>https://wiki.yigit.run/notes/Leviathan/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/Leviathan/</guid><description>leviathan0: grep leviathan ~/.backup/bookmarks.html (rioGegei8m) leviathan1 The home dir has a single SUID binary check, owned by leviathan2</description></item><item><title>OverTheWire Natas</title><link>https://wiki.yigit.run/notes/OverTheWire-Natas/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/OverTheWire-Natas/</guid><description>natas0: in comments (gtVrDuiDfck831PqWsLEZy5gyDz1clto) natas1: in comments too (ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi) natas2: /files/users.txt (sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14) natas3: /robots.txt (Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ) natas4: Referrer header (iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq) natas5: cookie loggedin (aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1) natas6: includes/secret.</description></item><item><title>SQL Injection</title><link>https://wiki.yigit.run/notes/SQL-Injection/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/SQL-Injection/</guid><description>SQL injection vulnerabilities occur when developers fail to properly sanitise the parameters in an SQL query that are provided by users.</description></item><item><title>XSS Vectors</title><link>https://wiki.yigit.run/notes/XSS-Vectors/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/XSS-Vectors/</guid><description>Split into multiple notes XSS Vectors XSS Vector Without Spaces, Using Throw This payload is taken from the portswigger academy lab.</description></item><item><title>XXE Injection</title><link>https://wiki.yigit.run/notes/XXE/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/XXE/</guid><description>Split this into multiple notes XXE Injection The XML format allows users to specify entities which can be used inside the XML document using the formant &amp;amp;entityname;.</description></item></channel></rss>