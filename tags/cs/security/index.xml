<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs/security on</title><link>https://wiki.yigit.run/tags/cs/security/</link><description>Recent content in cs/security on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.yigit.run/tags/cs/security/index.xml" rel="self" type="application/rss+xml"/><item><title>OvertheWire Krypton</title><link>https://wiki.yigit.run/notes/OvertheWire-Krypton/</link><pubDate>Mon, 17 Jan 2022 05:21:09 +0100</pubDate><guid>https://wiki.yigit.run/notes/OvertheWire-Krypton/</guid><description> [[notes/krypton0&amp;amp;1|krypton0 &amp;amp;&amp;amp; krypton1]] [[notes/krypton2|krypton2]] [[notes/krypton3|krypton3]] [[notes/krypton4|krypton4]] [[notes/krypton5|krypton5]] [[notes/krypton6|krypton6]]</description></item><item><title>Hash Functions</title><link>https://wiki.yigit.run/notes/Hash-Functions/</link><pubDate>Fri, 31 Dec 2021 12:54:13 +0300</pubDate><guid>https://wiki.yigit.run/notes/Hash-Functions/</guid><description>Hash functions are functions that take in data, or a stream of data and output a value that is set in size.</description></item><item><title>Authentication</title><link>https://wiki.yigit.run/notes/Authentication/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/Authentication/</guid><description>Split this into multiple notes Authentication Authentication vulnerabilities are one of the simpler ones. Yet, due to obvious reasons, they can have very serious impacts.</description></item><item><title>Bypasses</title><link>https://wiki.yigit.run/notes/Web-Bypasses/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/Web-Bypasses/</guid><description>By setting this to 127.0.0.1, forbidden 403 responses. Also, you can occasionally bypass rate limitations by changing the value of the header to another ip every-time you get rate-limited.</description></item><item><title>File Path Traversal</title><link>https://wiki.yigit.run/notes/Path-Traversal/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/Path-Traversal/</guid><description>File path traversal vulnerabilities allow an attacker to read/write arbitrary files in a web server. This ability can be used to leak sensitive information or, in case of writing, can be used to escalate to OS Command injection.</description></item><item><title>krypton0 &amp;&amp; krypton1</title><link>https://wiki.yigit.run/notes/krypton01/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton01/</guid><description> krypton0: echo S1JZUFRPTklTR1JFQVQ= | base64 -d (KRYPTONISGREAT) krypton1: cat krypton2 | tr A-Z N-ZA-M (ROTTEN)</description></item><item><title>krypton2</title><link>https://wiki.yigit.run/notes/krypton2/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton2/</guid><description>create a file that contains all the letters in the alphabet, and run the encrypt binary on the file. Now you have a one-to-one map of all the letters and their correspondants.</description></item><item><title>krypton3</title><link>https://wiki.yigit.run/notes/krypton3/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton3/</guid><description>We have 3 files, translated from english text that were encrypted from the same key. Since they are originally english, we can have a general idea of the key by counting the frequency of each character.</description></item><item><title>krypton4</title><link>https://wiki.yigit.run/notes/krypton4/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton4/</guid><description>This time a [[notes/Vigenere|vigenere cipher]] is used to encrypt the text. We know the key is 6 characters long. There are two files.</description></item><item><title>krypton5</title><link>https://wiki.yigit.run/notes/krypton5/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton5/</guid><description>same method as krypton4
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def letter_freq(string): counts = [0]*26 freqs = {} for i in string: c = ord(i.</description></item><item><title>krypton6</title><link>https://wiki.yigit.run/notes/krypton6/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton6/</guid><description>When we pass a bunch of &amp;ldquo;A&amp;quot;s into to the encryption binary, we get a repeating pattern EICTDGYIYZKTHNSIRFXYCPFUEOCKRN. We can then simply use this to calculate the original text:</description></item><item><title>Leviathan</title><link>https://wiki.yigit.run/notes/Leviathan/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/Leviathan/</guid><description>leviathan0: grep leviathan ~/.backup/bookmarks.html (rioGegei8m) leviathan1 The home dir has a single SUID binary check, owned by leviathan2</description></item><item><title>OverTheWire Natas</title><link>https://wiki.yigit.run/notes/OverTheWire-Natas/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/OverTheWire-Natas/</guid><description>natas0: in comments (gtVrDuiDfck831PqWsLEZy5gyDz1clto) natas1: in comments too (ZluruAthQk7Q2MqmDeTiUij2ZvWy2mBi) natas2: /files/users.txt (sJIJNW6ucpu6HPZ1ZAchaDtwd7oGrD14) natas3: /robots.txt (Z9tkRkWmpt9Qr7XrR5jWRkgOU901swEZ) natas4: Referrer header (iX6IOfmpN7AYOQGPwtn3fXpbaJVJcHfq) natas5: cookie loggedin (aGoY4q2Dc6MgDq4oL4YtoKtyAg9PeHa1) natas6: includes/secret.</description></item><item><title>SQL Injection</title><link>https://wiki.yigit.run/notes/SQL-Injection/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/SQL-Injection/</guid><description>SQL injection vulnerabilities occur when developers fail to properly sanitise the parameters in an SQL query that are provided by users.</description></item><item><title>XSS Vectors</title><link>https://wiki.yigit.run/notes/XSS-Vectors/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/XSS-Vectors/</guid><description>Split into multiple notes XSS Vectors XSS Vector Without Spaces, Using Throw This payload is taken from the portswigger academy lab.</description></item><item><title>XXE Injection</title><link>https://wiki.yigit.run/notes/XXE/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/XXE/</guid><description>Split this into multiple notes XXE Injection The XML format allows users to specify entities which can be used inside the XML document using the formant &amp;amp;entityname;.</description></item></channel></rss>