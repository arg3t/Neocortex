<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs/trees on</title><link>https://wiki.fr1nge.xyz/tags/cs/trees/</link><description>Recent content in cs/trees on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.fr1nge.xyz/tags/cs/trees/index.xml" rel="self" type="application/rss+xml"/><item><title>Red-Black Tree Deletion</title><link>https://wiki.fr1nge.xyz/notes/Red-Black-Tree-Deletion/</link><pubDate>Wed, 05 Jan 2022 08:43:21 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/Red-Black-Tree-Deletion/</guid><description>After deleting from the [[/notes/Red-Black Trees|Red-Black Trees]] just like a [[/notes/Deleting From A Binary Search Tree|BST]], the promoted node is colored black.</description></item><item><title>Red-Black Tree Insertions</title><link>https://wiki.fr1nge.xyz/notes/Red-Black-Tree-Insertions/</link><pubDate>Wed, 05 Jan 2022 08:42:32 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/Red-Black-Tree-Insertions/</guid><description>After inserting into a [[/notes/Red-Black Trees|red black tree]] just like a [[/notes/Binary Search Trees|BST]], the newly inserted node is colored red.</description></item><item><title>Red-Black Trees</title><link>https://wiki.fr1nge.xyz/notes/Red-Black-Trees/</link><pubDate>Tue, 04 Jan 2022 01:37:37 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/Red-Black-Trees/</guid><description>Red-Black trees are a type of [[/notes/Binary Search Trees|Binary Search Trees]] which aim to keep the tree balanced by adding an extra property into each node, whether it is red or black and enforcing a set of properties:</description></item><item><title>Multiway Search Trees</title><link>https://wiki.fr1nge.xyz/notes/Multiway-Search-Trees/</link><pubDate>Mon, 03 Jan 2022 12:44:50 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/Multiway-Search-Trees/</guid><description>Multiway search trees are basically search trees, just like [[/notes/Binary Search Trees|Binary Search Trees]] except that they don&amp;rsquo;t have to be binary trees and each node can have more than one entries.</description></item><item><title>(2,4) Trees</title><link>https://wiki.fr1nge.xyz/notes/24-Trees/</link><pubDate>Mon, 03 Jan 2022 01:01:08 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/24-Trees/</guid><description>(2,4) trees are basically [[/notes/Multiway Search Trees|Multiway Search Trees]] with two added rules:
Every internal node can have at most 4 children Every external node has the same depth In order to sustain this property, some checks and resutructuring often needs to be made in order to sustain this (2,4) tree property.</description></item><item><title>AVL Tree Operations</title><link>https://wiki.fr1nge.xyz/notes/AVL-Tree-Operations/</link><pubDate>Sun, 02 Jan 2022 10:46:07 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/AVL-Tree-Operations/</guid><description>Insertion After inserting into an AVL Tree, which works just like a [[/notes/Binary Tree|Binary Tree]], we insert the node into the tree, we traverse upwards from the inserted node, checking if the AVL property is broken at any point in the tree.</description></item><item><title>Binary Tree Restructuring</title><link>https://wiki.fr1nge.xyz/notes/Binary-Tree-Restructuring/</link><pubDate>Sun, 02 Jan 2022 10:33:43 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/Binary-Tree-Restructuring/</guid><description>Sometimes, when creating a [[/notes/Balanced Binary Search Trees|balanced tree]], [[/notes/Binary Tree Rotations|rotations]] may not be sufficient. In this case, a technique called trinode structuring comes in, which is essentially one or two rotations combined.</description></item><item><title>AVL Trees</title><link>https://wiki.fr1nge.xyz/notes/AVL-Trees/</link><pubDate>Sun, 02 Jan 2022 10:30:38 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/AVL-Trees/</guid><description>Keeping a [[/notes/Binary Tree|Binary Tree]] [[/notes/Balanced Binary Search Trees|balanced]] is crucial to sustain its performance, and AVLs trees ensure that by enforcing one simple rule to these trees:</description></item><item><title>Binary Tree Traversal</title><link>https://wiki.fr1nge.xyz/notes/Binary-Tree-Traversal/</link><pubDate>Sun, 02 Jan 2022 09:44:41 +0300</pubDate><guid>https://wiki.fr1nge.xyz/notes/Binary-Tree-Traversal/</guid><description>With recursion With recursion, it pretty straightforward, here is an example java code:
1 2 3 4 5 6 7 public static void traverse(BinaryTree t, List&amp;lt;Integer&amp;gt; l){ if(t == null) return; traverse(t.</description></item><item><title>Binary Tree Rotations</title><link>https://wiki.fr1nge.xyz/notes/Binary-Tree-Rotations/</link><pubDate>Sat, 01 Jan 2022 03:14:57 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Binary-Tree-Rotations/</guid><description>A rotation of a [[/notes/Binary Tree|Binary Tree]] node is basically replacing a node with one of its children. In order to sustain the search tree property of a binary tree however, when replacing a node with its left child, the host becomes its right child, and the reverse applies when replacing wit its right child.</description></item><item><title>Balanced Binary Search Trees</title><link>https://wiki.fr1nge.xyz/notes/Balanced-Binary-Search-Trees/</link><pubDate>Sat, 01 Jan 2022 03:12:26 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Balanced-Binary-Search-Trees/</guid><description>How a [[/notes/Binary Search Trees|BST]] performs depends largely on how well balanced it is. If a tree has mostly linear structure, then its worst-case time complexity for searching becomes $O(n)$ instead of $O(log(n))$.</description></item><item><title>Deleting From A Binary Search Tree</title><link>https://wiki.fr1nge.xyz/notes/Deleting-From-A-Binary-Search-Tree/</link><pubDate>Sat, 01 Jan 2022 03:08:29 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Deleting-From-A-Binary-Search-Tree/</guid><description>Deleting from a [[/notes/Binary Search Trees|binary search tree]] can be a tricky process since we want to sustain the BST property of the tree upon deletion.</description></item><item><title>Binary Search Trees</title><link>https://wiki.fr1nge.xyz/notes/Binary-Search-Trees/</link><pubDate>Sat, 01 Jan 2022 02:37:16 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Binary-Search-Trees/</guid><description>Binary search trees are an extension of the [[/notes/Binary Tree|Binary Tree]] data structure, except it has two extra constraint:
A node can have two children, the children with the value less than the node&amp;rsquo;s is placed to the left of it, and the one with a higher value is placed to the right.</description></item><item><title>Bottom-Up Heap Construction</title><link>https://wiki.fr1nge.xyz/notes/Bottom-Up-Heap-Construction/</link><pubDate>Tue, 21 Dec 2021 02:25:16 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Bottom-Up-Heap-Construction/</guid><description>Constructing a heap from scratch by inserting each element into the heap takes $O(nlog(n))$ time. However, when you have a list with $2^n-1$ elements, you can construct a heap with those elements in $O(n)$ time using the following steps.</description></item><item><title>Binary Tree</title><link>https://wiki.fr1nge.xyz/notes/Binary-Tree/</link><pubDate>Tue, 14 Dec 2021 20:32:21 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Binary-Tree/</guid><description>A binary [[/notes/Tree|Tree]] is a tree with a few extra constraints added on top:
Every node can have at most 2 children Each child node is either left or right child.</description></item><item><title>Breadth First Traversal</title><link>https://wiki.fr1nge.xyz/notes/Breadth-First-Traversal/</link><pubDate>Tue, 14 Dec 2021 20:32:21 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Breadth-First-Traversal/</guid><description>In breadth first [[/notes/Tree Traversal|Tree Traversal]], the nodes at the same depth([[/notes/Tree Terminology|Important Tree Terminology]]) are visited first, before visiting the nodes at higher depths.</description></item><item><title>Full vs Complete Binary Trees</title><link>https://wiki.fr1nge.xyz/notes/Full-Complete-Trees/</link><pubDate>Tue, 14 Dec 2021 20:32:21 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Full-Complete-Trees/</guid><description>In a full/complete [[/notes/Binary Tree|Binary Tree]], every node has two children, except the leaf nodes. In a complete binary tree however, every level has the maximum number of nodes it can have.</description></item><item><title>Heap</title><link>https://wiki.fr1nge.xyz/notes/Heap/</link><pubDate>Tue, 14 Dec 2021 20:32:21 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Heap/</guid><description>A heap is basically a [[/notes/Binary Tree|Binary Tree]] which is complete([[/notes/Full &amp;amp; Complete Trees|Full vs Complete Binary Trees]]) and every child of a parent node ([[/notes/Tree Terminology|Important Tree Terminology]]) has a value greater than or equal to the parent&amp;rsquo;s value.</description></item><item><title>Pre-Order Tree Traversal</title><link>https://wiki.fr1nge.xyz/notes/Pre-Order-Traversal/</link><pubDate>Tue, 14 Dec 2021 20:32:21 +0100</pubDate><guid>https://wiki.fr1nge.xyz/notes/Pre-Order-Traversal/</guid><description>This is a method of depth first [[/notes/Tree Traversal|Tree Traversal]] in which we visit a node first and then visit its children, recursively.</description></item></channel></rss>