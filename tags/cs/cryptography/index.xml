<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cs/cryptography on</title><link>https://wiki.yigit.run/tags/cs/cryptography/</link><description>Recent content in cs/cryptography on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://wiki.yigit.run/tags/cs/cryptography/index.xml" rel="self" type="application/rss+xml"/><item><title>OvertheWire Krypton</title><link>https://wiki.yigit.run/notes/OvertheWire-Krypton/</link><pubDate>Mon, 17 Jan 2022 05:21:09 +0100</pubDate><guid>https://wiki.yigit.run/notes/OvertheWire-Krypton/</guid><description> [[/notes/krypton0&amp;amp;1|krypton0 &amp;amp;&amp;amp; krypton1]] [[/notes/krypton2|krypton2]] [[/notes/krypton3|krypton3]] [[/notes/krypton4|krypton4]] [[/notes/krypton5|krypton5]] [[/notes/krypton6|krypton6]]</description></item><item><title>krypton0 &amp;&amp; krypton1</title><link>https://wiki.yigit.run/notes/krypton01/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton01/</guid><description> krypton0: echo S1JZUFRPTklTR1JFQVQ= | base64 -d (KRYPTONISGREAT) krypton1: cat krypton2 | tr A-Z N-ZA-M (ROTTEN)</description></item><item><title>krypton2</title><link>https://wiki.yigit.run/notes/krypton2/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton2/</guid><description>create a file that contains all the letters in the alphabet, and run the encrypt binary on the file. Now you have a one-to-one map of all the letters and their correspondants.</description></item><item><title>krypton3</title><link>https://wiki.yigit.run/notes/krypton3/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton3/</guid><description>We have 3 files, translated from english text that were encrypted from the same key. Since they are originally english, we can have a general idea of the key by counting the frequency of each character.</description></item><item><title>krypton4</title><link>https://wiki.yigit.run/notes/krypton4/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton4/</guid><description>This time a [[/notes/Vigenere|vigenere cipher]] is used to encrypt the text. We know the key is 6 characters long. There are two files.</description></item><item><title>krypton5</title><link>https://wiki.yigit.run/notes/krypton5/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton5/</guid><description>same method as krypton4
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def letter_freq(string): counts = [0]*26 freqs = {} for i in string: c = ord(i.</description></item><item><title>krypton6</title><link>https://wiki.yigit.run/notes/krypton6/</link><pubDate>Tue, 16 Nov 2021 21:07:41 +0100</pubDate><guid>https://wiki.yigit.run/notes/krypton6/</guid><description>When we pass a bunch of &amp;ldquo;A&amp;quot;s into to the encryption binary, we get a repeating pattern EICTDGYIYZKTHNSIRFXYCPFUEOCKRN. We can then simply use this to calculate the original text:</description></item></channel></rss>